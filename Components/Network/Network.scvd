<?xml version="1.0" encoding="utf-8"?>

<component_viewer schemaVersion="0.1" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="Component_Viewer.xsd">
  <component name="Network" shortname="NET" version="8.0.0"/>    <!-- name and version of the component  -->

  <typedefs>
    <!-- Network Library variant -->
    <typedef name="NetLib" size="4" info="Network library variant">
      <member name="var"           type="int32_t"    offset="0">
        <enum name="IPv4 Only"       value="0"         info="IPv4 only variant"/>
        <enum name="IPv4/IPv6"       value="1"         info="IPv4/IPv6 variant"/>
      </member>
    </typedef>

    <!-- Network Interface Descriptor -->
    <typedef name="IF_CFG" size="32" const="1" info="Network Interface descriptor">
      <member name="State"         type="uint32_t"   offset="0"   info="Address of interface status"/>
      <member name="Id"            type="uint16_t"   offset="4"   info="Interface identifier">
        <enum name="ETH0"          value="0x0100"      info="Ethernet interface 0"/>
        <enum name="ETH1"          value="0x0101"      info="Ethernet interface 1"/>
        <enum name="WIFI0"         value="0x0200"      info="Wireless interface 0"/>
        <enum name="WIFI1"         value="0x0201"      info="Wireless interface 1"/>
        <enum name="PPP"           value="0x0300"      info="PPP interface"/>
        <enum name="SLIP"          value="0x0400"      info="SLIP interface"/>
      </member>
      <member name="Name"          type="uint8_t"    offset="6"   info="Interface name"/>
      <member name="MacAddr"       type="uint32_t"   offset="12"  info="Address of active MAC address"/>
      <member name="localm"        type="uint32_t"   offset="16"  info="Address of IPv4 local machine info"/>
      <member name="Ip4Cfg"        type="uint32_t"   offset="20"  info="Address of IPv4 configuration"/>
      <member name="localm6"       type="uint32_t"   offset="24"  info="Address of IPv6 local machine info"/>
      <member name="Ip6Cfg"        type="uint32_t"   offset="28"  info="Address of IPv6 configuration"/>
    </typedef>

    <!-- IPv4 Local Machine Info -->
    <typedef name="LOCALM" size="24" info="Local machine info version 4">
      <member name="Mtu"           type="uint16_t"   offset="0"   info="Maximum IP transmission unit"/>
      <member name="IpAddr"        type="uint8_t"    offset="4"   info="IPv4 address"/>
      <member name="NetMask"       type="uint8_t"    offset="8"   info="Network mask"/>
      <member name="DefGW"         type="uint8_t"    offset="12"  info="Default gateway"/>
      <member name="PriDNS"        type="uint8_t"    offset="16"  info="Primary DNS server"/>
      <member name="SecDNS"        type="uint8_t"    offset="20"  info="Secondary DNS server"/>
    </typedef>

    <!-- IPv6 Local Machine Info -->
    <typedef name="LOCALM6" size="100" info="Local machine info version 6">
      <member name="Mtu"           type="uint16_t"   offset="0"   info="Maximum IP transfer unit"/>
      <member name="HopLimit"      type="uint8_t"    offset="2"   info="Hop limit for outgoing packets"/>
      <member name="PrefixLen"     type="uint8_t"    offset="3"   info="Subnet prefix length"/>
      <member name="IpAddr"        type="uint8_t"    offset="4"   info="IPv6 address"/>
      <member name="TempAddr"      type="uint8_t"    offset="20"  info="Temporary IPv6 address"/>
      <member name="LLAddr"        type="uint8_t"    offset="36"  info="Link-local address"/>
      <member name="DefGW"         type="uint8_t"    offset="52"  info="Default gateway"/>
      <member name="PriDNS"        type="uint8_t"    offset="68"  info="Primary DNS server"/>
      <member name="SecDNS"        type="uint8_t"    offset="84"  info="Secondary DNS server"/>
    </typedef>

    <!-- ETH Interface Control Info -->
    <typedef name="ETH_CTRL" size="20" info="Ethernet interface control info">
      <!-- Incomplete-structure: only members used by EVR -->
      <member name="VlanId"        type="uint16_t"   offset="2"   info="Vlan tag identifier"/>
      <member name="RxCount"       type="uint32_t"   offset="8"   info="Number of bytes received"/>
      <member name="TxCount"       type="uint32_t"   offset="12"  info="Number of bytes sent"/>
      <member name="LinkState"     type="uint8_t"    offset="18"  info="Current link state">
        <enum name="LinkDown"        value="0"         info="Link is down"/>
        <enum name="LinkUp"          value="1"         info="Link is up"/>
      </member>
    </typedef>

    <!-- WIFI Interface Control Info -->
    <typedef name="WIFI_CTRL" size="20" info="WIFI interface control info">
      <!-- Incomplete-structure: only members used by EVR -->
      <member name="RxCount"       type="uint32_t"   offset="8"   info="Number of bytes received"/>
      <member name="TxCount"       type="uint32_t"   offset="12"  info="Number of bytes sent"/>
      <member name="LinkState"     type="uint8_t"    offset="18"  info="Current link state">
        <enum name="Disconnected"    value="0"         info="Link is disconnected"/>
        <enum name="Connected"       value="1"         info="Link is connected"/>
      </member>
    </typedef>

    <!-- PPP Interface Control Info -->
    <typedef name="PPP_CTRL" size="20" info="PPP interface control info">
      <!-- Incomplete-structure: only members used by EVR -->
      <member name="Flags"         type="uint16_t"   offset="0"   info="Status and Control flags">
        <enum name="Disconnected"    value="0x0000"    info="Link is disconnected"/>
        <enum name="LinkUp"          value="0x0040"    info="Data link established"/>
        <enum name="Opened"          value="0x00C0"    info="Data link opened, authenticated"/>
        <enum name="NetworkUp"       value="0x01C0"    info="Network layer established"/>
      </member>
      <member name="RxCount"       type="uint32_t"   offset="12"  info="Number of bytes received"/>
      <member name="TxCount"       type="uint32_t"   offset="16"  info="Number of bytes sent"/>
    </typedef>

    <!-- SLIP Interface Control Info -->
    <typedef name="SLIP_CTRL" size="12" info="SLIP interface control info">
      <!-- Incomplete-structure: only members used by EVR -->
      <member name="RxCount"       type="uint32_t"   offset="0"   info="Number of bytes received"/>
      <member name="TxCount"       type="uint32_t"   offset="4"   info="Number of bytes sent"/>
      <member name="Flags"         type="uint8_t"    offset="8"   info="Status and Control flags">
        <enum name="Offline"         value="0x00"      info="Modem is offline"/>
        <enum name="Online"          value="0x08"      info="Modem is online"/>
      </member>
    </typedef>

    <!-- TCP Socket Info for Dual-Stack -->
    <typedef name="TCP_INFO" size="92" info="TCP socket control block">
      <!-- Incomplete-structure: only members used by EVR -->
      <member name="State"         type="uint8_t"    offset="0"   info="Socket state">
        <enum name="Unused"          value="0"         info="Free and unused"/>
        <enum name="Closed"          value="1"         info="Allocated and closed"/>
        <enum name="Listen"          value="2"         info="Waiting for incoming connection"/>
        <enum name="SYN_Received"    value="3"         info="SYN frame received"/>
        <enum name="SYN_Sent"        value="4"         info="SYN frame sent to establish a connection"/>
        <enum name="FIN_Wait1"       value="5"         info="Close started, FIN frame sent"/>
        <enum name="FIN_Wait2"       value="6"         info="Our FIN ACK-ed, waiting for remote FIN"/>
        <enum name="Closing"         value="7"         info="Received FIN independently of our FIN"/>
        <enum name="Last_ACK"        value="8"         info="Waiting for last ACK for our FIN"/>
        <enum name="TimeWait"        value="9"         info="Timed waiting for 2MSL"/>
        <enum name="Established"     value="10"        info="Connection established"/>
      </member>
      <member name="Type"          type="uint8_t"    offset="1"   info="Socket type">
        <enum name="None"                              value="0"/>
        <enum name="Delay-Ack"                         value="1"/>
        <enum name="Flow-Ctrl"                         value="2"/>
        <enum name="Flow-Ctrl, Delay-Ack"              value="3"/>
        <enum name="Keep-Alive"                        value="4"/>
        <enum name="Keep-Alive, Delay-Ack"             value="5"/>
        <enum name="Keep-Alive, Flow-Ctrl"             value="6"/>
        <enum name="Keep-Alive, Flow-Ctrl, Delay-Ack"  value="7"/>
      </member>
      <member name="LocPort"       type="uint16_t"   offset="4"   info="Local port number"/>
      <member name="AddrType"      type="int16_t"    offset="12"  info="Peer address type">
        <enum name="IP4"             value="0"         info="IPv4 address"/>
        <enum name="IP6"             value="1"         info="IPv6 address"/>
      </member>
      <member name="Port"          type="uint16_t"   offset="14"  info="Peer port number"/>
      <member name="Addr"          type="uint8_t"    offset="16"  info="IPv4 or IPv6 address (array 16 bytes, MSB first)"/>
      <member name="Timer"         type="uint16_t"   offset="36"  info="Alive timer"/>
      <member name="cb_func"       type="uint32_t"   offset="88"  info="Callback function"/>
    </typedef>

    <!-- TCP Socket Info for IPv4-Only -->
    <typedef name="TCP_INFO4" size="80" info="TCP socket control block">
      <!-- Incomplete-structure: only members used by EVR -->
      <member name="State"         type="uint8_t"    offset="0"   info="Socket state">
        <enum name="Unused"          value="0"         info="Free and unused"/>
        <enum name="Closed"          value="1"         info="Allocated and closed"/>
        <enum name="Listen"          value="2"         info="Waiting for incoming connection"/>
        <enum name="SYN_Received"    value="3"         info="SYN frame received"/>
        <enum name="SYN_Sent"        value="4"         info="SYN frame sent to establish a connection"/>
        <enum name="FIN_Wait1"       value="5"         info="Close started, FIN frame sent"/>
        <enum name="FIN_Wait2"       value="6"         info="Our FIN ACK-ed, waiting for remote FIN"/>
        <enum name="Closing"         value="7"         info="Received FIN independently of our FIN"/>
        <enum name="Last_ACK"        value="8"         info="Waiting for last ACK for our FIN"/>
        <enum name="TimeWait"        value="9"         info="Timed waiting for 2MSL"/>
        <enum name="Established"     value="10"        info="Connection established"/>
      </member>
      <member name="Type"          type="uint8_t"    offset="1"   info="Socket type">
        <enum name="None"                              value="0"/>
        <enum name="Delay-Ack"                         value="1"/>
        <enum name="Flow-Ctrl"                         value="2"/>
        <enum name="Flow-Ctrl, Delay-Ack"              value="3"/>
        <enum name="Keep-Alive"                        value="4"/>
        <enum name="Keep-Alive, Delay-Ack"             value="5"/>
        <enum name="Keep-Alive, Flow-Ctrl"             value="6"/>
        <enum name="Keep-Alive, Flow-Ctrl, Delay-Ack"  value="7"/>
      </member>
      <member name="LocPort"       type="uint16_t"   offset="4"   info="Local port number"/>
      <member name="Port"          type="uint16_t"   offset="14"  info="Peer port number"/>
      <member name="Addr"          type="uint8_t"    offset="16"  info="IPv4 address (array 4 bytes, MSB first)"/>
      <member name="Timer"         type="uint16_t"   offset="24"  info="Alive timer"/>
      <member name="cb_func"       type="uint32_t"   offset="76"  info="Callback function"/>
    </typedef>

    <!-- TCP Socket Configuration -->
    <typedef name="TCP_CFG" size="19" const="1" info="TCP socket configuration">
      <!-- Incomplete-structure: only members used by EVR -->
      <member name="Scb"           type="*TCP_INFO"  offset="0"   info="Pointer to socket control block array"/>
      <member name="NumSocks"      type="uint8_t"    offset="4"   info="Number of sockets"/>
    </typedef>

    <!-- UDP Socket Info -->
    <typedef name="UDP_INFO" size="16" info="UDP socket control block">
      <!-- Incomplete-structure: only members used by EVR -->
      <member name="State"         type="uint8_t"    offset="0"   info="Socket state">
        <enum name="Unused"          value="0"         info="Free and unused"/>
        <enum name="Closed"          value="1"         info="Allocated and closed"/>
        <enum name="Opened"          value="2"         info="Opened for communication"/>
      </member>
      <member name="Flags"         type="uint8_t"    offset="1"   info="Socket flags">
        <enum name="None"            value="0"/>
        <enum name="Send only"       value="1"/>
        <enum name="Verify only"     value="2"/>
        <enum name="Send, Verify"    value="3"/>
      </member>
      <member name="LocPort"       type="uint16_t"   offset="2"   info="Local port number"/>
      <member name="cb_func"       type="uint32_t"   offset="12"  info="Callback function"/>
    </typedef>

    <!-- UDP Socket Configuration -->
    <typedef name="UDP_CFG" size="5" const="1" info="UDP socket configuration">
      <member name="Scb"           type="*UDP_INFO"  offset="0"   info="Pointer to socket control block array"/>
      <member name="NumSocks"      type="uint8_t"    offset="4"   info="Number of sockets"/>
    </typedef>

    <!-- Event Recorder types -->

    <!-- Net Address structure -->
    <typedef name="NetAddr" size="20" info="Net address structure">
      <member name="addr_type"     type="uint16_t"   offset="0"   info="IP address type (0= IPv4, 1= IPv6)"/>
      <member name="port"          type="uint16_t"   offset="2"   info="Internet socket port number"/>
      <member name="addr"          type="uint8_t"    offset="4"   info="IPv4 or IPv6 address"/>
    </typedef>

    <!-- Net-Val parameter structure -->
    <typedef name="NetVal" size="4" info="Net 32-bit val structure">
      <member name="low"           type="uint16_t"   offset="0"   info="Lower halfword"/>
      <member name="high"          type="uint16_t"   offset="2"   info="Upper halfword"/>
      <member name="w0"            type="uint16_t"   offset="0"   info="Halfword 0"  />
      <member name="w1"            type="uint16_t"   offset="2"   info="Halfword 1"  />
      <member name="b0"            type="uint8_t"    offset="0"   info="Byte 0 (LSB)"/>
      <member name="b1"            type="uint8_t"    offset="1"   info="Byte 1      "/>
      <member name="b2"            type="uint8_t"    offset="2"   info="Byte 2      "/>
      <member name="b3"            type="uint8_t"    offset="3"   info="Byte 3 (MSB)"/>
    </typedef>

    <!-- IP Version internal -->
    <typedef name="IP_Ver" size="1" info="Internet protocol version">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="IPv4"            value="0"         info="IP version 4"/>
        <enum name="IPv6"            value="1"         info="IP version 6"/>
      </member>
    </typedef>

    <!-- Network Interface identifier -->
    <typedef name="NetIf"  size="2" info="Network interface identifier (class and number)">
      <member name="id"            type="uint16_t"   offset="0">
        <enum name="ETH0"            value="0x0100"    info="Ethernet interface 0"/>
        <enum name="ETH1"            value="0x0101"    info="Ethernet interface 1"/>
        <enum name="WIFI0"           value="0x0200"    info="WiFi interface 0"/>
        <enum name="WIFI1"           value="0x0201"    info="WiFi interface 1"/>
        <enum name="PPP"             value="0x0300"    info="PPP interface"/>
        <enum name="SLIP"            value="0x0400"    info="SLIP interface"/>
      </member>
    </typedef>

    <!-- Network Interface protocol version -->
    <typedef name="Netif_Ver" size="1" info="Network interface protocol version">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="TCP/IPv4"        value="0"         info="TCP/IP version 4"/>
        <enum name="TCP/IPv6"        value="1"         info="TCP/IP version 6"/>
      </member>
    </typedef>

    <!-- Network Interface options -->
    <typedef name="Netif_Opt" size="1" info="Network interface options">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="MAC_Addr"        value="0"         info="Ethernet MAC address"/>
        <enum name="VLAN_Id"         value="1"         info="Ethernet VLAN identifier"/>
        <enum name="IP4_MTU"         value="2"         info="IPv4 Maximum transmission unit"/>
        <enum name="IP4_Addr"        value="3"         info="IPv4 Address"/>
        <enum name="IP4_NetMask"     value="4"         info="IPv4 Subnet mask"/>
        <enum name="IP4_DefGW"       value="5"         info="IPv4 Default Gateway"/>
        <enum name="IP4_PriDNS"      value="6"         info="IPv4 Primary DNS"/>
        <enum name="IP4_SecDNS"      value="7"         info="IPv4 Secondary DNS"/>
        <enum name="IP6_MTU"         value="8"         info="IPv6 Maximum transmission unit"/>
        <enum name="IP6_LLAddr"      value="9"         info="IPv6 Link-local Address"/>
        <enum name="IP6_StatAddr"    value="10"        info="IPv6 Static Address"/>
        <enum name="IP6_DynAddr"     value="11"        info="IPv6 Dynamic Address"/>
        <enum name="IP6_PrefixLen"   value="12"        info="IPv6 Subnet Prefix-length"/>
        <enum name="IP6_DefGW"       value="13"        info="IPv6 Default Gateway"/>
        <enum name="IP6_PriDNS"      value="14"        info="IPv6 Primary DNS"/>
        <enum name="IP6_SecDNS"      value="15"        info="IPv6 Secondary DNS"/>
      </member>
    </typedef>

    <!-- Ethernet Header structure -->
    <typedef name="ETH_Header" size="14" endian="b" info="Ethernet header structure">
      <member name="DstAddr"       type="uint8_t"    offset="0"   info="Destination MAC address"/>
      <member name="SrcAddr"       type="uint8_t"    offset="6"   info="Source MAC address"/>
      <member name="Proto"         type="uint16_t"   offset="12"  info="Protocol type">
        <enum name="ARP"             value="0x0806"    info="Address Resolution Protocol"/>
        <enum name="IP4"             value="0x0800"    info="Internet Protocol version 4"/>
        <enum name="IP6"             value="0x86dd"    info="Internet Protocol version 6"/>
        <enum name="RRCP"            value="0x8899"    info="Realtek Remote Control Protocol"/>
        <enum name="EAPoL"           value="0x888e"    info="Extensible Authentication Protocol over LAN"/>
      </member>
    </typedef>

    <!-- Ethernet Link speed -->
    <typedef name="ETH_Speed" size="1" info="Ethernet link speed">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="10 Mbit"         value="0"         info="10 Mbps link speed"/>
        <enum name="100 Mbit"        value="1"         info="100 Mbps link speed"/>
        <enum name="1 Gbit"          value="2"         info="1 Gpbs link speed"/>
      </member>
    </typedef>

    <!-- Ethernet Link duplex -->
    <typedef name="ETH_Duplex" size="1" info="Ethernet link duplex">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Half"            value="0"         info="Half duplex"/>
        <enum name="Full"            value="1"         info="Full duplex"/>
      </member>
    </typedef>

    <!-- WiFi connection state -->
    <typedef name="WIFI_State" size="1" info="WiFi connection state">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Disconnected"    value="0"         info="Station not connected"/>
        <enum name="Connected"       value="1"         info="Station connected"/>
      </member>
    </typedef>

    <!-- WiFi operation mode -->
    <typedef name="WIFI_Mode" size="1" info="WiFi operation mode">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Station"         value="0"         info="Station"/>
        <enum name="AP"              value="1"         info="Access Point"/>
      </member>
    </typedef>

    <!-- WiFi driver option -->
    <typedef name="WIFI_Opt" size="1" info="WiFi driver option">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="BSSID"           value="1"         info="BSSID"/>
        <enum name="TX-Power"        value="2"         info="Transmit power"/>
        <enum name="LP-Timer"        value="3"         info="Low power deep-sleep time"/>
        <enum name="DTIM"            value="4"         info="DTIM interval"/>
        <enum name="Beacon"          value="5"         info="Beacon interval"/>
      </member>
    </typedef>

    <!-- PPP Protocol type -->
    <typedef name="PPP_Proto" size="2" info="PPP protocol type">
      <member name="id"            type="uint16_t"   offset="0">
        <enum name="LCP"             value="0xc021"    info="Link Control Protocol"/>
        <enum name="PAP"             value="0xc023"    info="Password Authentication Protocol"/>
        <enum name="CHAP"            value="0xc223"    info="Challenge Handshake Authentication Protocol"/>
        <enum name="IPCP"            value="0x8021"    info="Internet Protocol Control Protocol"/>
        <enum name="IP"              value="0x0021"    info="Internet Protocol version 4"/>
      </member>
    </typedef>

    <!-- PPP-LCP Header structure -->
    <typedef name="LCP_Header" size="4" endian="b" info="PPP-LCP header structure">
      <member name="Code"          type="uint8_t"    offset="0"   info="LCP Code field">
        <enum name="CONF_RQ"         value="1"         info="Configure-Request"/>
        <enum name="CONF_ACK"        value="2"         info="Configure-Ack"/>
        <enum name="CONF_NAK"        value="3"         info="Configure-Nak"/>
        <enum name="CONF_REJ"        value="4"         info="Configure-Reject"/>
        <enum name="TERM_RQ"         value="5"         info="Terminate-Request"/>
        <enum name="TERM_ACK"        value="6"         info="Terminate-Ack"/>
        <enum name="CODE_REJ"        value="7"         info="Code-Reject"/>
        <enum name="PROT_REJ"        value="8"         info="Protocol-Reject"/>
        <enum name="ECHO_RQ"         value="9"         info="Echo-Request"/>
        <enum name="ECHO_REP"        value="10"        info="Echo-Reply"/>
        <enum name="DISC_RQ"         value="11"        info="Discard-Request"/>
      </member>
      <member name="Id"            type="uint8_t"    offset="1"   info="Code identifier"/>
      <member name="Len"           type="uint16_t"   offset="2"   info="Code length"/>
    </typedef>

    <!-- PPP-PAP Header structure -->
    <typedef name="PAP_Header" size="4" endian="b" info="PPP-PAP header structure">
      <member name="Code"          type="uint8_t"    offset="0"   info="PAP Code field">
        <enum name="AUTH_RQ"         value="1"         info="Authenticate-Request"/>
        <enum name="AUTH_ACK"        value="2"         info="Authenticate-Ack"/>
        <enum name="AUTH_NAK"        value="3"         info="Authenticate-Nak"/>
      </member>
      <member name="Id"            type="uint8_t"    offset="1"   info="Code identifier"/>
      <member name="Len"           type="uint16_t"   offset="2"   info="Code length"/>
    </typedef>

    <!-- PPP-CHAP Header structure -->
    <typedef name="CHAP_Header" size="4" endian="b" info="PPP-CHAP header structure">
      <member name="Code"          type="uint8_t"    offset="0"   info="CHAP Code field">
        <enum name="CHALLENGE"       value="1"         info="Challenge reqest"/>
        <enum name="RESPONSE"        value="2"         info="Response to Challenge"/>
        <enum name="SUCCESS"         value="3"         info="Authentication Success"/>
        <enum name="FAILED"          value="4"         info="Authentication Failure"/>
      </member>
      <member name="Id"            type="uint8_t"    offset="1"   info="Code identifier"/>
      <member name="Len"           type="uint16_t"   offset="2"   info="Code length"/>
    </typedef>

    <!-- PPP-IPCP Header structure -->
    <typedef name="IPCP_Header" size="4" endian="b" info="PPP-IPCP header structure">
      <member name="Code"          type="uint8_t"    offset="0"   info="IPCP Code field">
        <enum name="CONF_RQ"         value="1"         info="Configure-Request"/>
        <enum name="CONF_ACK"        value="2"         info="Configure-Ack"/>
        <enum name="CONF_NAK"        value="3"         info="Configure-Nak"/>
        <enum name="CONF_REJ"        value="4"         info="Configure-Reject"/>
        <enum name="TERM_RQ"         value="5"         info="Terminate-Request"/>
        <enum name="TERM_ACK"        value="6"         info="Terminate-Ack"/>
        <enum name="CODE_REJ"        value="7"         info="Code-Reject"/>
      </member>
      <member name="Id"            type="uint8_t"    offset="1"   info="Code identifier"/>
      <member name="Len"           type="uint16_t"   offset="2"   info="Code length"/>
    </typedef>

    <!-- PPP Authentication type -->
    <typedef name="PPP_Auth" size="2" info="PPP authentication type">
      <member name="id"            type="uint16_t"   offset="0">
        <enum name="PAP"             value="0xc023"    info="Password Authentication Protocol"/>
        <enum name="CHAP"            value="0xc223"    info="Challenge Handshanke Authentication Protocol"/>
      </member>
    </typedef>

    <!-- IPv4 Header structure -->
    <typedef name="IP4_Header" size="20" endian="b" info="IPv4 header structure">
      <member name="VerHlen"       type="uint8_t"    offset="0"   info="Version and Header Length field"/>
      <member name="Tos"           type="uint8_t"    offset="1"   info="Type Of Service field"/>
      <member name="Len"           type="uint16_t"   offset="2"   info="Total Length of IP packet"/>
      <member name="Id"            type="uint16_t"   offset="4"   info="IP Identification number"/>
      <member name="FragOffs"      type="uint16_t"   offset="6"   info="IP Flags and Fragment offset"/>
      <member name="Ttl"           type="uint8_t"    offset="8"   info="Time to live"/>
      <member name="Proto"         type="uint8_t"    offset="9"   info="High level Protocol over IP">
        <enum name="ICMP"            value="1"         info="ICMP over IPv4"/>
        <enum name="IGMP"            value="2"         info="IGMP over IPv4"/>
        <enum name="TCP"             value="6"         info="TCP over IPv4"/>
        <enum name="UDP"             value="17"        info="UDP over IPv4"/>
      </member>
      <member name="Chksum"        type="uint16_t"   offset="10"  info="IP Header Checksum"/>
      <member name="SrcAddr"       type="uint8_t"    offset="12"  info="Source IP address"/>
      <member name="DstAddr"       type="uint8_t"    offset="16"  info="Destination IP address"/>
    </typedef>

    <!-- IPv4 Protocol type -->
    <typedef name="IP4_Proto" size="1" info="IPv4 protocol type">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="ICMP"            value="1"         info="ICMP over IPv4"/>
        <enum name="IGMP"            value="2"         info="IGMP over IPv4"/>
        <enum name="TCP"             value="6"         info="TCP over IPv4"/>
        <enum name="UDP"             value="17"        info="UDP over IPv4"/>
      </member>
    </typedef>

    <!-- ICMP Header structure -->
    <typedef name="ICMP_Header" size="8" endian="b" info="ICMP header structure">
      <member name="Type"          type="uint8_t"    offset="0"   info="Type of message">
        <enum name="ECHO_REPLY"      value="0"         info="Echo Reply"/>
        <enum name="DEST_UNREACH"    value="3"         info="Destination Unreachable"/>
        <enum name="ECHO_REQUEST"    value="8"         info="Echo Request"/>
        <enum name="TIME_EXCEEDED"   value="11"        info="Time Exceeded"/>
        <enum name="TRACE_ROUTE"     value="30"        info="Traceroute"/>
      </member>
      <member name="Code"          type="uint8_t"    offset="1"   info="Message Code byte"/>
      <member name="Chksum"        type="uint16_t"   offset="2"   info="Checksum of ICMP header"/>
      <member name="Id"            type="uint16_t"   offset="4"   info="Echo Identifier"/>
      <member name="Seq"           type="uint16_t"   offset="6"   info="Echo Sequence"/>
    </typedef>

    <!-- IGMP Message type -->
    <typedef name="IGMP_Type" size="1" info="IGMP message type">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="QUERY"           value="0x11"      info="Host Membership Query all versions"/>
        <enum name="REPORT_V1"       value="0x12"      info="Host Membership Report IGMPv1"/>
        <enum name="REPORT_V2"       value="0x16"      info="Host Membership Report IGMPv2"/>
        <enum name="LEAVE_V2"        value="0x17"      info="Leave Group IGMPv2"/>
        <enum name="REPORT_V3"       value="0x22"      info="Host Membership Report IGMPv3"/>
      </member>
    </typedef>

    <!-- DHCP State -->
    <typedef name="DHCP_State" size="1" info="DHCP state">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="DISABLED"        value="0"         info="DHCP Client is disabled"/>
        <enum name="INIT_REBOOT"     value="1"         info="DHCP Reboot, request existing IP"/>
        <enum name="REBOOTING"       value="2"         info="DHCP Client is rebooting"/>
        <enum name="INIT"            value="3"         info="Initialize DHCP Client, request new IP"/>
        <enum name="SELECTING"       value="4"         info="Select DHCP Server, get offer"/>
        <enum name="REQUESTING"      value="5"         info="Request sent, waiting for reply"/>
        <enum name="BOUND"           value="6"         info="IP address resolved and valid"/>
        <enum name="RENEWING"        value="7"         info="IP address will expire, renewing"/>
        <enum name="REBINDING"       value="8"         info="Renew failed, find DHCP Server, rebind"/>
        <enum name="AUTO_IP"         value="9"         info="Selecting failed, select random Auto-IP"/>
      </member>
    </typedef>

    <!-- DHCP Message type -->
    <typedef name="DHCP_Type" size="1" info="DHCP message type">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="DHCP_DISCOVER"   value="1"         info="Choose an IP address for Client"/>
        <enum name="DHCP_OFFER"      value="2"         info="Offer new IP address to Client"/>
        <enum name="DHCP_REQUEST"    value="3"         info="Request an IP address for Client"/>
        <enum name="DHCP_DECLINE"    value="4"         info="Reject offered IP address"/>
        <enum name="DHCP_ACK"        value="5"         info="IP Address lease acknowledge"/>
        <enum name="DHCP_NAK"        value="6"         info="Lease not acked, offer withdrawn"/>
        <enum name="DHCP_RELEASE"    value="7"         info="Release Leased IP Address"/>
        <enum name="DHCP_INFORM"     value="8"         info="Send DHCP Options to Client"/>
      </member>
    </typedef>

    <!-- DHCP Options -->
    <typedef name="DHCP_Opt" size="1" info="DHCP options">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="None"                              value="0"/>
        <enum name="Vcid"                              value="1"/>
        <enum name="NTP-Servers"                       value="2"/>
        <enum name="NTP-Servers, Vcid"                 value="3"/>
        <enum name="Bootfile"                          value="4"/>
        <enum name="Bootfile, Vcid"                    value="5"/>
        <enum name="Bootfile, NTP-Servers"             value="6"/>
        <enum name="Bootfile, NTP-Servers, Vcid"       value="7"/>
      </member>
    </typedef>

    <!-- ARP Operation code -->
    <typedef name="ARP_Opcode" size="2" info="ARP operation code">
      <member name="id"            type="uint16_t"   offset="0">
        <enum name="ARP_REQUEST"     value="1"         info="ARP Request"/>
        <enum name="ARP_REPLY"       value="2"         info="ARP Reply"/>
        <enum name="RARP_REQUEST"    value="3"         info="Reverse ARP Request"/>
        <enum name="RARP_REPLY"      value="4"         info="Reverse ARP Reply"/>
        <enum name="InARP_REQUEST"   value="8"         info="Inverse ARP Request"/>
        <enum name="InARP_RESPONSE"  value="9"         info="Inverse ARP Response"/>
      </member>
    </typedef>

    <!-- ARP Header structure -->
    <typedef name="ARP_Header" size="28" endian="b" info="ARP header structure">
      <member name="HwType"        type="uint16_t"   offset="0"   info="Hardware address type"/>
      <member name="ProtType"      type="uint16_t"   offset="2"   info="Protocol address type"/>
      <member name="HwLen"         type="uint8_t"    offset="4"   info="Hardware address length"/>
      <member name="ProtLen"       type="uint8_t"    offset="5"   info="Protocol address length"/>
      <member name="OpCode"        type="uint16_t"   offset="6"   info="ARP/RARP Opcode">
        <enum name="ARP_REQUEST"     value="1"         info="ARP Request"/>
        <enum name="ARP_REPLY"       value="2"         info="ARP Reply"/>
        <enum name="RARP_REQUEST"    value="3"         info="Reverse ARP Request"/>
        <enum name="RARP_REPLY"      value="4"         info="Reverse ARP Reply"/>
        <enum name="InARP_REQUEST"   value="8"         info="Inverse ARP Request"/>
        <enum name="InARP_RESPONSE"  value="9"         info="Inverse ARP Response"/>
      </member>
      <member name="SendHw"        type="uint8_t"    offset="8"   info="Sender hardware address"/>
      <member name="SendIp"        type="uint8_t"    offset="14"  info="Sender IP address"/>
      <member name="TargHw"        type="uint8_t"    offset="18"  info="Target hardware address"/>
      <member name="TargIp"        type="uint8_t"    offset="24"  info="Target IP address"/>
    </typedef>

    <!-- ARP Cache entry structure -->
    <typedef name="ARP_Cache" size="12" info="ARP cache entry type">
      <member name="NetIf"         type="uint16_t"   offset="0"   info="Interface Identifier"/>
      <member name="Num"           type="uint8_t"    offset="2"   info="Entry number (index)"/>
      <member name="Type"          type="uint8_t"    offset="3"   info="Entry type">
        <enum name="FixIP"           value="0"         info="Fixed-IP refreshed on timeout"/>
        <enum name="TempIP"          value="1"         info="Temp-IP removed from cache on timeout"/>
        <enum name="InuseIP"         value="2"         info="Inuse-IP is refreshed once, then removed"/>
      </member>
      <member name="IpAddr"        type="uint8_t"    offset="4"   info="IP Address"/>
      <member name="MacAddr"       type="uint8_t"    offset="8"   info="MAC Address"/>
    </typedef>

    <!-- IPv6 Header structure -->
    <typedef name="IP6_Header" size="40" endian="b" info="IPv6 header structure">
      <member name="VerClass"      type="uint8_t"    offset="0"   info="Version and Traffic Class high 4-bits"/>
      <member name="ClassFlow"     type="uint8_t"    offset="1"   info="Traffic Class low 4-bits and Flow Label high 4-bits"/>
      <member name="Flow"          type="uint16_t"   offset="2"   info="Flow Label low bits"/>
      <member name="Len"           type="uint16_t"   offset="4"   info="Payload Length"/>
      <member name="NextHdr"       type="uint8_t"    offset="6"   info="Next header">
        <enum name="HOP-BY-HOP"      value="0"         info="IPv6 hop-by-hop option"/>
        <enum name="TCP"             value="6"         info="TCP over IPv6"/>
        <enum name="UDP"             value="17"        info="UDP over IPv6"/>
        <enum name="FRAG"            value="44"        info="Fragmentation for IPv6"/>
        <enum name="ICMP6"           value="58"        info="ICMP over IPv6"/>
      </member>
      <member name="HopLim"        type="uint8_t"    offset="7"   info="Hop limit (TTL)"/>
      <member name="SrcAddr"       type="uint8_t"    offset="8"   info="Source IP address"/>
      <member name="DstAddr"       type="uint8_t"    offset="24"  info="Destination IP address"/>
    </typedef>

    <!-- IPv6 Protocol type (next header) -->
    <typedef name="IP6_Proto" size="1" info="IPv6 protocol type">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="HOP-BY-HOP"      value="0"         info="IPv6 hop-by-hop option"/>
        <enum name="TCP"             value="6"         info="TCP over IPv6"/>
        <enum name="UDP"             value="17"        info="UDP over IPv6"/>
        <enum name="FRAG"            value="44"        info="Fragmentation for IPv6"/>
        <enum name="ICMP6"           value="58"        info="ICMP over IPv6"/>
      </member>
    </typedef>

    <!-- ICMPv6 Message type -->
    <typedef name="ICMP6_Type" size="1" info="ICMPv6 message type">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="ECHO_REQUEST"    value="128"       info="ICMPv6 Echo Request"/>
        <enum name="ECHO_REPLY"      value="129"       info="ICMPv6 Echo Reply"/>
        <enum name="MCAST_QUERY"     value="130"       info="Multicast Listener Query"/>
        <enum name="MCAST_REPORT"    value="131"       info="Multicast Listener Report"/>
        <enum name="MCAST_DONE"      value="132"       info="Multicast Listener Done"/>
        <enum name="ROUTER_SOL"      value="133"       info="Router Solicitation"/>
        <enum name="ROUTER_ADVER"    value="134"       info="Router Advertisement"/>
        <enum name="NEIGHB_SOL"      value="135"       info="Neighbor Solicitation"/>
        <enum name="NEIGHB_ADVER"    value="136"       info="Neighbor Advertisement"/>
        <enum name="InvNEIGHB_SOL"   value="141"       info="Inverse Neighbor Solicitation"/>
        <enum name="InvNEIGHB_ADVER" value="142"       info="Inverse Neighbor Advertisement"/>
      </member>
    </typedef>

    <!-- ICMPv6 Header structure -->
    <typedef name="ICMP6_Header" size="8" endian="b" info="ICMPv6 header structure">
      <member name="Type"          type="uint8_t"    offset="0"   info="Type of message">
        <enum name="ECHO_REQUEST"    value="128"       info="ICMPv6 Echo Request"/>
        <enum name="ECHO_REPLY"      value="129"       info="ICMPv6 Echo Reply"/>
        <enum name="MCAST_QUERY"     value="130"       info="Multicast Listener Query"/>
        <enum name="MCAST_REPORT"    value="131"       info="Multicast Listener Report"/>
        <enum name="MCAST_DONE"      value="132"       info="Multicast Listener Done"/>
        <enum name="ROUTER_SOL"      value="133"       info="Router Solicitation"/>
        <enum name="ROUTER_ADVER"    value="134"       info="Router Advertisement"/>
        <enum name="NEIGHB_SOL"      value="135"       info="Neighbor Solicitation"/>
        <enum name="NEIGHB_ADVER"    value="136"       info="Neighbor Advertisement"/>
        <enum name="InvNEIGHB_SOL"   value="141"       info="Inverse Neighbor Solicitation"/>
        <enum name="InvNEIGHB_ADVER" value="142"       info="Inverse Neighbor Advertisement"/>
      </member>
      <member name="Code"          type="uint8_t"    offset="1"   info="Message Code byte"/>
      <member name="Chksum"        type="uint16_t"   offset="2"   info="Checksum of ICMP header"/>
      <member name="Id"            type="uint16_t"   offset="4"   info="Echo Identifier"/>
      <member name="Seq"           type="uint16_t"   offset="6"   info="Echo Sequence"/>
    </typedef>

    <!-- DHCPv6 State -->
    <typedef name="DHCP6_State" size="1" info="DHCPv6 state">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="DISABLED"        value="0"         info="DHCP6 Client is disabled"/>
        <enum name="INIT"            value="1"         info="Initialize Client, request configuration"/>
        <enum name="START"           value="2"         info="Wait before sending first request"/>
        <enum name="DISCOVER"        value="3"         info="Discover DHCP6 Server, get offer"/>
        <enum name="REQUEST"         value="4"         info="Request sent, waiting for reply"/>
        <enum name="BOUND"           value="5"         info="IP6 address resolved and valid"/>
        <enum name="RENEW"           value="6"         info="IP6 address will expire, renewing"/>
        <enum name="REBIND"          value="7"         info="Renew failed, find DHCP6 Server, rebind"/>
        <enum name="INFO"            value="8"         info="Request Information in stateless mode"/>
        <enum name="IDLE"            value="9"         info="Idle in stateless mode"/>
      </member>
    </typedef>

    <!-- DHCPv6 Message type -->
    <typedef name="DHCP6_Type" size="1" info="DHCPv6 message type">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="SOLICIT"         value="1"         info="Discover DHCP6 servers"/>
        <enum name="ADVERTISE"       value="2"         info="DHCP6 server available response"/>
        <enum name="REQUEST"         value="3"         info="Request an IP address for client"/>
        <enum name="CONFIRM"         value="4"         info="Confirm IP address assignment"/>
        <enum name="RENEW"           value="5"         info="Renew IP address lease"/>
        <enum name="REBIND"          value="6"         info="Find DHCP6 server and rebind"/>
        <enum name="REPLY"           value="7"         info="Reply to or acknowledge client message"/>
        <enum name="RELEASE"         value="8"         info="Release leased IP address"/>
        <enum name="DECLINE"         value="9"         info="Reject offered IP address"/>
        <enum name="RECONFIG"        value="10"        info="Reconfigure the client"/>
        <enum name="INFO_REQUEST"    value="11"        info="Request configuration, no IP assignment"/>
        <enum name="RELAY_FORWARD"   value="12"        info="Relay forward message to server"/>
        <enum name="RELAY_REPLY"     value="13"        info="Relay reply message to relay agent"/>
      </member>
    </typedef>

    <!-- DHCPv6 Status code -->
    <typedef name="DHCP6_Status" size="1" info="DHCPv6 status code">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Success"         value="0"         info="Success"/>
        <enum name="UnspecFail"      value="1"         info="Failure, reason unspecified"/>
        <enum name="NoAddrAvail"     value="2"         info="Server has no address available to assign"/>
        <enum name="NoBinding"       value="3"         info="Client record unavailable"/>
        <enum name="NotOnLink"       value="4"         info="Address prefix not appropriate for the link"/>
        <enum name="UseMulticast"    value="5"         info="Force using multicast all_dhcp_agents address"/>
      </member>
    </typedef>

    <!-- DHCPv6 Mode -->
    <typedef name="DHCP6_Mode" size="1" info="DHCPv6 mode of operation">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Stateless"       value="0"         info="Stateless DHCPv6 mode"/>
        <enum name="Stateful"        value="1"         info="Stateful DHCPv6 mode"/>
      </member>
    </typedef>

    <!-- DHCPv6 IANA structure -->
    <typedef name="DHCP6_IANA" size="32" info="DHCPv6 IANA structure">
      <member name="T1"            type="uint32_t"   offset="0"   info="T1 Renew timeout"/>
      <member name="T2"            type="uint32_t"   offset="4"   info="T2 Rebind timeout"/>
      <member name="Addr"          type="uint8_t"    offset="8"   info="IPv6 address"/>
      <member name="PrefTime"      type="uint32_t"   offset="24"  info="Address preferred lifetime"/>
      <member name="ValidTime"     type="uint32_t"   offset="28"  info="Address valid lifetime"/>
    </typedef>

    <!-- DHCP6 DNS Server address structure -->
    <typedef name="DHCP6_DNS" size="36" info="DHCPv6 DNS server addresses">
      <member name="netif"         type="uint16_t"   offset="0"   info="Network interface identifier"/>
      <member name="PriDNS"        type="uint8_t"    offset="4"   info="Primary DNS server IPv6 address"/>
      <member name="SecDNS"        type="uint8_t"    offset="20"  info="Secondary DNS server IPv6 address"/>
    </typedef>

    <!-- DHCPv6 Options -->
    <typedef name="DHCP6_Opt" size="1" info="DHCPv6 options">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="None"            value="0"/>
        <enum name="Vclass"          value="1"/>
      </member>
    </typedef>

    <!-- NDP prefix option structure -->
    <typedef name="NDP_Prefix" size="32" endian="b" info="NDP prefix option structure">
      <member name="Type"          type="uint8_t"    offset="0"   info="Option type: 3"/>
      <member name="OptLen"        type="uint8_t"    offset="1"   info="Option length: 4"/>
      <member name="PrefLen"       type="uint8_t"    offset="2"   info="Prefix length"/>
      <member name="Flags"         type="uint8_t"    offset="3"   info="Prefix flags"/>
      <member name="ValTime"       type="uint32_t"   offset="4"   info="Valid lifetime"/>
      <member name="PrefTime"      type="uint32_t"   offset="8"   info="Preferred lifetime"/>
      <member name="Reserved"      type="uint32_t"   offset="12"  info="Reserved fiels"/>
      <member name="Addr"          type="uint8_t"    offset="16"  info="IPv6 address prefix"/>
    </typedef>

    <!-- NDP Cache entry structure -->
    <typedef name="NDP_Cache" size="26" info="NDP cache entry type">
      <member name="NetIf"         type="uint16_t"   offset="0"   info="Interface Identifier"/>
      <member name="Num"           type="uint8_t"    offset="2"   info="Entry number (index)"/>
      <member name="Type"          type="uint8_t"    offset="3"   info="Entry type">
        <enum name="Host"            value="0x01"      info="Host entry type"/>
        <enum name="Router"          value="0x02"      info="Router entry type"/>
      </member>
      <member name="IpAddr"        type="uint8_t"    offset="4"   info="IPv6 Address"/>
      <member name="MacAddr"       type="uint8_t"    offset="20"  info="MAC Address"/>
    </typedef>

    <!-- UDP Header structure -->
    <typedef name="UDP_Header" size="8" endian="b" info="UDP header structure">
      <member name="SrcPort"       type="uint16_t"   offset="0"   info="Source port"/>
      <member name="DstPort"       type="uint16_t"   offset="2"   info="Destination port"/>
      <member name="Len"           type="uint16_t"   offset="4"   info="Length of UDP frame"/>
      <member name="Chksum"        type="uint16_t"   offset="6"   info="UDP frame checksum"/>
    </typedef>

    <!-- UDP Socket state -->
    <typedef name="UDP_State" size="1" info="UDP state">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="FREE"          value="0"         info="Entry is free and unused"/>
        <enum name="CLOSED"        value="1"         info="Entry allocated, socket still closed"/>
        <enum name="OPENED"        value="2"         info="Socket opened for communication"/>
      </member>
    </typedef>

    <!-- UDP Socket options -->
    <typedef name="UDP_Opt" size="1" info="UDP socket options">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="TOS"             value="0"         info="IPv4 Type of Service"/>
        <enum name="TTL"             value="1"         info="IPv4 Multi-cast Time to Live"/>
        <enum name="TrafficClass"    value="2"         info="IPv6 Traffic Class"/>
        <enum name="HopLimit"        value="3"         info="IPv6 Multi-cast Hop limit"/>
        <enum name="Interface"       value="4"         info="Broadcast Network interface"/>
        <enum name="Checksum"        value="5"         info="Checksum Options"/>
      </member>
    </typedef>

    <!-- TCP Header structure -->
    <typedef name="TCP_Header" size="20" endian="b" info="TCP header structure">
      <member name="SrcPort"       type="uint16_t"   offset="0"   info="Source port"/>
      <member name="DstPort"       type="uint16_t"   offset="2"   info="Destination port"/>
      <member name="SeqNr"         type="uint32_t"   offset="4"   info="Frame Sequence Number"/>
      <member name="AckNr"         type="uint32_t"   offset="8"   info="Frame Acknowledgment Number"/>
      <member name="Hlen"          type="uint8_t"    offset="12"  info="Header Length of frame"/>
      <member name="Flags"         type="uint8_t"    offset="13"  info="TCP Frame Flags">
        <!-- Incomplete list, only regular combination of flags is given -->
        <enum name="FIN"             value="0x01"      info="FIN flag"/>
        <enum name="SYN"             value="0x02"      info="SYN flag"/>
        <enum name="RST"             value="0x04"      info="RST flag"/>
        <enum name="PSH"             value="0x08"      info="PSH flag"/>
        <enum name="ACK"             value="0x10"      info="ACK flag"/>
        <enum name="FIN+ACK"         value="0x11"      info="FIN+ACK flags"/>
        <enum name="SYN+ACK"         value="0x12"      info="SYN+ACK flags"/>
        <enum name="RST+ACK"         value="0x14"      info="RST+ACK flags"/>
        <enum name="PSH+ACK"         value="0x18"      info="PSH+ACK flags"/>
      </member>
      <member name="Window"        type="uint16_t"   offset="14"  info="Size of Window"/>
      <member name="Chksum"        type="uint16_t"   offset="16"  info="TCP frame checksum"/>
      <member name="UrgentPtr"     type="uint16_t"   offset="18"  info="Urgent pointer"/>
    </typedef>

    <!-- TCP Socket state -->
    <typedef name="TCP_State" size="1" info="TCP state">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="UNUSED"          value="0"         info="Entry is free and unused"/>
        <enum name="CLOSED"          value="1"         info="Entry allocated, socket still closed"/>
        <enum name="LISTEN"          value="2"         info="Socket waiting for incoming connection"/>
        <enum name="SYN_RECEIVED"    value="3"         info="SYN frame received"/>
        <enum name="SYN_SENT"        value="4"         info="SYN frame sent to establish a connection"/>
        <enum name="FIN_WAIT_1"      value="5"         info="Close started FIN frame was sent"/>
        <enum name="FIN_WAIT_2"      value="6"         info="Our FIN ACK-ed, waiting for remote FIN"/>
        <enum name="CLOSING"         value="7"         info="Received FIN independently of our FIN"/>
        <enum name="LAST_ACK"        value="8"         info="Waiting for last ACK for our FIN"/>
        <enum name="TIME_WAIT"       value="9"         info="Timed waiting for 2MSL"/>
        <enum name="ESTABLISHED"     value="10"        info="TCP Connection established"/>
      </member>
    </typedef>

    <!-- TCP Callback event -->
    <typedef name="TCP_Event" size="1" info="TCP callback event">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Connect"         value="0"         info="Connect request received event"/>
        <enum name="Established"     value="1"         info="Connection established event"/>
        <enum name="Closed"          value="2"         info="Connection was properly closed"/>
        <enum name="Aborted"         value="3"         info="Connection is for some reason aborted"/>
        <enum name="ACK"             value="4"         info="Previously send data acknowledged"/>
        <enum name="Data"            value="5"         info="Data received event"/>
      </member>
    </typedef>

    <!-- TCP Socket options -->
    <typedef name="TCP_Opt" size="1" info="TCP socket options">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="TOS"             value="0"         info="IPv4 Type of Service"/>
        <enum name="TrafficClass"    value="1"         info="IPv6 Traffic Class"/>
        <enum name="Timeout"         value="2"         info="TCP Idle Timeout"/>
        <enum name="KeepAlive"       value="3"         info="TCP Keep Alive"/>
        <enum name="FlowControl"     value="4"         info="TCP Flow Control"/>
        <enum name="DelayedACK"      value="5"         info="TCP Delayed Acknowledgment"/>
      </member>
    </typedef>

    <!-- BSD Socket type -->
    <typedef name="BSD_Type" size="1" info="BSD socket type">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="SOCK_STREAM"     value="1"         info="Stream socket type (TCP)"/>
        <enum name="SOCK_DGRAM"      value="2"         info="Datagram socket type (UDP)"/>
      </member>
    </typedef>

    <!-- BSD Option level -->
    <typedef name="BSD_Level" size="1" info="BSD option level">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="SOL_SOCKET"      value="1"         info="Socket Level"/>
        <enum name="IPPROTO_IP"      value="2"         info="IPv4 Level"/>
        <enum name="IPPROTO_IPV6"    value="3"         info="IPv6 Level"/>
      </member>
    </typedef>

    <!-- BSD Option name -->
    <typedef name="BSD_Optname" size="1" info="BSD option name">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="SO_KEEPALIVE"        value="0x11"  info="Keep Alive"/>
        <enum name="SO_RCVTIMEO"         value="0x12"  info="Receive timeout"/>
        <enum name="SO_SNDTIMEO"         value="0x13"  info="Send timeout"/>
        <enum name="SO_TYPE"             value="0x14"  info="Socket Type"/>
        <enum name="SO_BINDTODEVICE"     value="0x15"  info="Bind to network interface"/>
        <enum name="IP_TOS"              value="0x21"  info="Type of Service"/>
        <enum name="IP_TTL"              value="0x22"  info="Time to Live"/>
        <enum name="IP_RECVDSTADDR"      value="0x23"  info="Receive destination IPv4 address"/>
        <enum name="IPV6_TCLASS"         value="0x31"  info="Traffic Class"/>
        <enum name="IPV6_MULTICAST_HOPS" value="0x32"  info="Multi-cast Hop limit"/>
        <enum name="IPV6_RECVDSTADDR"    value="0x33"  info="Receive destination IPv6 address"/>
        <enum name="IPV6_V6ONLY"         value="0x34"  info="Restrict to IPv6 communication only"/>
      </member>
    </typedef>

    <!-- HTTP drive -->
    <typedef name="HTTP_Drive" size="1" info="HTTP server File System drive">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="ROM image"       value="0"         info="ROM image read-only drive"/>
        <enum name="External drive"  value="1"         info="External read-write drive"/>
      </member>
    </typedef>

    <!-- HTTP method -->
    <typedef name="HTTP_Method" size="1" info="HTTP request method">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="GET"             value="1"         info="GET request method"/>
        <enum name="POST"            value="2"         info="POST request method"/>
        <enum name="HEAD"            value="3"         info="HEAD request method"/>
        <enum name="PUT"             value="4"         info="PUT request method"/>
        <enum name="DELETE"          value="5"         info="DELETE request method"/>
        <enum name="CONNECT"         value="6"         info="CONNECT request method"/>
        <enum name="OPTIONS"         value="7"         info="OPTIONS request method"/>
        <enum name="TRACE"           value="8"         info="TRACE request method"/>
      </member>
    </typedef>

    <!-- FTP Data mode -->
    <typedef name="FTP_DataMode" size="1" info="FTP transfer data mode">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Binary"          value="0"         info="Binary mode for executable images"/>
        <enum name="Ascii"           value="1"         info="Ascii mode for text files"/>
      </member>
    </typedef>

    <!-- FTP Client mode -->
    <typedef name="FTPc_Mode" size="1" info="FTP client mode">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Active"          value="0"         info="Active mode, accepts inbound data connections"/>
        <enum name="Passive"         value="1"         info="Passive mode, starts outbound data connections"/>
      </member>
    </typedef>

    <!-- FTP Client command -->
    <typedef name="FTPc_Cmd" size="1" info="FTP client command">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="PUT"             value="0"         info="Puts a file on FTP server"/>
        <enum name="GET"             value="1"         info="Retrieves a file from FTP server"/>
        <enum name="APPEND"          value="2"         info="Append file on FTP server (with create)"/>
        <enum name="DELETE"          value="3"         info="Deletes a file on FTP server"/>
        <enum name="LIST"            value="4"         info="Lists files stored on FTP server"/>
        <enum name="RENAME"          value="5"         info="Renames a file on FTP server"/>
        <enum name="MKDIR"           value="6"         info="Makes a directory on FTP server"/>
        <enum name="RMDIR"           value="7"         info="Removes an empty directory on FTP server"/>
        <enum name="NLIST"           value="8"         info="Lists file names only (short format)"/>
      </member>
    </typedef>

    <!-- FTP Client event -->
    <typedef name="FTPc_Event" size="1" info="FTP client callback event">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Success"          value="0"        info="File operation successful"/>
        <enum name="Timeout"          value="1"        info="Timeout on file operation"/>
        <enum name="LoginFailed"      value="2"        info="Login error, username/password invalid"/>
        <enum name="AccessDenied"     value="3"        info="File access not allowed"/>
        <enum name="FileNotFound"     value="4"        info="File not found"/>
        <enum name="InvalidDirectory" value="5"        info="Working directory path not found"/>
        <enum name="LocalFileError"   value="6"        info="Local file read/write error"/>
        <enum name="Error"            value="7"        info="Generic FTP client error"/>
      </member>
    </typedef>

    <!-- TFTP Operation code -->
    <typedef name="TFTP_Opcode" size="2" info="TFTP operation code">
      <member name="id"            type="uint16_t"   offset="0">
        <enum name="RRQ"             value="1"         info="Read Request"/>
        <enum name="WRQ"             value="2"         info="Write Request"/>
        <enum name="DATA"            value="3"         info="Data"/>
        <enum name="ACK"             value="4"         info="Acknowledgment"/>
        <enum name="ERR"             value="5"         info="Error"/>
        <enum name="OACK"            value="6"         info="Option Acknowledgment"/>
      </member>
    </typedef>

    <!-- TFTP Error code -->
    <typedef name="TFTP_Error" size="2" info="TFTP error code">
      <member name="id"            type="uint16_t"   offset="0">
        <enum name="ERR_NOTDEF"      value="0"         info="Not Defined Error"/>
        <enum name="ERR_NOTFOUND"    value="1"         info="File Not Found Error"/>
        <enum name="ERR_NOACCESS"    value="2"         info="Access Violation Error"/>
        <enum name="ERR_DISKFULL"    value="3"         info="Disk Full Error"/>
        <enum name="ERR_ILLOPCOD"    value="4"         info="Illegal Opcode (not supported)"/>
        <enum name="ERR_UNKNTID"     value="5"         info="Unknown TID Error"/>
        <enum name="ERR_FILEXIST"    value="6"         info="File Already Exists Error"/>
        <enum name="ERR_NOUSER"      value="7"         info="No such user Error"/>
      </member>
    </typedef>

    <!-- TFTP Client state -->
    <typedef name="TFTPc_State" size="1" info="TFTP client state">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="IDLE"            value="0"         info="Client is idle"/>
        <enum name="PUT"             value="1"         info="Put file executing"/>
        <enum name="GET"             value="2"         info="Get file executing"/>
        <enum name="STOP"            value="3"         info="Stop the client"/>
      </member>
    </typedef>

    <!-- SMTP Client Authentication mode -->
    <typedef name="SMTP_Auth" size="1" info="Authentication mode of SMTP client">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="NONE"            value="0"         info="Authentication not required"/>
        <enum name="PLAIN"           value="1"         info="Plain authentication type"/>
        <enum name="LOGIN"           value="2"         info="Login authentication type"/>
        <enum name="DIGEST-MD5"      value="3"         info="Digest-MD5 authentication type"/>
        <enum name="CRAM-MD5"        value="4"         info="Cram-MD5 authentication type"/>
        <enum name="NTLM"            value="5"         info="NTLM authentication type"/>
        <enum name="UNKNOWN"         value="6"         info="Unknown authentication type"/>
      </member>
    </typedef>

    <!-- SMTP Client event -->
    <typedef name="SMTPc_Event" size="1" info="SMTP client callback event">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Success"          value="0"        info="Email successfully sent"/>
        <enum name="Timeout"          value="1"        info="Timeout on sending email"/>
        <enum name="LoginFailed"      value="2"        info="Login failed, username/password invalid"/>
        <enum name="Error"            value="3"        info="Generoc SMTP client error"/>
      </member>
    </typedef>

    <!-- DNS active server -->
    <typedef name="DNS_Active" size="1" info="Active DNS server">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Primary"         value="0"         info="Primary DNS server"/>
        <enum name="Secondary"       value="1"         info="Secondary DNS server"/>
      </member>
    </typedef>

    <!-- DNS RR type -->
    <typedef name="DNS_RR" size="2" info="DNS resource record type">
      <member name="type"          type="uint16_t"   offset="0">
        <enum name="TYPE_A"          value="1"         info="Host address (IPv4)"/>
        <enum name="TYPE_NS"         value="2"         info="Authoritative name server"/>
        <enum name="TYPE_CNAME"      value="5"         info="Canonical name for an alias"/>
        <enum name="TYPE_SOA"        value="6"         info="Start of a zone of authority"/>
        <enum name="TYPE_PTR"        value="12"        info="Domain name pointer"/>
        <enum name="TYPE_MX"         value="15"        info="Mail exchange"/>
        <enum name="TYPE_AAAA"       value="28"        info="IPv6 Address"/>
      </member>
    </typedef>

    <!-- DNS Header structure -->
    <typedef name="DNS_Header" size="12" endian="b" info="DNS header structure">
      <member name="TID"           type="uint16_t"   offset="0"   info="DNS Transaction identifier"/>
      <member name="Flags"         type="uint16_t"   offset="2"   info="DNS Frame Flags"/>
      <member name="QDCOUNT"       type="uint16_t"   offset="4"   info="Question Count"/>
      <member name="ANCOUNT"       type="uint16_t"   offset="6"   info="Answer Resource Record Count"/>
      <member name="NSCOUNT"       type="uint16_t"   offset="7"   info="Authority Resource Record Count"/>
      <member name="ARCOUNT"       type="uint16_t"   offset="10"  info="Additional Resource Record Count"/>
    </typedef>

    <!-- SNMPv1 Generic-trap type -->
    <typedef name="SNMP_GenTrap" size="1" info="SNMPv1 generic trap type">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="coldStart"              value="0"  info="ColdStart trap"/>
        <enum name="warmStart"              value="1"  info="WarmStart trap"/>
        <enum name="linkDown"               value="2"  info="LinkDown trap"/>
        <enum name="linkUp"                 value="3"  info="LinkUp trap"/>
        <enum name="authenticationFailure"  value="4"  info="AuthenticationFailure trap"/>
        <enum name="egpNeighborLoss"        value="5"  info="EgpNeighborLoss trap"/>
        <enum name="enterpriseSpecific"     value="6"  info="EnterpriseSpecific trap"/>
      </member>
    </typedef>

    <!-- SNMPv1 Error-status -->
    <typedef name="SNMP_Error" size="1" info="SNMPv1 error status">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="noError"         value="0"         info="No error status"/>
        <enum name="tooBig"          value="1"         info="Number too big"/>
        <enum name="noSuchName"      value="2"         info="No such name existing"/>
        <enum name="badValue"        value="3"         info="Bad value"/>
        <enum name="readOnly"        value="4"         info="Object read only"/>
        <enum name="genErr"          value="5"         info="Generic error"/>
      </member>
    </typedef>

    <!-- SNMPv1 PDU type -->
    <typedef name="SNMP_PDU" size="1" info="SNMPv1 protocol data unit (PDU) type">
      <member name="type"          type="uint8_t"    offset="0">
        <enum name="GET"             value="0xA0"      info="GetRequest PDU"/>
        <enum name="GETNEXT"         value="0xA1"      info="GetNextRequest PDU"/>
        <enum name="GETRESPONSE"     value="0xA2"      info="Response PDU"/>
        <enum name="SET"             value="0xA3"      info="SetRequest PDU"/>
        <enum name="TRAP"            value="0xA4"      info="Trap PDU"/>
      </member>
    </typedef>

    <!-- SNMPv1 Object type -->
    <typedef name="SNMP_Object" size="1" info="SNMPv1 object data type">
      <member name="type"          type="uint8_t"    offset="0">
        <enum name="INTEGER"         value="0x02"      info="Integer Data Type (signed integer)"/>
        <enum name="STRING"          value="0x04"      info="Octet-String Data Type"/>
        <enum name="NULL"            value="0x05"      info="Null Item Data Type"/>
        <enum name="OID"             value="0x06"      info="Object Identifier Data Type"/>
        <enum name="BSTRING"         value="0x07"      info="Byte-String Data Type"/>
        <enum name="SEQUENCE"        value="0x30"      info="Sequence Data Type"/>
        <enum name="IP"              value="0x40"      info="IP Address Data Type"/>
        <enum name="COUNTER"         value="0x41"      info="Counter Data Type (pos.integer)"/>
        <enum name="GAUGE"           value="0x42"      info="Gauge Data Type (pos.integer)"/>
        <enum name="TICKS"           value="0x43"      info="Time Ticks Data Type (pos.integer)"/>
        <enum name="OPAQUE"          value="0x44"      info="Opaque Data Type (ASN.1 encoded)"/>
      </member>
    </typedef>

    <!-- SNMPv1 Trap structure -->
    <typedef name="SNMP_Trap" size="8" info="SNMPv1 trap helper structure">
      <member name="nobj"          type="uint16_t"   offset="0"   info="Number of objects in a trap message"/>
      <member name="generic"       type="uint8_t"    offset="2"   info="Generic trap type">
        <enum name="coldStart"              value="0"  info="ColdStart trap"/>
        <enum name="warmStart"              value="1"  info="WarmStart trap"/>
        <enum name="linkDown"               value="2"  info="LinkDown trap"/>
        <enum name="linkUp"                 value="3"  info="LinkUp trap"/>
        <enum name="authenticationFailure"  value="4"  info="AuthenticationFailure trap"/>
        <enum name="egpNeighborLoss"        value="5"  info="EgpNeighborLoss trap"/>
        <enum name="enterpriseSpecific"     value="6"  info="EnterpriseSpecific trap"/>
      </member>
      <member name="specific"      type="uint8_t"    offset="3"   info="Specific trap type for generic enterpriseSpecific trap"/>
      <member name="addr"          type="uint8_t"    offset="4"   info="Trap server IPv4 address"/>
    </typedef>

    <!-- SNTP Operation mode -->
    <typedef name="SNTP_Mode" size="1" info="SNTP operation mode">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="Unicast"         value="0"         info="Unicast mode"/>
        <enum name="Bcast"           value="1"         info="Broadcast mode"/>
      </member>
    </typedef>

    <!-- SNTP State -->
    <typedef name="SNTP_State" size="1" info="SNTP client state">
      <member name="id"            type="uint8_t"    offset="0">
        <enum name="IDLE"            value="0"         info="Client is idle"/>
        <enum name="BUSY"            value="1"         info="Client is busy in unicast mode"/>
        <enum name="OPEN"            value="2"         info="Client in broadcast receiving mode"/>
      </member>
    </typedef>
  </typedefs>

  <objects>
    <object name="Network Component">
      <!-- Network library variant -->
      <var   name="debug"          type="int32_t"    value="__Symbol_exists(&quot;net_dbg_proc&quot;) || __Symbol_exists(&quot;net_evr_init&quot;)"/>
      <var   name="dual_stack"     type="int32_t"    value="__Symbol_exists(&quot;net_ip6_init&quot;)"/>
      <var   name="net_lib"        type="NetLib"     value="dual_stack"/>
      <read  name="net_ver"        type="NetVal"     symbol="net_lib_version"       const="1"/>

      <!-- ETH0 Interface Information -->
      <var   name="eth0_en"      type="int32_t"     value="__Symbol_exists(&quot;net_eth0_if_config&quot;)"/>
      <read  name="eth0"           type="IF_CFG"      symbol="net_eth0_if_config"   const="1" cond="eth0_en"/>
      <read  name="eth0_mac"       type="uint8_t"     offset="eth0.MacAddr"         size="6"  cond="eth0_en"/>
      <calc cond="eth0_en">      eth0_en += (eth0.localm ? 2 : 0) + (eth0.localm6 ? 4 : 0);  </calc>
      <read  name="eth0_lm"        type="LOCALM"      offset="eth0.localm"          cond="eth0_en &amp; 2"/>
      <read  name="eth0_lm6"       type="LOCALM6"     offset="eth0.localm6"         cond="eth0_en &amp; 4"/>
      <read  name="eth0_ctrl"      type="ETH_CTRL"    symbol="net_eth0_if_control"  cond="eth0_en"/>

      <!-- ETH1 Interface Information -->
      <var   name="eth1_en"      type="int32_t"     value="__Symbol_exists(&quot;net_eth1_if_config&quot;)"/>
      <read  name="eth1"           type="IF_CFG"      symbol="net_eth1_if_config"   const="1" cond="eth1_en"/>
      <read  name="eth1_mac"       type="uint8_t"     offset="eth1.MacAddr"         size="6"  cond="eth1_en"/>
      <calc cond="eth1_en">      eth1_en += (eth1.localm ? 2 : 0) + (eth1.localm6 ? 4 : 0);  </calc>
      <read  name="eth1_lm"        type="LOCALM"      offset="eth1.localm"          cond="eth1_en &amp; 2"/>
      <read  name="eth1_lm6"       type="LOCALM6"     offset="eth1.localm6"         cond="eth1_en &amp; 4"/>
      <read  name="eth1_ctrl"      type="ETH_CTRL"    symbol="net_eth1_if_control"  cond="eth1_en"/>

      <!-- WiFi0 Interface Information -->
      <var   name="wifi0_en"     type="int32_t"     value="__Symbol_exists(&quot;net_wifi0_if_config&quot;)"/>
      <read  name="wifi0"          type="IF_CFG"      symbol="net_wifi0_if_config"  const="1" cond="wifi0_en"/>
      <read  name="wifi0_mac"      type="uint8_t"     offset="wifi0.MacAddr"        size="6"  cond="wifi0_en"/>
      <calc cond="wifi0_en">     wifi0_en += (wifi0.localm ? 2 : 0) + (wifi0.localm6 ? 4 : 0);  </calc>
      <read  name="wifi0_lm"       type="LOCALM"      offset="wifi0.localm"         cond="wifi0_en &amp; 2"/>
      <read  name="wifi0_lm6"      type="LOCALM6"     offset="wifi0.localm6"        cond="wifi0_en &amp; 4"/>
      <read  name="wifi0_ctrl"     type="WIFI_CTRL"   symbol="net_wifi0_if_control" cond="wifi0_en"/>

      <!-- WiFi1 Interface Information -->
      <var   name="wifi1_en"     type="int32_t"     value="__Symbol_exists(&quot;net_wifi1_if_config&quot;)"/>
      <read  name="wifi1"          type="IF_CFG"      symbol="net_wifi1_if_config"  const="1" cond="wifi1_en"/>
      <read  name="wifi1_mac"      type="uint8_t"     offset="wifi1.MacAddr"        size="6"  cond="wifi1_en"/>
      <calc cond="wifi1_en">     wifi1_en += (wifi1.localm ? 2 : 0) + (wifi1.localm6 ? 4 : 0);  </calc>
      <read  name="wifi1_lm"       type="LOCALM"      offset="wifi1.localm"         cond="wifi1_en &amp; 2"/>
      <read  name="wifi1_lm6"      type="LOCALM6"     offset="wifi1.localm6"        cond="wifi1_en &amp; 4"/>
      <read  name="wifi1_ctrl"     type="WIFI_CTRL"   symbol="net_wifi1_if_control" cond="wifi1_en"/>

      <!-- PPP Interface Information -->
      <var   name="ppp0_en"      type="int32_t"     value="__Symbol_exists(&quot;net_ppp0_if_config&quot;)"/>
      <read  name="ppp0"           type="IF_CFG"      symbol="net_ppp0_if_config"   const="1" cond="ppp0_en"/>
      <read  name="ppp0_lm"        type="LOCALM"      offset="ppp0.localm"          cond="ppp0_en"/>
      <read  name="ppp0_ctrl"      type="PPP_CTRL"    symbol="net_ppp0_if_control"  cond="ppp0_en"/>

      <!-- SLIP Interface Information -->
      <var   name="slip0_en"     type="int32_t"     value="__Symbol_exists(&quot;net_slip0_if_config&quot;)"/>
      <read  name="slip0"          type="IF_CFG"      symbol="net_slip0_if_config"  const="1" cond="slip0_en"/>
      <read  name="slip0_lm"       type="LOCALM"      offset="slip0.localm"         cond="slip0_en"/>
      <read  name="slip0_ctrl"     type="SLIP_CTRL"   symbol="net_slip0_if_control" cond="slip0_en"/>

      <!-- UDP Runtime Information -->
      <var   name="udp_en"       type="int32_t"     value="__Symbol_exists(&quot;net_udp_config&quot;)"/>
      <read  name="ucfg"           type="UDP_CFG"     symbol="net_udp_config" const="1"     cond="udp_en"/>
      <var   name="udp_num"        type="uint32_t"    value="udp_en ? ucfg.NumSocks : 0"    info="Number of available sockets"/>
      <var   name="udp_used"       type="uint32_t"    value="0"                             info="Number of used sockets"/>
      <readlist name="UDP"         type="*UDP_INFO"   offset="ucfg.Scb" based="0" init="1"  count="udp_num"   cond="udp_en"      info="UDP CB array"/>

      <!-- TCP Runtime Information -->
      <var   name="tcp_en"       type="int32_t"     value="__Symbol_exists(&quot;net_tcp_config&quot;) * (dual_stack ? 2 : 1)"/>
      <read  name="tcfg"           type="TCP_CFG"     symbol="net_tcp_config" const="1"     cond="tcp_en"/>
      <var   name="tcp_num"        type="uint32_t"    value="tcp_en ? tcfg.NumSocks : 0"    info="Number of available sockets"/>
      <var   name="tcp_used"       type="uint32_t"    value="0"                             info="Number of used sockets"/>
      <readlist name="TCP"         type="*TCP_INFO"   offset="tcfg.Scb" based="0" init="1"  count="tcp_num"  cond="tcp_en &amp; 2" info="TCP CB array"/>
      <readlist name="TCP4"        type="*TCP_INFO4"  offset="tcfg.Scb" based="0" init="1"  count="tcp_num"  cond="tcp_en &amp; 1" info="TCP CB array"/>

      <!-- Helper variables -->
      <var   name="i"              type="int32_t"     value="0"/>

      <!-- Calc Number of used UDP sockets -->
      <list name="i" start="0" limit="udp_num" cond="udp_en">
        <calc cond="UDP[i].State">
          udp_used++;
        </calc>
      </list>

      <!-- Calc Number of used TCP sockets -->
      <list name="i" start="0" limit="tcp_num" cond="tcp_en &amp; 2">
        <calc cond="TCP[i].State">
          tcp_used++;
        </calc>
      </list>
      <list name="i" start="0" limit="tcp_num" cond="tcp_en &amp; 1">
        <calc cond="TCP4[i].State">
          tcp_used++;
        </calc>
      </list>

      <out name="Network">
        <item>
          <print property="Release Library"      value="%E[net_lib], ver: %d[net_ver.b3].%d[net_ver.b2].%d[net_ver.b0]" cond="!debug"/>
          <print property="Debug Library"        value="%E[net_lib], ver: %d[net_ver.b3].%d[net_ver.b2].%d[net_ver.b0]" cond="debug"/>
        </item>
        <item property="Interfaces"              value="Available: %d[__size_of(&quot;net_if_list_all&quot;)-1]">

          <!-- ETH0 Interface -->
          <item property="%E[eth0.Id]"           value="%E[eth0_ctrl.LinkState], Rx: %u[eth0_ctrl.RxCount], Tx: %u[eth0_ctrl.TxCount]" cond="eth0_en">
            <item property="MAC address"           value="%M[eth0_mac]"/>
            <item>
              <print property="VLAN"               value="Id: %d[eth0_ctrl.VlanId]"     cond="eth0_ctrl.VlanId"/>
              <print property="VLAN"               value="Disabled"                     cond="!eth0_ctrl.VlanId"/>
            </item>
            <!-- IPv4 local machine info -->
            <item property="IPv4 settings"         value="Address: %I[eth0_lm.IpAddr]"  cond="eth0.localm">
              <item property="IP address"            value="%I[eth0_lm.IpAddr]"/>
              <item property="Network mask"          value="%I[eth0_lm.NetMask]"/>
              <item property="Default gateway"       value="%I[eth0_lm.DefGW]"/>
              <item property="Primary DNS server"    value="%I[eth0_lm.PriDNS]"/>
              <item property="Secondary DNS server"  value="%I[eth0_lm.SecDNS]"/>
              <item>
                <print property="MTU size"           value="%d[eth0_lm.Mtu]"            cond="eth0_lm.Mtu"/>
                <print property="IP Fragmentation"   value="Disabled"                   cond="!eth0_lm.Mtu"/>
              </item>
            </item>
            <!-- IPv6 local machine info -->
            <item                                                                       cond="eth0.localm6">
              <print property="IPv6 settings"      value="Address: %J[eth0_lm6.IpAddr]"   cond="__CalcMemUsed(eth0_lm6.IpAddr, 16, 0, 0)"/>
              <print property="IPv6 settings"      value="Address: %J[eth0_lm6.TempAddr]" cond="!__CalcMemUsed(eth0_lm6.IpAddr, 16, 0, 0)"/>
              <item property="IP address"            value="%J[eth0_lm6.IpAddr]"/>
              <item property="Temporary address"     value="%J[eth0_lm6.TempAddr]"/>
              <item property="Link-local address"    value="%J[eth0_lm6.LLAddr]"/>
              <item property="Default gateway"       value="%J[eth0_lm6.DefGW]"/>
              <item property="Primary DNS server"    value="%J[eth0_lm6.PriDNS]"/>
              <item property="Secondary DNS server"  value="%J[eth0_lm6.SecDNS]"/>
              <item>
                <print property="MTU size"         value="%d[eth0_lm6.Mtu]"             cond="eth0_lm6.Mtu"/>
                <print property="IP Fragmentation" value="Disabled"                     cond="!eth0_lm6.Mtu"/>
              </item>
            </item>
          </item>

          <!-- ETH1 Interface -->
          <item property="%E[eth1.Id]"           value="%E[eth1_ctrl.LinkState], Rx: %u[eth1_ctrl.RxCount], Tx: %u[eth1_ctrl.TxCount]" cond="eth1_en">
            <item property="MAC address"           value="%M[eth1_mac]"/>
            <item>
              <print property="VLAN"               value="Id: %d[eth1_ctrl.VlanId]"     cond="eth1_ctrl.VlanId"/>
              <print property="VLAN"               value="Disabled"                     cond="!eth1_ctrl.VlanId"/>
            </item>
            <!-- IPv4 local machine info -->
            <item property="IPv4 settings"         value="Address: %I[eth1_lm.IpAddr]"  cond="eth1.localm">
              <item property="IP address"            value="%I[eth1_lm.IpAddr]"/>
              <item property="Network mask"          value="%I[eth1_lm.NetMask]"/>
              <item property="Default gateway"       value="%I[eth1_lm.DefGW]"/>
              <item property="Primary DNS server"    value="%I[eth1_lm.PriDNS]"/>
              <item property="Secondary DNS server"  value="%I[eth1_lm.SecDNS]"/>
              <item>
                <print property="MTU size"           value="%d[eth1_lm.Mtu]"            cond="eth1_lm.Mtu"/>
                <print property="IP Fragmentation"   value="Disabled"                   cond="!eth1_lm.Mtu"/>
              </item>
            </item>
            <!-- IPv6 local machine info -->
            <item                                                                       cond="eth1.localm6">
              <print property="IPv6 settings"      value="Address: %J[eth1_lm6.IpAddr]"   cond="__CalcMemUsed(eth1_lm6.IpAddr, 16, 0, 0)"/>
              <print property="IPv6 settings"      value="Address: %J[eth1_lm6.TempAddr]" cond="!__CalcMemUsed(eth1_lm6.IpAddr, 16, 0, 0)"/>
              <item property="IP address"            value="%J[eth1_lm6.IpAddr]"/>
              <item property="Temporary address"     value="%J[eth1_lm6.TempAddr]"/>
              <item property="Link-local address"    value="%J[eth1_lm6.LLAddr]"/>
              <item property="Default gateway"       value="%J[eth1_lm6.DefGW]"/>
              <item property="Primary DNS server"    value="%J[eth1_lm6.PriDNS]"/>
              <item property="Secondary DNS server"  value="%J[eth1_lm6.SecDNS]"/>
              <item>
                <print property="MTU size"         value="%d[eth1_lm6.Mtu]"             cond="eth1_lm6.Mtu"/>
                <print property="IP Fragmentation" value="Disabled"                     cond="!eth1_lm6.Mtu"/>
              </item>
            </item>
          </item>

          <!-- WIFI0 Interface -->
          <item property="%E[wifi0.Id]"          value="%E[wifi0_ctrl.LinkState], Rx: %u[wifi0_ctrl.RxCount], Tx: %u[wifi0_ctrl.TxCount]" cond="wifi0_en">
            <item property="MAC address"           value="%M[wifi0_mac]"/>
            <!-- IPv4 local machine info -->
            <item property="IPv4 settings"         value="Address: %I[wifi0_lm.IpAddr]" cond="wifi0.localm">
              <item property="IP address"            value="%I[wifi0_lm.IpAddr]"/>
              <item property="Network mask"          value="%I[wifi0_lm.NetMask]"/>
              <item property="Default gateway"       value="%I[wifi0_lm.DefGW]"/>
              <item property="Primary DNS server"    value="%I[wifi0_lm.PriDNS]"/>
              <item property="Secondary DNS server"  value="%I[wifi0_lm.SecDNS]"/>
              <item>
                <print property="MTU size"           value="%d[wifi0_lm.Mtu]"           cond="wifi0_lm.Mtu"/>
                <print property="IP Fragmentation"   value="Disabled"                   cond="!wifi0_lm.Mtu"/>
              </item>
            </item>
            <!-- IPv6 local machine info -->
            <item                                                                       cond="wifi0.localm6">
              <print property="IPv6 settings"      value="Address: %J[wifi0_lm6.IpAddr]"   cond="__CalcMemUsed(wifi0_lm6.IpAddr, 16, 0, 0)"/>
              <print property="IPv6 settings"      value="Address: %J[wifi0_lm6.TempAddr]" cond="!__CalcMemUsed(wifi0_lm6.IpAddr, 16, 0, 0)"/>
              <item property="IP address"            value="%J[wifi0_lm6.IpAddr]"/>
              <item property="Temporary address"     value="%J[wifi0_lm6.TempAddr]"/>
              <item property="Link-local address"    value="%J[wifi0_lm6.LLAddr]"/>
              <item property="Default gateway"       value="%J[wifi0_lm6.DefGW]"/>
              <item property="Primary DNS server"    value="%J[wifi0_lm6.PriDNS]"/>
              <item property="Secondary DNS server"  value="%J[wifi0_lm6.SecDNS]"/>
              <item>
                <print property="MTU size"         value="%d[wifi0_lm6.Mtu]"            cond="wifi0_lm6.Mtu"/>
                <print property="IP Fragmentation" value="Disabled"                     cond="!wifi0_lm6.Mtu"/>
              </item>
            </item>
          </item>

          <!-- WIFI1 Interface -->
          <item  property="%E[wifi1.Id]"         value="%E[wifi1_ctrl.LinkState], Rx: %u[wifi1_ctrl.RxCount], Tx: %u[wifi1_ctrl.TxCount]" cond="wifi1_en">
            <item property="MAC address"           value="%M[wifi1_mac]"/>
            <!-- IPv4 local machine info -->
            <item property="IPv4 settings"         value="Address: %I[wifi1_lm.IpAddr]" cond="wifi1.localm">
              <item property="IP address"            value="%I[wifi1_lm.IpAddr]"/>
              <item property="Network mask"          value="%I[wifi1_lm.NetMask]"/>
              <item property="Default gateway"       value="%I[wifi1_lm.DefGW]"/>
              <item property="Primary DNS server"    value="%I[wifi1_lm.PriDNS]"/>
              <item property="Secondary DNS server"  value="%I[wifi1_lm.SecDNS]"/>
              <item>
                <print property="MTU size"           value="%d[wifi1_lm.Mtu]"           cond="wifi1_lm.Mtu"/>
                <print property="IP Fragmentation"   value="Disabled"                   cond="!wifi1_lm.Mtu"/>
              </item>
            </item>
            <!-- IPv6 local machine info -->
            <item                                                                       cond="wifi1.localm6">
              <print property="IPv6 settings"      value="Address: %J[wifi1_lm6.IpAddr]"   cond="__CalcMemUsed(wifi1_lm6.IpAddr, 16, 0, 0)"/>
              <print property="IPv6 settings"      value="Address: %J[wifi1_lm6.TempAddr]" cond="!__CalcMemUsed(wifi1_lm6.IpAddr, 16, 0, 0)"/>
              <item property="IP address"            value="%J[wifi1_lm6.IpAddr]"/>
              <item property="Temporary address"     value="%J[wifi1_lm6.TempAddr]"/>
              <item property="Link-local address"    value="%J[wifi1_lm6.LLAddr]"/>
              <item property="Default gateway"       value="%J[wifi1_lm6.DefGW]"/>
              <item property="Primary DNS server"    value="%J[wifi1_lm6.PriDNS]"/>
              <item property="Secondary DNS server"  value="%J[wifi1_lm6.SecDNS]"/>
              <item>
                <print property="MTU size"         value="%d[wifi1_lm6.Mtu]"            cond="wifi1_lm6.Mtu"/>
                <print property="IP Fragmentation" value="Disabled"                     cond="!wifi1_lm6.Mtu"/>
              </item>
            </item>
          </item>

          <!-- PPP Interface -->
          <item property="%E[ppp0.Id]"           value="%E[ppp0_ctrl.Flags &amp; 0x1C0], Rx: %u[ppp0_ctrl.RxCount], Tx: %u[ppp0_ctrl.TxCount]" cond="ppp0_en">
            <!-- IPv4 local machine info -->
            <item property="IPv4 settings"         value="Address: %I[ppp0_lm.IpAddr]">
              <item property="IP address"            value="%I[ppp0_lm.IpAddr]"/>
              <item property="Primary DNS server"    value="%I[ppp0_lm.PriDNS]"/>
              <item property="Secondary DNS server"  value="%I[ppp0_lm.SecDNS]"/>
            </item>
          </item>

          <!-- SLIP Interface -->
          <item property="%E[slip0.Id]"          value="%E[slip0_ctrl.Flags &amp; 0x8], Rx: %u[slip0_ctrl.RxCount], Tx: %u[slip0_ctrl.TxCount]" cond="slip0_en">
            <!-- IPv4 local machine info -->
            <item property="IPv4 settings"         value="Address: %I[slip0_lm.IpAddr]">
              <item property="IP address"            value="%I[slip0_lm.IpAddr]"/>
              <item property="Primary DNS server"    value="%I[slip0_lm.PriDNS]"/>
              <item property="Secondary DNS server"  value="%I[slip0_lm.SecDNS]"/>
            </item>
          </item>
        </item>

        <item property="UDP sockets"             value="Used: %d[udp_used], Available: %d[udp_num]"  cond="udp_en">
          <list name="i" start="0" limit="udp_num">
            <item property="Socket %d[i+1]"      value="%E[UDP[i].State], Port: %d[UDP[i].LocPort]"  cond="UDP[i].State">
              <item property="Local Port"        value="%d[UDP[i].LocPort]"/>
              <item property="Callback Function" value="%S[UDP[i].cb_func]"/>
              <item property="Checksum Options"  value="%E[UDP[i].Flags &amp; 3]"/>
            </item>
          </list>
        </item>

        <item property="TCP sockets"             value="Used: %d[tcp_used], Available: %d[tcp_num]"  cond="tcp_en">
          <!-- Dual-stack TCP socket info (long structure) -->
          <list name="i" start="0" limit="tcp_num" cond="dual_stack">
            <item property="Socket %d[i+1]"      value="%E[TCP[i].State], Port: %d[TCP[i].LocPort]"  cond="TCP[i].State">
              <item property="Local Port"        value="%d[TCP[i].LocPort]"/>
              <item property="Callback Function" value="%S[TCP[i].cb_func]"/>
              <item property="Mode Options"      value="%E[TCP[i].Type &amp; 7]"/>
              <item cond="TCP[i].State &gt; TCP_INFO:State:Listen">
                <print property="Peer Address"   value="%I[TCP[i].Addr], Port: %d[TCP[i].Port]"      cond="TCP[i].AddrType == TCP_INFO:AddrType:IP4"/>
                <print property="Peer Address"   value="%J[TCP[i].Addr], Port: %d[TCP[i].Port]"      cond="TCP[i].AddrType == TCP_INFO:AddrType:IP6"/>
              </item>
              <item property="Timeout"           value="%d[TCP[i].Timer] sec"                        cond="TCP[i].State &gt; TCP_INFO:State:Listen"/>
            </item>
          </list>
          <!-- IPv4-Only TCP socket info (short structure) -->
          <list name="i" start="0" limit="tcp_num" cond="!dual_stack">
            <item property="Socket %d[i+1]"      value="%E[TCP4[i].State], Port: %d[TCP4[i].LocPort]" cond="TCP4[i].State">
              <item property="Local Port"        value="%d[TCP4[i].LocPort]"/>
              <item property="Callback Function" value="%S[TCP4[i].cb_func]"/>
              <item property="Mode Options"      value="%E[TCP4[i].Type &amp; 7]"                    cond="TCP4[i].State &gt; TCP_INFO4:State:Closed"/>
              <item property="Peer Address"      value="%I[TCP4[i].Addr], Port: %d[TCP4[i].Port]"    cond="TCP4[i].State &gt; TCP_INFO4:State:Listen"/>
              <item property="Timeout"           value="%d[TCP4[i].Timer] sec"                       cond="TCP4[i].State &gt; TCP_INFO4:State:Listen"/>
            </item>
          </list>
        </item>
      </out>
    </object>
  </objects>

  <events>
    <!-- Network groups -->
    <group name="Network">
      <group name="System Events">
        <component name="System Core"            brief="Net_SYS"    no="0xC0" prefix="EvrNetSYS_"   info="Network - System - Core"/>
        <component name="Memory Management"      brief="Net_MEM"    no="0xC1" prefix="EvrNetMEM_"   info="Network - System - Dynamic Memory Management"/>
        <component name="ETH Interface"          brief="Net_ETH"    no="0xC2" prefix="EvrNetETH_"   info="Network - System - Ethernet Interface"/>
        <component name="WiFi Interface"         brief="Net_WiFi"   no="0xDD" prefix="EvrNetWiFi_"  info="Network - System - Wireless Interface"/>
        <component name="PPP Interface"          brief="Net_PPP"    no="0xC3" prefix="EvrNetPPP_"   info="Network - System - Serial PPP Interface"/>
        <component name="SLIP Interface"         brief="Net_SLIP"   no="0xC4" prefix="EvrNetSLIP_"  info="Network - System - Serial SLIP Interface"/>
        <component name="Loopback Interface"     brief="Net_LOOP"   no="0xC5" prefix="EvrNetLOOP_"  info="Network - System - Local Loopback Interface"/>
      </group>

      <group name="IPv4 Core Events">
        <component name="IP4 Core"               brief="Net_IP4"    no="0xC6" prefix="EvrNetIP4_"   info="Network - IPv4 - Core"/>
        <component name="ICMP Control"           brief="Net_ICMP"   no="0xC7" prefix="EvrNetICMP_"  info="Network - IPv4 - Internet Control Message"/>
        <component name="IGMP Management"        brief="Net_IGMP"   no="0xC8" prefix="EvrNetIGMP_"  info="Network - IPv4 - Internet Group Message (multicast)"/>
        <component name="NBNS Client"            brief="Net_NBNS"   no="0xC9" prefix="EvrNetNBNS_"  info="Network - IPv4 - NetBIOS Name Service Client"/>
        <component name="DHCP Client"            brief="Net_DHCP"   no="0xCA" prefix="EvrNetDHCP_"  info="Network - IPv4 - Dynamic Host Configuration Client"/>
        <component name="ARP Address Resolution" brief="Net_ARP"    no="0xCB" prefix="EvrNetARP_"   info="Network - IPv4 - Ethernet Address Resolution"/>
      </group>

      <group name="IPv6 Core Events">
        <component name="IP6 Core"               brief="Net_IP6"    no="0xCC" prefix="EvrNetIP6_"   info="Network - IPv6 - Core"/>
        <component name="ICMP6 Control"          brief="Net_ICMP6"  no="0xCD" prefix="EvrNetICMP6_" info="Network - IPv6 - Internet Control Message"/>
        <component name="DHCP6 Client"           brief="Net_DHCP6"  no="0xCE" prefix="EvrNetDHCP6_" info="Network - IPv6 - Dynamic Host Configuration Client"/>
        <component name="NDP Neighbor Discovery" brief="Net_NDP"    no="0xCF" prefix="EvrNetNDP_"   info="Network - IPv6 - Neighbor Discovery"/>
        <component name="MLD Multicast Discovery" brief="Net_MLD"   no="0xDE" prefix="EvrNetMLD_"   info="Network - IPv6 - Multicast Listener Discovery"/>
      </group>

      <group name="Socket Events">
        <component name="UDP Socket"             brief="Net_UDP"    no="0xD0" prefix="EvrNetUDP_"   info="Network - Socket - UDP"/>
        <component name="TCP Socket"             brief="Net_TCP"    no="0xD1" prefix="EvrNetTCP_"   info="Network - Socket - TCP"/>
        <component name="BSD Socket"             brief="Net_BSD"    no="0xD2" prefix="EvrNetBSD_"   info="Network - Socket - BSD"/>
      </group>

      <group name="Service Events">
        <component name="HTTP Server"            brief="Net_HTTPs"  no="0xD3" prefix="EvrNetHTTPs_" info="Network - Service - Web Server"/>
        <component name="FTP Server"             brief="Net_FTPs"   no="0xD4" prefix="EvrNetFTPs_"  info="Network - Service - File Transfer Server"/>
        <component name="FTP Client"             brief="Net_FTPc"   no="0xD5" prefix="EvrNetFTPc_"  info="Network - Service - File Transfer Client"/>
        <component name="Telnet Server"          brief="Net_Teln"   no="0xD6" prefix="EvrNetTeln_"  info="Network - Service - Telnet Server"/>
        <component name="TFTP Server"            brief="Net_TFTPs"  no="0xD7" prefix="EvrNetTFTPs_" info="Network - Service - Trivial File Transfer Server"/>
        <component name="TFTP Client"            brief="Net_TFTPc"  no="0xD8" prefix="EvrNetTFTPc_" info="Network - Service - Trivial File Transfer Client"/>
        <component name="SMTP Client"            brief="Net_SMTP"   no="0xD9" prefix="EvrNetSMTP_"  info="Network - Service - Simple Mail Transfer Client"/>
        <component name="DNS Client"             brief="Net_DNS"    no="0xDA" prefix="EvrNetDNS_"   info="Network - Service - Domain Name Service Client"/>
        <component name="SNMP Agent"             brief="Net_SNMP"   no="0xDB" prefix="EvrNetSNMP_"  info="Network - Service - Simple Network Management Agent"/>
        <component name="SNTP Client"            brief="Net_SNTP"   no="0xDC" prefix="EvrNetSNTP_"  info="Network - Service - Simple Network Time Client"/>
      </group>
    </group>

    <!-- NetSYS: System Core events -->
    <event id=" 0 + 0xC000" level="Op"     property="InitSystem"                value="ver=%d[val1>>8].%d[val1&amp;0xFF].%d[val2]" info="Initialize network start"/>
    <event id=" 1 + 0xC000" level="Error"  property="ThreadCreateFailed"        value="thread=netCore_Thread" info="Failed to create network core thread"/>
    <event id=" 2 + 0xC000" level="Error"  property="TimerCreateFailed"         value="timer=net_tick" info="Failed to create network interval timer"/>
    <event id=" 3 + 0xC000" level="Op"     property="InitComplete"              value="success" info="Initialize network completed"/>
    <event id=" 4 + 0xC000" level="API"    property="GetOption"                 value="netif=%E[val1, NetIf:id], opt=%E[val2, Netif_Opt:id]" info="Get interface option"/>
    <event id=" 5 + 0xC000" level="API"    property="SetOption"                 value="netif=%E[val1, NetIf:id], opt=%E[val2, Netif_Opt:id]" info="Set interface option"/>
    <event id=" 6 + 0xC000" level="API"    property="SetDefault"                value="netif=%E[val1, NetIf:id], ver=%E[val2, Netif_Ver:id]" info="Set default interface for internet access"/>
    <event id=" 7 + 0xC000" level="API"    property="SetHostName"               value="name=&quot;%t[val1]&quot;" info="Set local host name"/>
    <event id=" 8 + 0xC000" level="Op"     property="UnInitSystem"              value="" info="De-initialize network start"/>
    <event id=" 9 + 0xC000" level="Op"     property="UnInitComplete"            value="" info="De-initialize network completed"/>

    <!-- NetMEM: Dynamic Memory Management events -->
    <event id=" 0 + 0xC100" level="Op"     property="InitMemory"                value="base=%x[val1], size=%d[val2] (limit_0=%d[val3], limit_1=%d[val4])" info="Initialize memory management"/>
    <event id=" 1 + 0xC100" level="Op"     property="AllocMemory"               value="mem=%x[val1], size=%d[val2] (used=%d[val3], blocks=%d[val4])" info="Allocate a memory block"/>
    <event id=" 2 + 0xC100" level="Op"     property="AllocLimitExceeded"        value="size=%d[val1] (used=%d[val2], blocks=%d[val3])" info="Allocation failed at level 0"/>
    <event id=" 3 + 0xC100" level="Error"  property="AllocOutOfMemory"          value="size=%d[val1] (used=%d[val2], blocks=%d[val3])" info="Out of memory error"/>
    <event id=" 4 + 0xC100" level="Op"     property="ShrinkMemory"              value="mem=%x[val1], new_size=%d[val2]" info="Shrink a memory block"/>
    <event id=" 5 + 0xC100" level="Op"     property="FreeMemory"                value="mem=%x[val1], size=%d[val2] (used=%d[val3], blocks=%d[val4])" info="Release a memory block"/>
    <event id=" 6 + 0xC100" level="Error"  property="FreeInvalidBlock"          value="mem=%x[val1]" info="Invalid memory block release requested"/>
    <event id=" 7 + 0xC100" level="Error"  property="FreeLinkCorrupted"         value="link=%x[val1]" info="Corrupted memory link pointer detected"/>
    <event id=" 8 + 0xC100" level="Op"     property="UnInitMemory"              value="" info="De-initialize memory management"/>

    <!-- NetETH: Ethernet Interface events -->
    <event id=" 0 + 0xC200" level="Op"     property="InitInterface"             value="if_num=%d[val1]" info="Initialize ethernet interface"/>
    <event id=" 1 + 0xC200" level="Error"  property="MacAddressConfigError"     value="if_num=%d[val1]" info="MAC address configuration error"/>
    <event id="43 + 0xC200" level="Error"  property="VlanConfigError"           value="if_num=%d[val1]" info="VLAN tag configuration error"/>
    <event id="44 + 0xC200" level="Error"  property="VlanInitError"             value="if_num=%d[val1]" info="VLAN tag initialization error"/>
    <event id=" 2 + 0xC200" level="Error"  property="PhyDriverConfigError"      value="if_num=%d[val1]" info="PHY driver configuration error"/>
    <event id=" 3 + 0xC200" level="Error"  property="PhyDriverInitError"        value="if_num=%d[val1]" info="PHY driver initialization error"/>
    <event id=" 4 + 0xC200" level="Error"  property="Ip4ConfigError"            value="if_num=%d[val1]" info="IPv4 configuration error"/>
    <event id=" 5 + 0xC200" level="Error"  property="Ip6ConfigError"            value="if_num=%d[val1]" info="IPv6 configuration error"/>
    <event id=" 6 + 0xC200" level="Error"  property="ThreadCreateFailed"        value="if_num=%d[val1]" info="Failed to create ethernet interface thread"/>
    <event id="48 + 0xC200" level="Error"  property="SemaphoreCreateFailed"     value="if_num=%d[val1]" info="Failed to create ethernet interface semaphore"/>
    <event id=" 7 + 0xC200" level="Error"  property="GetOptionInvalidParameter" value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id=" 8 + 0xC200" level="Error"  property="SetOptionInvalidParameter" value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id=" 9 + 0xC200" level="Op"     property="SetMacAddress"             value="if_num=%d[val1, NetVal:w0], mac=%M[val1, NetVal:w1]" info="Set interface MAC address"/>
    <event id="10 + 0xC200" level="Op"     property="SetVlanIdentifier"         value="if_num=%d[val1], vlan_id=%d[val2]" info="Set interface VLAN identifier"/>
    <event id="11 + 0xC200" level="Op"     property="SetIp4Address"             value="if_num=%d[val1], ip=%I[val2]" info="Set interface IPv4 address"/>
    <event id="12 + 0xC200" level="Op"     property="SetIp4SubnetMask"          value="if_num=%d[val1], mask=%I[val2]" info="Set interface IPv4 network mask"/>
    <event id="13 + 0xC200" level="Op"     property="SetIp4DefaultGateway"      value="if_num=%d[val1], gw=%I[val2]" info="Set interface IPv4 default gateway address"/>
    <event id="14 + 0xC200" level="Op"     property="SetIp4PrimaryDNS"          value="if_num=%d[val1], pri_dns=%I[val2]" info="Set interface IPv4 primary DNS server address"/>
    <event id="15 + 0xC200" level="Op"     property="SetIp4SecondaryDNS"        value="if_num=%d[val1], sec_dns=%I[val2]" info="Set interface IPv4 secondary DNS server address"/>
    <event id="16 + 0xC200" level="Op"     property="SetIp4Mtu"                 value="if_num=%d[val1], mtu=%d[val2]" info="Set interface IPv4 maximum transmission unit"/>
    <event id="17 + 0xC200" level="Op"     property="SetIp6Address"             value="if_num=%d[val1], ip=%J[val2]" info="Set interface IPv6 static address"/>
    <event id="18 + 0xC200" level="Op"     property="SetIp6DefaultGateway"      value="if_num=%d[val1], gw=%J[val2]" info="Set interface IPv6 default gateway address"/>
    <event id="19 + 0xC200" level="Op"     property="SetIp6PrimaryDNS"          value="if_num=%d[val1], pri_dns=%J[val2]" info="Set interface IPv6 primary DNS server address"/>
    <event id="20 + 0xC200" level="Op"     property="SetIp6SecondaryDNS"        value="if_num=%d[val1], sec_dns=%J[val2]" info="Set interface IPv6 secondary DNS server address"/>
    <event id="21 + 0xC200" level="Op"     property="SetIp6PrefixLength"        value="if_num=%d[val1], pref_len=%d[val2]" info="Set interface IPv6 subnet prefix length"/>
    <event id="47 + 0xC200" level="Op"     property="SetIp6Mtu"                 value="if_num=%d[val1], mtu=%d[val2]" info="Set interface IPv6 maximum transmission unit"/>
    <event id="22 + 0xC200" level="Op"     property="SendFrame"                 value="if_num=%d[val1], len=%d[val2, NetVal:low], ver=%E[val2>>16, IP_Ver:id]" info="Send ethernet frame"/>
    <event id="23 + 0xC200" level="Error"  property="LinkDownError"             value="if_num=%d[val1]" info="Send failed, link not connected"/>
    <event id="24 + 0xC200" level="Error"  property="SendDataTooLarge"          value="if_num=%d[val1], len=%d[val2, NetVal:low] (max=%d[val2, NetVal:high])" info="Send failed, payload data too large"/>
    <event id="45 + 0xC200" level="Error"  property="SendIp4Disabled"           value="if_num=%d[val1]" info="Send failed, IPv4 not enabled for ethernet interface"/>
    <event id="25 + 0xC200" level="Error"  property="Ip4LocalAddressUndefined"  value="if_num=%d[val1], addr=0.0.0.0" info="Send failed, local IPv4 address undefined"/>
    <event id="26 + 0xC200" level="Error"  property="Ip4MacAddressUnresolved"   value="if_num=%d[val1], dst_addr=%I[val2]" info="Send failed, destination MAC address unresolved"/>
    <event id="27 + 0xC200" level="Op"     property="EnqueueFrame"              value="if_num=%d[val1], ca_entry=%d[val2, NetVal:high], len=%d[val2, NetVal:low]" info="Frame enqueued, destination MAC address unresolved"/>
    <event id="46 + 0xC200" level="Error"  property="SendIp6Disabled"           value="if_num=%d[val1]" info="Send failed, IPv6 not enabled for ethernet interface"/>
    <event id="28 + 0xC200" level="Error"  property="Ip6LocalAddressUndefined"  value="if_num=%d[val1], addr=0:0:0:0:0:0:0:0" info="Send failed, local IPv6 address undefined"/>
    <event id="29 + 0xC200" level="Error"  property="Ip6MacAddressUnresolved"   value="dst_addr=%J[val1]" info="Send failed, destination MAC address unresolved"/>
    <event id="30 + 0xC200" level="Error"  property="InvalidIpVersion"          value="if_num=%d[val1], ver=%d[val2]" info="Send failed, invalid IP version"/>
    <event id="31 + 0xC200" level="Detail" property="ShowFrameHeader"           value="dst=%M[val1, ETH_Header:DstAddr], src=%M[val1, ETH_Header:SrcAddr], proto=%E[val1, ETH_Header:Proto]" info="Display ethernet frame header content"/>
    <event id="32 + 0xC200" level="Op"     property="LinkDownStatus"            value="if_num=%d[val1], link-down" info="Link state changed to link down"/>
    <event id="33 + 0xC200" level="Op"     property="LinkUpStatus"              value="if_num=%d[val1], speed=%E[val2 &amp; 3, ETH_Speed:id], duplex=%E[val2 >> 2, ETH_Duplex:id]" info="Link state changed to link up"/>
    <event id="34 + 0xC200" level="Op"     property="ReceiveFrame"              value="if_num=%d[val1], len=%d[val2]" info="Ethernet frame received"/>
    <event id="35 + 0xC200" level="Op"     property="VlanInvalid"               value="if_num=%d[val1]" info="Frame discarded, VLAN tag not valid"/>
    <event id="36 + 0xC200" level="Op"     property="Ip4Disabled"               value="if_num=%d[val1]" info="Frame discarded, IPv4 not enabled for ethernet interface"/>
    <event id="37 + 0xC200" level="Op"     property="Ip6Disabled"               value="if_num=%d[val1]" info="Frame discarded, IPv6 not enabled for ethernet interface"/>
    <event id="38 + 0xC200" level="Op"     property="ProtocolUnknown"           value="if_num=%d[val1], proto=%x[val2]" val1="uint16_t" val2="uint16_t" info="Frame discarded, ethernet protocol type unknown"/>
    <event id="39 + 0xC200" level="Op"     property="SendRawFrame"              value="if_num=%d[val1], len=%d[val2]" info="Send raw ethernet frame"/>
    <event id="40 + 0xC200" level="Error"  property="SendRawInvalidParameter"   value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id="41 + 0xC200" level="Op"     property="OutputLowLevel"            value="if_num=%d[val1], len=%d[val2]" info="Output ethernet frame to the driver"/>
    <event id="42 + 0xC200" level="Op"     property="UnInitInterface"           value="if_num=%d[val1]" info="De-initialize ethernet interface"/>

    <!-- NetWiFi: WiFi Interface events -->
    <event id=" 0 + 0xDD00" level="Op"     property="InitInterface"             value="if_num=%d[val1]" info="Initialize WiFi interface"/>
    <event id=" 1 + 0xDD00" level="Error"  property="DriverInitFailed"          value="if_num=%d[val1]" info="Initialize WiFi driver failed"/>
    <event id=" 2 + 0xDD00" level="Error"  property="SetBypassModeFailed"       value="if_num=%d[val1]" info="Initialize bypass/transparent mode failed"/>
    <event id=" 3 + 0xDD00" level="Error"  property="GetMacAddressFailed"       value="if_num=%d[val1]" info="Retrieve MAC address from WiFi driver failed"/>
    <event id=" 4 + 0xDD00" level="Op"     property="DriverMacAddress"          value="if_num=%d[val1, NetVal:w0], mac=%M[val1, NetVal:w1], get only" info="Driver provides MAC address, get only"/>
    <event id=" 5 + 0xDD00" level="Error"  property="MacAddressConfigError"     value="if_num=%d[val1]" info="MAC address configuration error"/>
    <event id=" 6 + 0xDD00" level="Error"  property="SetMacAddressFailed"       value="if_num=%d[val1]" info="Set MAC address in WiFi driver failed"/>
    <event id=" 7 + 0xDD00" level="Error"  property="Ip4ConfigError"            value="if_num=%d[val1]" info="IPv4 configuration error"/>
    <event id=" 8 + 0xDD00" level="Error"  property="Ip6ConfigError"            value="if_num=%d[val1]" info="IPv6 configuration error"/>
    <event id=" 9 + 0xDD00" level="Error"  property="ThreadCreateFailed"        value="if_num=%d[val1]" info="Failed to create WiFi interface thread"/>
    <event id="59 + 0xDD00" level="Error"  property="SemaphoreCreateFailed"     value="if_num=%d[val1]" info="Failed to create WiFi interface semaphore"/>
    <event id="10 + 0xDD00" level="Error"  property="GetOptionInvalidParameter" value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id="11 + 0xDD00" level="Error"  property="SetOptionInvalidParameter" value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id="12 + 0xDD00" level="Op"     property="SetMacAddress"             value="if_num=%d[val1, NetVal:w0], mac=%M[val1, NetVal:w1]" info="Set interface MAC address"/>
    <event id="13 + 0xDD00" level="Op"     property="SetIp4Address"             value="if_num=%d[val1], ip=%I[val2]" info="Set interface IPv4 address"/>
    <event id="14 + 0xDD00" level="Op"     property="SetIp4SubnetMask"          value="if_num=%d[val1], mask=%I[val2]" info="Set interface IPv4 network mask"/>
    <event id="15 + 0xDD00" level="Op"     property="SetIp4DefaultGateway"      value="if_num=%d[val1], gw=%I[val2]" info="Set interface IPv4 default gateway address"/>
    <event id="16 + 0xDD00" level="Op"     property="SetIp4PrimaryDNS"          value="if_num=%d[val1], pri_dns=%I[val2]" info="Set interface IPv4 primary DNS server address"/>
    <event id="17 + 0xDD00" level="Op"     property="SetIp4SecondaryDNS"        value="if_num=%d[val1], sec_dns=%I[val2]" info="Set interface IPv4 secondary DNS server address"/>
    <event id="18 + 0xDD00" level="Op"     property="SetIp4Mtu"                 value="if_num=%d[val1], mtu=%d[val2]" info="Set interface IPv4 maximum transmission unit"/>
    <event id="19 + 0xDD00" level="Op"     property="SetIp6Address"             value="if_num=%d[val1], ip=%J[val2]" info="Set interface IPv6 static address"/>
    <event id="20 + 0xDD00" level="Op"     property="SetIp6DefaultGateway"      value="if_num=%d[val1], gw=%J[val2]" info="Set interface IPv6 default gateway address"/>
    <event id="21 + 0xDD00" level="Op"     property="SetIp6PrimaryDNS"          value="if_num=%d[val1], pri_dns=%J[val2]" info="Set interface IPv6 primary DNS server address"/>
    <event id="22 + 0xDD00" level="Op"     property="SetIp6SecondaryDNS"        value="if_num=%d[val1], sec_dns=%J[val2]" info="Set interface IPv6 secondary DNS server address"/>
    <event id="23 + 0xDD00" level="Op"     property="SetIp6PrefixLength"        value="if_num=%d[val1], pref_len=%d[val2]" info="Set interface IPv6 subnet prefix length"/>
    <event id="58 + 0xDD00" level="Op"     property="SetIp6Mtu"                 value="if_num=%d[val1], mtu=%d[val2]" info="Set interface IPv6 maximum transmission unit"/>
    <event id="24 + 0xDD00" level="API"    property="Scan"                      value="if_num=%d[val1], max=%d[val2]" info="Scan WiFi networks within range"/>
    <event id="25 + 0xDD00" level="Error"  property="ScanWrongMode"             value="if_num=%d[val1], mode=%E[val2, WIFI_Mode:id]" info="Wrong WiFi mode for Scan"/>
    <event id="26 + 0xDD00" level="Error"  property="ScanInvalidParameter"      value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id="27 + 0xDD00" level="Op"     property="ScanComplete"              value="if_num=%d[val1], num=%d[val2]" info="Scan WiFi networks completed"/>
    <event id="28 + 0xDD00" level="API"    property="GetOption"                 value="if_num=%d[val1], opt=%E[val2, WIFI_Opt:id]" info="Get WiFi driver option"/>
    <event id="29 + 0xDD00" level="API"    property="SetOption"                 value="if_num=%d[val1], opt=%E[val2, WIFI_Opt:id]" info="Set WiFi driver option"/>
    <event id="30 + 0xDD00" level="API"    property="Activate"                  value="if_num=%d[val1], mode=%E[val2, WIFI_Mode:id]" info="Activate WiFi interface"/>
    <event id="31 + 0xDD00" level="Error"  property="ActivateInvalidParameter"  value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id="32 + 0xDD00" level="API"    property="Deactivate"                value="if_num=%d[val1], mode=%E[val2, WIFI_Mode:id]" info="Deactivate WiFi interface"/>
    <event id="33 + 0xDD00" level="Error"  property="DeactivateInvalidParam"    value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id="34 + 0xDD00" level="API"    property="GetNetInfo"                value="if_num=%d[val1]" info="Get WiFi network information"/>
    <event id="35 + 0xDD00" level="Error"  property="GetNetInfoWrongMode"       value="if_num=%d[val1], mode=%E[val2, WIFI_Mode:id]" info="Wrong WiFi mode for GetNetInfo"/>
    <event id="36 + 0xDD00" level="Error"  property="GetNetInfoInvalidParam"    value="if_num=%d[val1]" info="Invalid parameter provided for the function"/>
    <event id="37 + 0xDD00" level="Op"     property="SendFrame"                 value="if_num=%d[val1], len=%d[val2, NetVal:low], ver=%E[val2>>16, IP_Ver:id]" info="Send WiFi frame"/>
    <event id="38 + 0xDD00" level="Error"  property="NotConnected"              value="if_num=%d[val1]" info="Send failed, WiFi station not connected"/>
    <event id="39 + 0xDD00" level="Error"  property="SendDataTooLarge"          value="if_num=%d[val1], len=%d[val2, NetVal:low] (max=%d[val2, NetVal:high])" info="Send failed, payload data too large"/>
    <event id="56 + 0xDD00" level="Error"  property="SendIp4Disabled"           value="if_num=%d[val1]" info="Send failed, IPv4 not enabled for WiFi interface"/>
    <event id="40 + 0xDD00" level="Error"  property="Ip4LocalAddressUndefined"  value="if_num=%d[val1], addr=0.0.0.0" info="Send failed, local IPv4 address undefined"/>
    <event id="41 + 0xDD00" level="Error"  property="Ip4MacAddressUnresolved"   value="if_num=%d[val1], dst_addr=%I[val2]" info="Send failed, destination MAC address unresolved"/>
    <event id="42 + 0xDD00" level="Op"     property="EnqueueFrame"              value="if_num=%d[val1], ca_entry=%d[val2, NetVal:high], len=%d[val2, NetVal:low]" info="Frame enqueued, destination MAC address unresolved"/>
    <event id="57 + 0xDD00" level="Error"  property="SendIp6Disabled"           value="if_num=%d[val1]" info="Send failed, IPv6 not enabled for WiFi interface"/>
    <event id="43 + 0xDD00" level="Error"  property="Ip6LocalAddressUndefined"  value="if_num=%d[val1], addr=0:0:0:0:0:0:0:0" info="Send failed, local IPv6 address undefined"/>
    <event id="44 + 0xDD00" level="Error"  property="Ip6MacAddressUnresolved"   value="if_num=%d[val1], dst_addr=%J[val2]" info="Send failed, destination MAC address unresolved"/>
    <event id="45 + 0xDD00" level="Error"  property="InvalidIpVersion"          value="if_num=%d[val1], ver=%d[val2]" info="Send failed, invalid IP version"/>
    <event id="46 + 0xDD00" level="Detail" property="ShowFrameHeader"           value="dst=%M[val1, ETH_Header:DstAddr], src=%M[val1, ETH_Header:SrcAddr], proto=%E[val1, ETH_Header:Proto]" info="Display WiFi ethernet frame header content"/>
    <event id="47 + 0xDD00" level="Op"     property="LinkStateChange"           value="if_num=%d[val1], state=%E[val2, WIFI_State:id]" info="Station connection state has changed"/>
    <event id="48 + 0xDD00" level="Op"     property="ReceiveFrame"              value="if_num=%d[val1], len=%d[val2]" info="WiFi ethernet frame received"/>
    <event id="49 + 0xDD00" level="Op"     property="Ip4Disabled"               value="if_num=%d[val1]" info="Frame discarded, IPv4 not enabled for WiFi interface"/>
    <event id="50 + 0xDD00" level="Op"     property="Ip6Disabled"               value="if_num=%d[val1]" info="Frame discarded, IPv6 not enabled for WiFi interface"/>
    <event id="51 + 0xDD00" level="Op"     property="ProtocolUnknown"           value="if_num=%d[val1], proto=%x[val2]" val1="uint16_t" val2="uint16_t" info="Frame discarded, WiFi ethernet protocol type unknown"/>
    <event id="52 + 0xDD00" level="Op"     property="OutputLowLevel"            value="if_num=%d[val1], len=%d[val2]" info="Output frame to the WiFi driver"/>
    <event id="53 + 0xDD00" level="Error"  property="TxQueueOverflow"           value="if_num=%d[val1]" info="WiFi transmit queue overflow"/>
    <event id="54 + 0xDD00" level="Error"  property="OutputNoMemory"            value="if_num=%d[val1]" info="No memory available for WiFi transmit frame"/>
    <event id="55 + 0xDD00" level="Op"     property="UnInitInterface"           value="if_num=%d[val1]" info="De-initialize WiFi interface"/>

    <!-- NetPPP: PPP Interface events -->
    <event id=" 0 + 0xC300" level="Op"     property="InitInterface"             value="ppp" info="Initialize PPP interface"/>
    <event id=" 1 + 0xC300" level="Error"  property="ThreadCreateFailed"        value="netif=PPP" info="Failed to create PPP interface thread"/>
    <event id="105+ 0xC300" level="Error"  property="SemaphoreCreateFailed"     value="netif=PPP" info="Failed to create PPP interface semaphore"/>
    <event id=" 2 + 0xC300" level="Error"  property="GetOptionInvalidParameter" value="error" info="Invalid parameter provided for the function"/>
    <event id=" 3 + 0xC300" level="Error"  property="SetOptionInvalidParameter" value="error" info="Invalid parameter provided for the function"/>
    <event id=" 4 + 0xC300" level="Op"     property="SetIp4Address"             value="ip=%I[val1]" info="Set interface IPv4 address"/>
    <event id=" 5 + 0xC300" level="Op"     property="SetIp4PrimaryDNS"          value="pri_dns=%I[val1]" info="Set interface IPv4 primary DNS server address"/>
    <event id=" 6 + 0xC300" level="Op"     property="SetIp4SecondaryDNS"        value="sec_dns=%I[val1]" info="Set interface IPv4 secondary DNS server address"/>
    <event id=" 7 + 0xC300" level="Op"     property="SetIp4Mtu"                 value="mtu=%d[val1]" info="Set interface IPv4 maximum transmission unit"/>
    <event id=" 8 + 0xC300" level="Op"     property="ReceiveFrame"              value="proto=%E[val1, PPP_Proto:id], len=%d[val2]" info="PPP frame received"/>
    <event id=" 9 + 0xC300" level="Op"     property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="10 + 0xC300" level="Error"  property="ChecksumFailed"            value="len=%d[val1]" info="Frame error, checksum check failed"/>
    <event id="11 + 0xC300" level="Error"  property="CtrlByteInvalid"           value="ctrl=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Frame error, control byte is not valid"/>
    <event id="12 + 0xC300" level="Op"     property="SendFrame"                 value="proto=%E[val1, PPP_Proto:id], len=%d[val2]" info="Send PPP frame"/>
    <event id="13 + 0xC300" level="Error"  property="InvalidIpVersion"          value="ver=%d[val1]" info="Send failed, invalid IP version"/>
    <event id="14 + 0xC300" level="Error"  property="NetworkLayerDown"          value="error" info="Dump sending IP frame, network layer down"/>
    <event id="15 + 0xC300" level="Error"  property="SendDataTooLarge"          value="len=%d[val1] (max=%d[val2])" info="Send failed, payload data too large"/>
    <event id="16 + 0xC300" level="Error"  property="NoMemoryError"             value="error" info="Dump sending frame, out of memory error"/>
    <event id="17 + 0xC300" level="Op"     property="QueueAddTransmit"          value="success" info="Add frame to transmit queue"/>
    <event id="18 + 0xC300" level="Op"     property="RejectProtocol"            value="proto=%E[val1, PPP_Proto:id]" info="Reject unsupported protocol type"/>
    <event id="19 + 0xC300" level="Op"     property="RejectCode"                value="code=%x[val2], proto=%E[val1, PPP_Proto:id]" val2="uint8_t" info="Reject unsupported protocol type"/>
    <event id="20 + 0xC300" level="API"    property="Connect"                   value="dial-number=&quot;%t[val1]&quot;" info="Connect to target number"/>
    <event id="21 + 0xC300" level="Error"  property="ConnectInvalidParameter"   value="error" info="Invalid parameter provided for the function"/>
    <event id="22 + 0xC300" level="Error"  property="ConnectWrongState"         value="connected" info="Interface already connected"/>
    <event id="23 + 0xC300" level="API"    property="Listen"                    value="start" info="Start modem listening mode"/>
    <event id="24 + 0xC300" level="Error"  property="ListenInvalidParameter"    value="error" info="Invalid parameter provided for the function"/>
    <event id="25 + 0xC300" level="Error"  property="ListenWrongState"          value="connected" info="Interface already connected"/>
    <event id="26 + 0xC300" level="API"    property="Close"                     value="stop" info="Close connection, disconnect modem"/>
    <event id="27 + 0xC300" level="Op"     property="ShowUsername"              value="username=&quot;%t[val1]&quot;" info="Display username"/>
    <event id="28 + 0xC300" level="Op"     property="ShowPassword"              value="password=&quot;%t[val1]&quot;" info="Display password"/>
    <event id="29 + 0xC300" level="Op"     property="ModemOffline"              value="off-line" info="Re-init PPP protocols, modem offline"/>
    <event id="30 + 0xC300" level="Op"     property="DataLinkDown"              value="discard" info="Discard IPCP frame, data-link down (LCP)"/>
    <event id="31 + 0xC300" level="Op"     property="UnInitInterface"           value="ppp" info="De-initialize PPP interface"/>
    <!-- PPP-LCP events -->
    <event id="32 + 0xC300" level="Op"     property="LcpInit"                   value="ppp-lcp" info="Initialize LCP protocol"/>
    <event id="33 + 0xC300" level="Op"     property="LcpSendConfigRequest"      value="send" info="Send LCP configuration request"/>
    <event id="34 + 0xC300" level="Error"  property="LcpNoRetriesLeft"          value="retries=0" info="No retries left for LCP negotiation"/>
    <event id="35 + 0xC300" level="Detail" property="LcpOptionCharMap"          value="char_map=%x[val1]" info="Option async control character map"/>
    <event id="36 + 0xC300" level="Detail" property="LcpOptionPfc"              value="enable" info="Option PFC: Protocol Field Compression"/>
    <event id="37 + 0xC300" level="Detail" property="LcpOptionAcfc"             value="enable" info="Option ACFC: Address and Control Field Compression"/>
    <event id="38 + 0xC300" level="Detail" property="LcpOptionMagicNumber"      value="magic_num=%x[val1]" info="Option Magic Number"/>
    <event id="39 + 0xC300" level="Detail" property="LcpOptionAuthPap"          value="enable" info="Option authentication type PAP"/>
    <event id="40 + 0xC300" level="Detail" property="LcpOptionAuthChapMd5"      value="enable" info="Option authentication type CHAP-MD5"/>
    <event id="41 + 0xC300" level="Op"     property="LcpSendEchoRequest"        value="magic_num=%x[val1]" info="Send LCP echo request"/>
    <event id="42 + 0xC300" level="Op"     property="LcpSendTerminateRequest"   value="" info="Send LCP terminate request"/>
    <event id="43 + 0xC300" level="Op"     property="LcpSendFrame"              value="code=%E[val1, LCP_Header:Code], id=%x[val1, LCP_Header:Id], len=%d[val1, LCP_Header:Len]" info="Send LCP frame"/>
    <event id="44 + 0xC300" level="Op"     property="LcpReceiveFrame"           value="code=%E[val1, LCP_Header:Code], id=%x[val1, LCP_Header:Id], len=%d[val1, LCP_Header:Len]" info="LCP frame received"/>
    <event id="45 + 0xC300" level="Op"     property="LcpDataLinkUp"             value="" info="Data link up in server mode"/>
    <event id="46 + 0xC300" level="Op"     property="LcpOptionMru"              value="mru=%d[val1]" info="Option MRU: Maximum Receive Unit"/>
    <event id="47 + 0xC300" level="Op"     property="LcpOptionAuth"             value="auth_type=%E[val1, PPP_Auth:id]" info="Option authentication type"/>
    <event id="48 + 0xC300" level="Op"     property="LcpOptionAuthChapNotMd5"   value="" info="Authentication CHAP but hash algorithm not MD5"/>
    <event id="49 + 0xC300" level="Op"     property="LcpOptionUnknown"          value="opt=%x[val1]" val1="uint8_t" info="Unknown LCP option"/>
    <event id="50 + 0xC300" level="Op"     property="LcpSendReject"             value="" info="Send LCP-Reject reply"/>
    <event id="51 + 0xC300" level="Op"     property="LcpSendNak"                value="" info="Send LCP-Nak reply (not acknowledge)"/>
    <event id="52 + 0xC300" level="Op"     property="LcpSendAck"                value="" info="Send LCP-Ack reply (acknowledge)"/>
    <event id="53 + 0xC300" level="Op"     property="LcpWrongAckReceived"       value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong LCP-Ack received"/>
    <event id="54 + 0xC300" level="Op"     property="LcpWrongNakReceived"       value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong LCP-Nak received"/>
    <event id="55 + 0xC300" level="Error"  property="LcpConfigAuthFailed"       value="error" info="Authentication type negotiation failed"/>
    <event id="56 + 0xC300" level="Op"     property="LcpWrongRejectReceived"    value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong LCP-Reject received"/>
    <event id="57 + 0xC300" level="Op"     property="LcpEchoMagicNumber"        value="magic_num=%x[val1]" info="LCP-Echo magic number"/>
    <event id="58 + 0xC300" level="Op"     property="LcpWrongPeerMagicNumber"   value="magic_num=%x[val1] (valid=%x[val2])" info="Wrong peer magic number in LCP-Echo request"/>
    <event id="59 + 0xC300" level="Op"     property="LcpSendEchoReply"          value="" info="Send LCP-Echo reply"/>
    <event id="60 + 0xC300" level="Op"     property="LcpWrongEchoReplyReceived" value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong LCP-Echo reply received"/>
    <event id="61 + 0xC300" level="Op"     property="LcpSendTerminateAck"       value="" info="Send LCP-Terminate acknowledge"/>
    <event id="62 + 0xC300" level="Op"     property="LcpUnInit"                 value="ppp-lcp" info="De-initialize LCP protocol"/>
    <!-- PPP-PAP events -->
    <event id="63 + 0xC300" level="Op"     property="PapInit"                   value="ppp-pap" info="Initialize PAP protocol"/>
    <event id="64 + 0xC300" level="Op"     property="PapSendAuthRequest"        value="peer_id=&quot;%t[val1]&quot;" info="Send PAP authentication request"/>
    <event id="65 + 0xC300" level="Op"     property="PapShowPassword"           value="password=&quot;%t[val1]&quot;" info="Display PAP password"/>
    <event id="66 + 0xC300" level="Op"     property="PapSendFrame"              value="code=%E[val1, PAP_Header:Code], id=%x[val1, PAP_Header:Id], len=%d[val1, PAP_Header:Len]" info="Send PAP frame"/>
    <event id="67 + 0xC300" level="Op"     property="PapReceiveFrame"           value="code=%E[val1, PAP_Header:Code], id=%x[val1, PAP_Header:Id], len=%d[val1, PAP_Header:Len]" info="PAP frame received"/>
    <event id="68 + 0xC300" level="Op"     property="PapLoginSuccess"           value="success" info="PAP authentication successful"/>
    <event id="69 + 0xC300" level="Error"  property="PapLoginFailed"            value="error" info="PAP authentication failed"/>
    <event id="70 + 0xC300" level="Op"     property="PapWrongAckReceived"       value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong PAP-Ack received"/>
    <event id="71 + 0xC300" level="Op"     property="PapWrongNakReceived"       value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong PAP-Nak received"/>
    <event id="72 + 0xC300" level="Op"     property="PapUnInit"                 value="ppp-pap" info="De-initialize PAP protocol"/>
    <!-- PPP-CHAP events -->
    <event id="73 + 0xC300" level="Op"     property="ChapInit"                  value="ppp-chap" info="Initialize CHAP protocol"/>
    <event id="74 + 0xC300" level="Op"     property="ChapSendChallenge"         value="name=&quot;%t[val1]&quot;" info="Send CHAP challenge"/>
    <event id="75 + 0xC300" level="Op"     property="ChapSendFrame"             value="code=%E[val1, CHAP_Header:Code], id=%x[val1, CHAP_Header:Id], len=%d[val1, CHAP_Header:Len]" info="Send CHAP frame"/>
    <event id="76 + 0xC300" level="Op"     property="ChapReceiveFrame"          value="code=%E[val1, CHAP_Header:Code], id=%x[val1, CHAP_Header:Id], len=%d[val1, CHAP_Header:Len]" info="CHAP frame received"/>
    <event id="77 + 0xC300" level="Op"     property="ChapWrongResponseReceived" value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong CHAP-Response received"/>
    <event id="78 + 0xC300" level="Op"     property="ChapWrongSuccessReceived"  value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong CHAP-Success received"/>
    <event id="79 + 0xC300" level="Op"     property="ChapWrongFailureReceived"  value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong CHAP-Failure received"/>
    <event id="80 + 0xC300" level="Op"     property="ChapLoginSuccess"          value="success" info="CHAP authentication successful"/>
    <event id="81 + 0xC300" level="Error"  property="ChapLoginFailed"           value="error" info="CHAP authentication failed"/>
    <event id="82 + 0xC300" level="Op"     property="ChapUnInit"                value="ppp-chap" info="De-initialize CHAP protocol"/>
    <!-- PPP-IPCP events -->
    <event id="83 + 0xC300" level="Op"     property="IpcpInit"                  value="ppp-ipcp" info="Initialize IPCP protocol"/>
    <event id="84 + 0xC300" level="Error"  property="IpcpIp4ConfigError"        value="ip4" info="IPv4 configuration error"/>
    <event id="85 + 0xC300" level="Op"     property="IpcpSendConfigRequest"     value="send" info="Send IPCP configuration request"/>
    <event id="86 + 0xC300" level="Detail" property="IpcpOptionIpAddress"       value="ip=%I[val1]" info="Option IP address"/>
    <event id="87 + 0xC300" level="Detail" property="IpcpOptionPrimaryDns"      value="pri_dns=%I[val1]" info="Option primary DNS server address"/>
    <event id="88 + 0xC300" level="Detail" property="IpcpOptionSecondaryDns"    value="sec_dns=%I[val1]" info="Option secondary DNS server address"/>
    <event id="89 + 0xC300" level="Op"     property="IpcpSendFrame"             value="code=%E[val1, IPCP_Header:Code], id=%x[val1, IPCP_Header:Id], len=%d[val1, IPCP_Header:Len]" info="Send IPCP frame"/>
    <event id="90 + 0xC300" level="Op"     property="IpcpReceiveFrame"          value="code=%E[val1, IPCP_Header:Code], id=%x[val1, IPCP_Header:Id], len=%d[val1, IPCP_Header:Len]" info="IPCP frame received"/>
    <event id="91 + 0xC300" level="Op"     property="IpcpOptionUnknown"         value="opt=%x[val1]" val1="uint8_t" info="Unknown IPCP option"/>
    <event id="92 + 0xC300" level="Op"     property="IpcpSendReject"            value="" info="Send IPCP-Reject response"/>
    <event id="93 + 0xC300" level="Op"     property="IpcpSendNak"               value="" info="Send IPCP-Nak response (not acknowledge)"/>
    <event id="94 + 0xC300" level="Op"     property="IpcpSendAck"               value="" info="Send IPCP-Ack response (acknowledge)"/>
    <event id="95 + 0xC300" level="Op"     property="IpcpWrongAckReceived"      value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong IPCP-Ack received"/>
    <event id="96 + 0xC300" level="Op"     property="IpcpNetworkLayerUp"        value="" info="Address acknowledged, network layer up"/>
    <event id="97 + 0xC300" level="Op"     property="IpcpWrongNakReceived"      value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong IPCP-Nak received"/>
    <event id="98 + 0xC300" level="Op"     property="IpcpWrongRejectReceived"   value="id=%x[val1] (valid=%x[val2])" val1="uint8_t" val2="uint8_t" info="Wrong IPCP-Reject received"/>
    <event id="99 + 0xC300" level="Op"     property="IpcpWrongSubnet"           value="ip=%I[val1]" info="Advertised IP not in our subnet"/>
    <event id="100+ 0xC300" level="Op"     property="IpcpPrimaryDnsRejected"    value="" info="Rejected option primary DNS server address"/>
    <event id="101+ 0xC300" level="Op"     property="IpcpSecondaryDnsRejected"  value="" info="Rejected option secondary DNS server address"/>
    <event id="102+ 0xC300" level="Error"  property="IpcpIpAddressRejected"     value="" info="Rejected option IP address"/>
    <event id="103+ 0xC300" level="Error"  property="IpcpNotRequestedOption"    value="opt=%x[val1]" val1="uint8_t" info="Rejected option was not requested"/>
    <event id="104+ 0xC300" level="Op"     property="IpcpUnInit"                value="ppp-ipcp" info="De-initialize IPCP protocol"/>

    <!-- NetSLIP: SLIP Interface events -->
    <event id=" 0 + 0xC400" level="Op"     property="InitInterface"             value="slip" info="Initialize SLIP interface"/>
    <event id=" 1 + 0xC400" level="Error"  property="Ip4ConfigError"            value="ip4" info="IPv4 configuration error"/>
    <event id=" 2 + 0xC400" level="Error"  property="ThreadCreateFailed"        value="netif=SLIP" info="Failed to create SLIP interface thread"/>
    <event id="23 + 0xC400" level="Error"  property="SemaphoreCreateFailed"     value="netif=SLIP" info="Failed to create SLIP interface semaphore"/>
    <event id=" 3 + 0xC400" level="Error"  property="GetOptionInvalidParameter" value="error" info="Invalid parameter provided for the function"/>
    <event id=" 4 + 0xC400" level="Error"  property="SetOptionInvalidParameter" value="error" info="Invalid parameter provided for the function"/>
    <event id=" 5 + 0xC400" level="Op"     property="SetIp4Address"             value="ip=%I[val1]" info="Set interface IPv4 address"/>
    <event id=" 6 + 0xC400" level="Op"     property="SetIp4PrimaryDNS"          value="pri_dns=%I[val1]" info="Set interface IPv4 primary DNS server address"/>
    <event id=" 7 + 0xC400" level="Op"     property="SetIp4SecondaryDNS"        value="sec_dns=%I[val1]" info="Set interface IPv4 secondary DNS server address"/>
    <event id=" 8 + 0xC400" level="Op"     property="SetIp4Mtu"                 value="mtu=%d[val1]" info="Set interface IPv4 maximum transmission unit"/>
    <event id=" 9 + 0xC400" level="API"    property="Connect"                   value="dial-number=&quot;%t[val1]&quot;" info="Connect to target number"/>
    <event id="10 + 0xC400" level="Error"  property="ConnectInvalidParameter"   value="error" info="Invalid parameter provided for the function"/>
    <event id="11 + 0xC400" level="Error"  property="ConnectWrongState"         value="connected" info="Interface already connected"/>
    <event id="12 + 0xC400" level="API"    property="Listen"                    value="start" info="Start modem listening mode"/>
    <event id="13 + 0xC400" level="Error"  property="ListenWrongState"          value="connected" info="Interface already connected"/>
    <event id="14 + 0xC400" level="API"    property="Close"                     value="stop" info="Close connection, disconnect modem"/>
    <event id="15 + 0xC400" level="Op"     property="SendFrame"                 value="len=%d[val1], ver=%E[val2, IP_Ver:id]" info="Send SLIP frame"/>
    <event id="16 + 0xC400" level="Error"  property="InvalidIpVersion"          value="ver=%d[val1]" info="Send failed, invalid IP version"/>
    <event id="17 + 0xC400" level="Error"  property="SendDataTooLarge"          value="len=%d[val1] (max=%d[val2])" info="Send failed, payload data too large"/>
    <event id="18 + 0xC400" level="Error"  property="NoMemoryError"             value="error" info="Dump sending frame, out of memory error"/>
    <event id="19 + 0xC400" level="Op"     property="QueueAddTransmit"          value="success" info="Add frame to transmit queue"/>
    <event id="20 + 0xC400" level="Op"     property="ModemOffline"              value="off-line" info="Link-down, modem offline"/>
    <event id="21 + 0xC400" level="Op"     property="ReceiveFrame"              value="len=%d[val1]" info="SLIP frame received"/>
    <event id="22 + 0xC400" level="Op"     property="UnInitInterface"           value="slip" info="De-initialize SLIP interface"/>

    <!-- NetLOOP: Loopback Interface events -->
    <event id=" 0 + 0xC500" level="Op"     property="InitInterface"             value="loopback" info="Initialize loopback interface"/>
    <event id=" 1 + 0xC500" level="Op"     property="SendFrame"                 value="len=%d[val1], ver=%E[val2, IP_Ver:id]" info="Send loopback frame"/>
    <event id=" 2 + 0xC500" level="Error"  property="NoMemoryError"             value="error" info="Dump sending frame, out of memory error"/>
    <event id=" 3 + 0xC500" level="Op"     property="ReceiveFrame"              value="len=%d[val1], ver=%E[val2, IP_Ver:id]" info="Loopback frame received"/>
    <event id=" 4 + 0xC500" level="Op"     property="UnInitInterface"           value="loopback" info="De-initialize loopback interface"/>

    <!-- NetIP4: IPv4 Core events -->
    <event id=" 0 + 0xC600" level="Op"     property="InitCore"                  value="default=%E[val1, NetIf:id]" info="Initialize IPv4 core"/>
    <event id=" 1 + 0xC600" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], len=%d[val2]" info="IPv4 frame received"/>
    <event id=" 2 + 0xC600" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id=" 3 + 0xC600" level="Error"  property="InvalidIpVersion"          value="netif=%E[val1, NetIf:id], ver=%d[val2]" info="Discard frame, invalid IP version"/>
    <event id=" 4 + 0xC600" level="Detail" property="ShowFrameHeader"           value="dst=%I[val1, IP4_Header:DstAddr], src=%I[val1, IP4_Header:SrcAddr], proto=%E[val1, IP4_Header:Proto], id=%x[val1, IP4_Header:Id], frag=%x[val1, IP4_Header:FragOffs], len=%d[val1, IP4_Header:Len]" info="Display IPv4 frame header content"/>
    <event id=" 5 + 0xC600" level="Error"  property="SourceIpAddressInvalid"    value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Source IP address invalid"/>
    <event id=" 6 + 0xC600" level="Error"  property="WrongMulticastProtocol"    value="netif=%E[val1, NetIf:id], proto=%E[val2, IP4_Proto:id]" info="Wrong multicast protocol, only IGMP and UDP allowed"/>
    <event id=" 7 + 0xC600" level="Error"  property="WrongBroadcastProtocol"    value="netif=%E[val1, NetIf:id], proto=%E[val2, IP4_Proto:id]" info="Wrong subnet broadcast protocol, only UDP allowed"/>
    <event id=" 8 + 0xC600" level="Op"     property="WrongDestinationAddress"   value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Frame with wrong destination address received"/>
    <event id=" 9 + 0xC600" level="Error"  property="ChecksumFailed"            value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Frame error, checksum check failed"/>
    <event id="10 + 0xC600" level="Error"  property="FragmentDfFlagSet"         value="netif=%E[val1, NetIf:id], flags=%x[val2 &amp; 0xE000], frag_offs=%x[val2 &amp; 0x1FFF]" val2="uint16_t" info="DF-flag set in frame fragment"/>
    <event id="11 + 0xC600" level="Error"  property="FragmentationDisabled"     value="netif=%E[val1, NetIf:id]" info="Fragmented frames not enabled for interface"/>
    <event id="12 + 0xC600" level="Op"     property="SendFrame"                 value="netif=%E[val1, NetIf:id], proto=%E[val2 &amp; 0xFF, IP4_Proto:id], len=%d[val2, NetVal:high]" info="Send IPv4 frame"/>
    <event id="13 + 0xC600" level="Error"  property="ProtocolUnknown"           value="netif=%E[val1, NetIf:id], proto=%d[val2]" info="Send failed, unknown protocol type"/>
    <event id="14 + 0xC600" level="Error"  property="DestinationAddressNull"    value="netif=%E[val1, NetIf:id]" info="Send failed, destination address not provided"/>
    <event id="15 + 0xC600" level="Op"     property="SetDefaultInterface"       value="netif=%E[val1, NetIf:id]" info="Set default IPv4 inteface for internet access"/>
    <event id="16 + 0xC600" level="Op"     property="UnInitCore"                value="ip4" info="De-initialize IPv4 core"/>

    <!-- NetICMP: ICMP Control events -->
    <event id=" 0 + 0xC700" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], len=%d[val2]" info="ICMP frame received"/>
    <event id="24 + 0xC700" level="Detail" property="ShowFrameHeader"           value="type=%E[val1, ICMP_Header:Type], code=%d[val1, ICMP_Header:Code], cksum=%x[val1, ICMP_Header:Chksum]" info="Display ICMP frame header content"/>
    <event id=" 1 + 0xC700" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id=" 2 + 0xC700" level="Error"  property="ChecksumFailed"            value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Frame error, checksum check failed"/>
    <event id=" 3 + 0xC700" level="Error"  property="EchoRequestWrongCode"      value="netif=%E[val1, NetIf:id], code=%d[val2, NetVal:low] (valid=%d[val2, NetVal:high])" info="Wrong code in echo request received"/>
    <event id=" 4 + 0xC700" level="Op"     property="EchoRequestReceived"       value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Echo request received"/>
    <event id="25 + 0xC700" level="Op"     property="EchoReplyDisabled"         value="netif=%E[val1, NetIf:id]" info="Frame discarded, Echo response not enabled for the interface"/>
    <event id=" 5 + 0xC700" level="Op"     property="SendEchoReply"             value="netif=%E[val1, NetIf:id]" info="Send echo reply"/>
    <event id=" 6 + 0xC700" level="Op"     property="EchoReplyReceived"         value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Echo reply received"/>
    <event id=" 7 + 0xC700" level="Error"  property="EchoReplyWrongState"       value="netif=%E[val1, NetIf:id]" info="Echo reply received in wrong ping process state"/>
    <event id=" 8 + 0xC700" level="Error"  property="EchoReplyWrongCode"        value="netif=%E[val1, NetIf:id], code=%d[val2, NetVal:low] (valid=%d[val2, NetVal:high])" info="Wrong code in echo reply received"/>
    <event id=" 9 + 0xC700" level="Error"  property="EchoReplyWrongIpAddress"   value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Wrong source IP address in echo reply"/>
    <event id="10 + 0xC700" level="Error"  property="EchoReplyWrongId"          value="netif=%E[val1, NetIf:id], eid=%x[val2, NetVal:low] (valid=%x[val2, NetVal:high])" info="Wrong identifier in echo reply"/>
    <event id="11 + 0xC700" level="Error"  property="EchoReplyWrongPayload"     value="netif=%E[val1, NetIf:id]" info="Wrong payload in echo reply"/>
    <event id="12 + 0xC700" level="Op"     property="MessageTypeUnknown"        value="netif=%E[val1, NetIf:id], type=%x[val2]" val2="uint8_t" info="Message not recognised, wrong message type"/>
    <event id="13 + 0xC700" level="Op"     property="SendEchoRequest"           value="netif=%E[val1, NetIf:id]" info="Send echo request"/>
    <!-- ICMP-ping events -->
    <event id="14 + 0xC700" level="Op"     property="PingInit"                  value="ping" info="Initialize ping client"/>
    <event id="15 + 0xC700" level="API"    property="PingEcho"                  value="ip=%I[val1]" info="Ping IPv4 target address"/>
    <event id="16 + 0xC700" level="Error"  property="PingTargetNotValid"        value="error" info="Target name not valid"/>
    <event id="17 + 0xC700" level="Error"  property="PingDnsError"              value="error" info="DNS name resolver failed"/>
    <event id="18 + 0xC700" level="Error"  property="PingInvalidParameter"      value="error" info="Ping parameter invalid"/>
    <event id="19 + 0xC700" level="Error"  property="PingClientBusy"            value="error" info="Ping client busy"/>
    <event id="20 + 0xC700" level="Op"     property="PingSendRequest"           value="netif=%E[val1, NetIf:id]" info="Send ping-echo request"/>
    <event id="21 + 0xC700" level="Op"     property="PingRetransmitRequest"     value="netif=%E[val1, NetIf:id]" info="Retransmit ping-echo request"/>
    <event id="22 + 0xC700" level="Op"     property="PingTimeout"               value="netif=%E[val1, NetIf:id]" info="Ping timeout, no response received"/>
    <event id="23 + 0xC700" level="Op"     property="PingUnInit"                value="ping" info="De-initialize ping client"/>

    <!-- NetIGMP: IGMP Group Management events -->
    <event id=" 0 + 0xC800" level="Op"     property="InitManager"               value="netif=%E[val1, NetIf:id], groups=%d[val2]" info="Initialize group manager"/>
    <event id=" 1 + 0xC800" level="API"    property="Join"                      value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Join to a group membership requested"/>
    <event id=" 2 + 0xC800" level="Op"     property="AlreadyInGroup"            value="netif=%E[val1, NetIf:id], id=%d[val2]" info="Requested address is already in group"/>
    <event id=" 3 + 0xC800" level="Error"  property="NoFreeEntries"             value="netif=%E[val1, NetIf:id], used=%d[val2]" info="No free entries available in group table"/>
    <event id=" 4 + 0xC800" level="Op"     property="SendReport"                value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Send IGMP report message"/>
    <event id=" 5 + 0xC800" level="API"    property="Leave"                     value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Leave a group membership requested"/>
    <event id=" 6 + 0xC800" level="Error"  property="NotInGroup"                value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Leave failed, requested address not in a group"/>
    <event id=" 7 + 0xC800" level="Op"     property="SendLeave"                 value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Send IGMP leave message"/>
    <event id=" 8 + 0xC800" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], type=%E[val1 >> 16, IGMP_Type:id], len=%d[val2]" info="IGMP frame received"/>
    <event id=" 9 + 0xC800" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id="10 + 0xC800" level="Error"  property="ChecksumFailed"            value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Frame error, checksum check failed"/>
    <event id="11 + 0xC800" level="Op"     property="GroupSpecificQuery"        value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="IGMPv2 group specific query received"/>
    <event id="12 + 0xC800" level="Error"  property="DestAddressWrong"          value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Wrong destination address received"/>
    <event id="13 + 0xC800" level="Op"     property="DelayedReportScheduled"    value="netif=%E[val1, NetIf:id], max_time=%d[val2*100]ms" info="Delayed report message scheduled"/>
    <event id="14 + 0xC800" level="Op"     property="GeneralQuery"              value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="IGMPv1 general query received"/>
    <event id="15 + 0xC800" level="Op"     property="StartModeIGMPv1"           value="netif=%E[val1, NetIf:id]" info="Start IGMPv1 mode"/>
    <event id="16 + 0xC800" level="Op"     property="MaxTimeForReport"          value="netif=%E[val1, NetIf:id], max_time=%d[val2*100]ms" info="IGMPv2 maximum time for report messages"/>
    <event id="17 + 0xC800" level="Op"     property="GroupReportsScheduled"     value="netif=%E[val1, NetIf:id], num=%d[val2]" info="Number of group reports scheduled"/>
    <event id="23 + 0xC800" level="Op"     property="NoReportScheduled"         value="netif=%E[val1, NetIf:id]" info="No report scheduled as no active group"/>
    <event id="18 + 0xC800" level="Op"     property="ReportReceived"            value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Report message for a group received"/>
    <event id="19 + 0xC800" level="Op"     property="OwnReportCanceled"         value="netif=%E[val1, NetIf:id], id=%d[val2]" info="Own report canceled, membership already reported"/>
    <event id="20 + 0xC800" level="Op"     property="StartModeIGMPv2"           value="netif=%E[val1, NetIf:id]" info="Start IGMPv2 mode"/>
    <event id="21 + 0xC800" level="Op"     property="SendDelayedReport"         value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Send delayed IGMP report message"/>
    <event id="22 + 0xC800" level="Op"     property="UnInitManager"             value="netif=%E[val1, NetIf:id]" info="De-initialize group manager"/>

    <!-- NetNBNS: NBNS Client events -->
    <event id=" 0 + 0xC900" level="Op"     property="InitService"               value="netif=%E[val1, NetIf:id]" info="Initialize NetBIOS name service"/>
    <event id=" 1 + 0xC900" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate UDP socket"/>
    <event id=" 2 + 0xC900" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], len=%d[val2]" info="NBNS frame received"/>
    <event id=" 3 + 0xC900" level="Error"  property="WrongRemotePort"           value="netif=%E[val1, NetIf:id], port=%d[val2, NetVal:low] (valid=%d[val2, NetVal:high])" info="Wrong remote port number received"/>
    <event id=" 4 + 0xC900" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id=" 5 + 0xC900" level="Op"     property="NetBiosDisabled"           value="netif=%E[val1, NetIf:id]" info="Frame discarded, NetBIOS not enabled for the interface"/>
    <event id=" 6 + 0xC900" level="Op"     property="NameQueryRequest"          value="name=&quot;%t[val1]&quot;" info="Name query request received"/>
    <event id=" 7 + 0xC900" level="Detail" property="QueryFromAddress"          value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Display address of name query sender"/>
    <event id=" 8 + 0xC900" level="Op"     property="NameQueryResponse"         value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Send response to a name query"/>
    <event id=" 9 + 0xC900" level="Error"  property="WrongTransactionId"        value="netif=%E[val1, NetIf:id], tid=%x[val2, NetVal:low] (valid=%x[val2, NetVal:high])" info="Wrong Transaction Identifier received"/>
    <event id="10 + 0xC900" level="Error"  property="ResolveInvalidParameter"   value="netif=%E[val1, NetIf:id]" info="Resolve failed, Invalid parameter provided for the function"/>
    <event id="11 + 0xC900" level="Error"  property="ResolveNetBiosDisabled"    value="netif=%E[val1, NetIf:id]" info="Resolve failed, NetBIOS not enabled for the interface"/>
    <event id="12 + 0xC900" level="Error"  property="ResolveClientBusy"         value="netif=%E[val1, NetIf:id]" info="Resolve failed, NBNS client busy"/>
    <event id="13 + 0xC900" level="API"    property="Resolve"                   value="name=&quot;%t[val1]&quot;" info="Resolve host name requested"/>
    <event id="14 + 0xC900" level="Op"     property="ResolvedFromCache"         value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Host name resolved from cache"/>
    <event id="15 + 0xC900" level="Error"  property="ResolveTimeoutExpired"     value="netif=%E[val1, NetIf:id]" info="Resolve failed, Timeout expired"/>
    <event id="16 + 0xC900" level="Op"     property="ResolvedAddress"           value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Host name successfully resolved"/>
    <event id="17 + 0xC900" level="Error"  property="ClearCacheInvalidParam"    value="netif=%E[val1, NetIf:id]" info="Clear cache failed, Invalid parameter provided for the function"/>
    <event id="18 + 0xC900" level="Error"  property="ClrCacheNetBiosDisabled"   value="netif=%E[val1, NetIf:id]" info="Clear cache failed, NetBIOS not enabled for the interface"/>
    <event id="19 + 0xC900" level="Error"  property="ClearCacheClientBusy"      value="netif=%E[val1, NetIf:id]" info="Clear cache failed, NBNS client busy"/>
    <event id="20 + 0xC900" level="API"    property="ClearCache"                value="netif=%E[val1, NetIf:id], deleted=%d[val2, NetVal:low] (max=%d[val2, NetVal:high])" info="Clear NBNS cache requested"/>
    <event id="21 + 0xC900" level="Op"     property="ResolveRetransmit"         value="netif=%E[val1, NetIf:id]" info="Retransmit name query request message"/>
    <event id="22 + 0xC900" level="Op"     property="UnInitService"             value="netif=%E[val1, NetIf:id]" info="De-initialize NetBIOS name service"/>

    <!-- NetDHCP: DHCP Client events -->
    <event id=" 0 + 0xCA00" level="Op"     property="InitClient"                value="netif=%E[val1, NetIf:id], opt=%E[val2, DHCP_Opt:id]" info="Initialize DHCP client"/>
    <event id=" 1 + 0xCA00" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate UDP socket"/>
    <event id=" 2 + 0xCA00" level="Op"     property="StartClient"               value="netif=%E[val1, NetIf:id]" info="Start DHCP client"/>
    <event id=" 3 + 0xCA00" level="Op"     property="StopClient"                value="netif=%E[val1, NetIf:id]" info="Stop DHCP client"/>
    <event id=" 4 + 0xCA00" level="Op"     property="ClientState"               value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP_State:id]" info="Current DHCP client state"/>
    <event id=" 5 + 0xCA00" level="Op"     property="NextState"                 value="netif=%E[val1, NetIf:id], next=%E[val2, DHCP_State:id]" info="Next DHCP client state"/>
    <event id=" 6 + 0xCA00" level="Op"     property="StateRetransmit"           value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP_State:id]" info="Retransmit in current DHCP client state"/>
    <event id=" 7 + 0xCA00" level="Op"     property="ChangeStateOnTimeout"      value="netif=%E[val1, NetIf:id], state=%E[val2 &amp; 0xFF, DHCP_State:id], next=%E[val2 >> 16, DHCP_State:id]" info="State timeout, change to next state"/>
    <event id=" 8 + 0xCA00" level="Op"     property="AutoIpAddressProbe"        value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Test if selected AutoIP address in use"/>
    <event id=" 9 + 0xCA00" level="Op"     property="AutoIpSuccess"             value="netif=%E[val1, NetIf:id], ip=%I[val2], mask=%I[val3]" info="AutoIP address assigned"/>
    <event id="10 + 0xCA00" level="Op"     property="T2Expired"                 value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP_State:id]" info="Timer T2 expired"/>
    <event id="11 + 0xCA00" level="Error"  property="LeaseExpired"              value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP_State:id]" info="Address lease time expired"/>
    <event id="12 + 0xCA00" level="Op"     property="SendDhcpMessage"           value="netif=%E[val1, NetIf:id], type=%E[val2 &amp; 0xFF, DHCP_Type:id], bcast=%t[val2 >> 16 ? &quot;Yes&quot; : &quot;No&quot;]" info="Send a DHCP message"/>
    <event id="13 + 0xCA00" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], addr=%I[val2], len=%d[val1, NetVal:high]" info="DHCP frame received"/>
    <event id="14 + 0xCA00" level="Error"  property="WrongServerPort"           value="netif=%E[val1, NetIf:id], port=%d[val2, NetVal:low] (valid=%d[val2, NetVal:high])" info="Wrong server port number received"/>
    <event id="15 + 0xCA00" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id="16 + 0xCA00" level="Error"  property="MisformedReply"            value="netif=%E[val1, NetIf:id]" info="Misformed DHCP reply received"/>
    <event id="17 + 0xCA00" level="Error"  property="WrongTransactionId"        value="netif=%E[val1, NetIf:id], xid=%x[val2] (valid=%x[val3])" info="Wrong Transaction Identifier received"/>
    <event id="18 + 0xCA00" level="Error"  property="WrongClientHwAddress"      value="netif=%E[val1, NetIf:id], chaddr=%M[val1, NetVal:w1]" info="Wrong Client Hardware Address"/>
    <event id="19 + 0xCA00" level="Error"  property="WrongMagicCookie"          value="netif=%E[val1, NetIf:id], cookie=%x[val2] (valid=%x[val3])" info="Wrong BOOTP Magic Cookie"/>
    <event id="20 + 0xCA00" level="Op"     property="InvalidMessageType"        value="netif=%E[val1, NetIf:id], type=%E[val2 &amp; 0xFF, DHCP_Type:id] (valid=%E[val2 >> 16, DHCP_Type:id])" info="Invalid message type received"/>
    <event id="21 + 0xCA00" level="Op"     property="ViewMessage"               value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP_Type:id]" info="Display received message type"/>
    <event id="22 + 0xCA00" level="Detail" property="FileOverloadOptions"       value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP_Type:id]" info="Options overloaded to BOOTP-File field"/>
    <event id="23 + 0xCA00" level="Detail" property="SnameOverloadOptions"      value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP_Type:id]" info="Options overloaded to BOOTP-Sname field"/>
    <event id="24 + 0xCA00" level="Op"     property="MissingServerId"           value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP_Type:id]" info="Mandatory Server Id missing in DHCP message"/>
    <event id="25 + 0xCA00" level="Op"     property="ForwardedMessage"          value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP_Type:id]" info="Received message forwarded from relay agent"/>
    <event id="26 + 0xCA00" level="Error"  property="OfferedAddressInvalid"     value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Offered IP address verification failed"/>
    <event id="27 + 0xCA00" level="Detail" property="ViewRelayAgentAddress"     value="netif=%E[val1, NetIf:id], relay=%I[val2]" info="Display IP address of relay agent"/>
    <event id="28 + 0xCA00" level="Op"     property="ViewOfferedAddress"        value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Display offered IP address"/>
    <event id="29 + 0xCA00" level="Op"     property="ServerAddressNotSelected"  value="netif=%E[val1, NetIf:id], addr=%I[val2]" info="Message from not-selected DHCP server"/>
    <event id="30 + 0xCA00" level="Op"     property="AssignedAddrNotRequested"  value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Assigned IP address different from requested"/>
    <event id="31 + 0xCA00" level="Op"     property="ViewAssignedAddress"       value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Display assigned IP address"/>
    <event id="32 + 0xCA00" level="Op"     property="ViewServerId"              value="netif=%E[val1, NetIf:id], server_id=%I[val2]" info="Display server identifier (IP address)"/>
    <event id="33 + 0xCA00" level="Op"     property="ViewNetMask"               value="netif=%E[val1, NetIf:id], mask=%I[val2]" info="Display network mask"/>
    <event id="34 + 0xCA00" level="Op"     property="ViewGatewayAddress"        value="netif=%E[val1, NetIf:id], gw=%I[val2]" info="Display IP address of a gateway"/>
    <event id="35 + 0xCA00" level="Op"     property="ViewDnsServers"            value="netif=%E[val1, NetIf:id], pri=%I[val2], sec=%I[val3]" info="Display primary and secondary DNS server addresses"/>
    <event id="36 + 0xCA00" level="Op"     property="ViewLeaseTime"             value="netif=%E[val1, NetIf:id], time=%d[val2]s" info="Display address lease time"/>
    <event id="37 + 0xCA00" level="Op"     property="ViewTimeT1"                value="netif=%E[val1, NetIf:id], t1=%d[val2]s" info="Display renewal time T1"/>
    <event id="38 + 0xCA00" level="Op"     property="ViewTimeT2"                value="netif=%E[val1, NetIf:id], t2=%d[val2]s" info="Display rebinding time T2"/>
    <event id="39 + 0xCA00" level="Op"     property="ViewBootfileName"          value="bootfile=&quot;%t[val1]&quot;" info="Display Bootfile name"/>
    <event id="40 + 0xCA00" level="Op"     property="ViewNtpServerList"         info="Display a list of NTP servers">
      <print cond="(val1 >> 18 == 1)"      property="ViewNtpServerList1"        value="netif=%E[val1, NetIf:id], ntp=%I[val2]"/>
      <print cond="(val1 >> 18 == 2)"      property="ViewNtpServerList2"        value="netif=%E[val1, NetIf:id], ntp=%I[val2], ntp2=%I[val3]"/>
      <print cond="(val1 >> 18 == 3)"      property="ViewNtpServerList3"        value="netif=%E[val1, NetIf:id], ntp=%I[val2], ntp2=%I[val3], ntp3=%I[val4]"/>
    </event>
    <event id="41 + 0xCA00" level="Error"  property="SetOptionInvalidParam"     value="netif=%E[val1, NetIf:id]" info="Set option failed, invalid parameter"/>
    <event id="42 + 0xCA00" level="Error"  property="SetOptionInvalidState"     value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP_State:Id]" info="Set option failed, invalid DHCP client state"/>
    <event id="43 + 0xCA00" level="API"    property="SetOptionClientIdDefault"  value="netif=%E[val1, NetIf:id], type=%d[val2]" info="Set Client-identifier option to default"/>
    <event id="44 + 0xCA00" level="API"    property="SetOptionClientId"         value="netif=%E[val1, NetIf:id], type=%d[val2, NetVal:high], len=%d[val2, NetVal:low]" info="Set Client-identifier option to user defined"/>
    <event id="45 + 0xCA00" level="Op"     property="UnInitClient"              value="netif=%E[val1, NetIf:id]" info="De-initialize DHCP client"/>

    <!-- NetARP: ARP Client events -->
    <event id=" 0 + 0xCB00" level="Op"     property="InitCache"                 value="netif=%E[val1, NetIf:id], entries=%d[val2]" info="Initialize address resolution and ARP cache"/>
    <event id=" 1 + 0xCB00" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], opcode=%E[val2>>16, ARP_Opcode:id], len=%d[val2, NetVal:low]" info="ARP frame received"/>
    <event id=" 2 + 0xCB00" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id=" 3 + 0xCB00" level="Error"  property="FrameCorrupted"            value="netif=%E[val1, NetIf:id]" info="Corrupted ARP frame received"/>
    <event id=" 4 + 0xCB00" level="Detail" property="ShowFrameHeader"           value="op=%E[val1, ARP_Header:OpCode], spa=%I[val1, ARP_Header:SendIp], tpa=%I[val1, ARP_Header:TargIp], sha=%M[val1, ARP_Header:SendHw], tha=%M[val1, ARP_Header:TargHw]" info="Display ARP frame header content"/>
    <event id=" 5 + 0xCB00" level="Op"     property="SenderAddressInvalid"      value="netif=%E[val1, NetIf:id]" info="Discard, sender IP/MAC address invalid"/>
    <event id=" 6 + 0xCB00" level="Op"     property="CacheEntryUpdate"          value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Cache entry update on receiving a gratuitus ARP"/>
    <event id=" 7 + 0xCB00" level="Op"     property="ProbeResponseReceived"     value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Address probe response received"/>
    <event id=" 8 + 0xCB00" level="Op"     property="WrongIpAddress"            value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Discard, wrong target IP address"/>
    <event id=" 9 + 0xCB00" level="Op"     property="WrongMacAddress"           value="netif=%E[val1, NetIf:id], mac=%M[val1, NetVal:w1]" info="Discard, wrong target MAC address"/>
    <event id="10 + 0xCB00" level="Op"     property="OpcodeUnknown"             value="netif=%E[val1, NetIf:id], opcode=%x[val2]" val2="uint16_t" info="Unknown opcode received"/>
    <event id="11 + 0xCB00" level="Op"     property="SendReply"                 value="netif=%E[val1, NetIf:id], opcode=%E[val2, ARP_Opcode:id]" info="Send reply message"/>
    <event id="12 + 0xCB00" level="Op"     property="CacheEntryRefreshed"       value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Cache entry refreshed"/>
    <event id="13 + 0xCB00" level="Error"  property="WrongResponse"             value="netif=%E[val1, NetIf:id]" info="Wrong response received"/>
    <event id="14 + 0xCB00" level="Op"     property="SendRequest"               value="netif=%E[val1, NetIf:id], opcode=%E[val2, ARP_Opcode:id]" info="Send request message"/>
    <event id="15 + 0xCB00" level="Error"  property="CacheAllocFailed"          value="netif=%E[val1, NetIf:id]" info="Failed to allocate free entry in ARP cache"/>
    <event id="16 + 0xCB00" level="Op"     property="CacheIpRefreshed"          value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Cached IP address refreshed"/>
    <event id="17 + 0xCB00" level="Op"     property="CacheAdd"                  value="netif=%E[val1, NetIf:id], ip=%I[val1, ARP_Cache:IpAddr], mac=%M[val1, ARP_Cache:MacAddr]" info="Add host IP and MAC address to ARP cache"/>
    <event id="18 + 0xCB00" level="Error"  property="GatewayUnknown"            value="netif=%E[val1, NetIf:id], gw=%I[val2]" info="Default gateway address not known"/>
    <event id="19 + 0xCB00" level="Op"     property="CacheEntryAdded"           value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Cache entry added"/>
    <event id="20 + 0xCB00" level="Op"     property="CacheEarly"                value="netif=%E[val1, NetIf:id], ip=%I[val1, ARP_Cache:IpAddr], mac=%M[val1, ARP_Cache:MacAddr]" info="Early cache IP and MAC address of the sender"/>
    <event id="21 + 0xCB00" level="Op"     property="CacheFind"                 value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Find requested IP address in ARP cache"/>
    <event id="22 + 0xCB00" level="Op"     property="UsingGateway"              value="netif=%E[val1, NetIf:id], gw=%I[val2]" info="Using gateway to access requested IP address"/>
    <event id="23 + 0xCB00" level="Error"  property="UnresolvedMacAddress"      value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Unresolved MAC address in cache"/>
    <event id="24 + 0xCB00" level="Op"     property="EntryFound"                value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Cache entry found"/>
    <event id="25 + 0xCB00" level="API"    property="CacheIp"                   value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Resolve MAC address from ARP cache"/>
    <event id="26 + 0xCB00" level="Error"  property="CacheIpInvalidParameter"   value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="27 + 0xCB00" level="API"    property="CacheMac"                  value="netif=%E[val1, NetIf:id], mac=%M[val1, NetVal:w1]" info="Resolve IP address from ARP cache"/>
    <event id="28 + 0xCB00" level="Error"  property="CacheMacInvalidParameter"  value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="29 + 0xCB00" level="Error"  property="UnresolvedIpAddress"       value="netif=%E[val1, NetIf:id], mac=%M[val1, NetVal:w1]" info="Resolve IP address in progress"/>
    <event id="30 + 0xCB00" level="API"    property="GetIp"                     value="netif=%E[val1, NetIf:id], ip=%I[val1, ARP_Cache:IpAddr], mac=%M[val1, ARP_Cache:MacAddr]" info="Get IP address from the ARP cache"/>
    <event id="31 + 0xCB00" level="Error"  property="GetIpInvalidParameter"     value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="32 + 0xCB00" level="Op"     property="GetIpEntryNotFound"        value="netif=%E[val1, NetIf:id], mac=%M[val1, NetVal:w1]" info="IP address not found in ARP cache"/>
    <event id="33 + 0xCB00" level="API"    property="GetMac"                    value="netif=%E[val1, NetIf:id], mac=%M[val1, ARP_Cache:MacAddr], ip=%I[val1, ARP_Cache:IpAddr]" info="Get MAC address from the ARP cache"/>
    <event id="34 + 0xCB00" level="Error"  property="GetMacInvalidParameter"    value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="35 + 0xCB00" level="Op"     property="GetMacEntryNotFound"       value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="MAC address not found in ARP cache"/>
    <event id="36 + 0xCB00" level="API"    property="Probe"                     value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Probe IP address if already in use"/>
    <event id="37 + 0xCB00" level="Error"  property="ProbeInvalidParameter"     value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="38 + 0xCB00" level="Error"  property="ProbeBusy"                 value="netif=%E[val1, NetIf:id]" info="Probe failed, process busy"/>
    <event id="39 + 0xCB00" level="Op"     property="ProbeRetransmit"           value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Retransmit ARP-probe request"/>
    <event id="40 + 0xCB00" level="Op"     property="ProbeTimeout"              value="netif=%E[val1, NetIf:id], ip=%I[val2]" info="Probe timeout expired, no response"/>
    <event id="49 + 0xCB00" level="API"    property="AddCache"                  value="netif=%E[val1, NetIf:id], ip=%I[val1, ARP_Cache:IpAddr], mac=%M[val1, ARP_Cache:MacAddr]" info="Add static IP and MAC address in ARP cache"/>
    <event id="50 + 0xCB00" level="Error"  property="AddCacheInvalidParam"      value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="51 + 0xCB00" level="Error"  property="AddCacheInvalidIpAddress"  value="netif=%E[val1, NetIf:id]" info="Invalid IP address parameter provided for the function"/>
    <event id="52 + 0xCB00" level="Error"  property="AddCacheInvalidMacAddress" value="netif=%E[val1, NetIf:id]" info="Invalid MAC address parameter provided for the function"/>
    <event id="46 + 0xCB00" level="API"    property="ClearCache"                value="netif=%E[val1, NetIf:id], deleted=%d[val2, NetVal:low] (max=%d[val2, NetVal:high])" info="Clear ARP cache requested"/>
    <event id="47 + 0xCB00" level="Error"  property="ClearCacheInvalidParam"    value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="48 + 0xCB00" level="Error"  property="ClearCacheClientBusy"      value="netif=%E[val1, NetIf:id]" info="Clear ARP cache request failed, ARP client busy"/>
    <event id="41 + 0xCB00" level="Op"     property="CacheEntryTimeout"         value="netif=%E[val1, NetIf:id], entry=%d[val1, ARP_Cache:Num], type=%E[val1, ARP_Cache:Type], ip=%I[val1, ARP_Cache:IpAddr], mac=%M[val1, ARP_Cache:MacAddr]" info="Cache entry timeout"/>
    <event id="42 + 0xCB00" level="Op"     property="EntryReleased"             value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Cache entry released from cache"/>
    <event id="43 + 0xCB00" level="Op"     property="ResolveEntry"              value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Resolve entry on timeout, resend ARP request"/>
    <event id="44 + 0xCB00" level="Op"     property="RefreshEntry"              value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Refresh entry on timeout"/>
    <event id="45 + 0xCB00" level="Op"     property="UnInitCache"               value="netif=%E[val1, NetIf:id]" info="De-initialize address resolution and ARP cache"/>

    <!-- NetIP6: IP6 Core events -->
    <event id=" 0 + 0xCC00" level="Op"     property="InitCore"                  value="default=%E[val1, NetIf:id]" info="Initialize IPv6 core"/>
    <event id=" 1 + 0xCC00" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], len=%d[val2]" info="IPv6 frame received"/>
    <event id=" 2 + 0xCC00" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id=" 3 + 0xCC00" level="Error"  property="InvalidIpVersion"          value="netif=%E[val1, NetIf:id], ver=%d[val2]" info="Discard frame, invalid IP version"/>
    <event id=" 4 + 0xCC00" level="Detail" property="ShowFrameHeader"           value="dst=%J[val1, IP6_Header:DstAddr], src=%J[val1, IP6_Header:SrcAddr], proto=%E[val1, IP6_Header:NextHdr], hops=%d[val1, IP6_Header:HopLim], len=%d[val1, IP6_Header:Len]" info="Display IPv6 frame header content"/>
    <event id=" 5 + 0xCC00" level="Op"     property="WrongDestinationAddress"   value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Frame with wrong destination address received"/>
    <event id=" 6 + 0xCC00" level="Error"  property="InterfaceNotSupported"     value="netif=%E[val1, NetIf:id]" info="Requested network interface not supported"/>
    <event id=" 7 + 0xCC00" level="Error"  property="WrongMulticastProtocol"    value="netif=%E[val1, NetIf:id], proto=%E[val2, IP6_Proto:id]" info="Frame with invalid multicast protocol type received"/>
    <event id="14 + 0xCC00" level="Error"  property="FragmentationDisabled"     value="netif=%E[val1, NetIf:id]" info="Fragmented frames not enabled for interface"/>
    <event id=" 8 + 0xCC00" level="Op"     property="SendFrame"                 value="netif=%E[val1, NetIf:id], proto=%E[val2, IP6_Proto:id], len=%d[val2, NetVal:high]" info="Send IPv6 frame"/>
    <event id=" 9 + 0xCC00" level="Error"  property="ProtocolUnknown"           value="netif=%E[val1, NetIf:id], proto=%d[val2]" info="Send failed, unknown protocol type"/>
    <event id="10 + 0xCC00" level="Error"  property="SourceAddressNull"         value="netif=%E[val1, NetIf:id]" info="Send failed, source address not provided"/>
    <event id="11 + 0xCC00" level="Error"  property="DestinationAddressNull"    value="netif=%E[val1, NetIf:id]" info="Send failed, destination address not provided"/>
    <event id="12 + 0xCC00" level="Op"     property="SetDefaultInterface"       value="netif=%E[val1, NetIf:id]" info="Set default IPv6 inteface for internet access"/>
    <event id="13 + 0xCC00" level="Op"     property="UnInitCore"                value="ip6" info="De-initialize IPv6 core"/>

    <!-- NetICMP6: ICMPv6 Control events -->
    <event id=" 0 + 0xCD00" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], len=%d[val2]" info="ICMPv6 frame received"/>
    <event id="25 + 0xCD00" level="Detail" property="ShowFrameHeader"           value="type=%E[val1, ICMP6_Header:Type], code=%d[val1, ICMP6_Header:Code], cksum=%x[val1, ICMP6_Header:Chksum]" info="Display ICMPv6 frame header content"/>
    <event id=" 1 + 0xCD00" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id=" 2 + 0xCD00" level="Error"  property="ChecksumFailed"            value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Frame error, checksum check failed"/>
    <event id=" 3 + 0xCD00" level="Error"  property="EchoRequestWrongCode"      value="netif=%E[val1, NetIf:id], code=%d[val2, NetVal:low] (valid=%d[val2, NetVal:high])" info="Wrong code in echo request received"/>
    <event id=" 4 + 0xCD00" level="Op"     property="EchoRequestReceived"       value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Echo request received"/>
    <event id="26 + 0xCD00" level="Op"     property="EchoReplyDisabled"         value="netif=%E[val1, NetIf:id]" info="Frame discarded, Echo response not enabled for the interface"/>
    <event id=" 5 + 0xCD00" level="Op"     property="SendEchoReply"             value="netif=%E[val1, NetIf:id]" info="Send echo reply"/>
    <event id=" 6 + 0xCD00" level="Op"     property="EchoReplyReceived"         value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Echo reply received"/>
    <event id=" 7 + 0xCD00" level="Error"  property="EchoReplyWrongState"       value="netif=%E[val1, NetIf:id]" info="Echo reply received in wrong ping process state"/>
    <event id=" 8 + 0xCD00" level="Error"  property="EchoReplyWrongCode"        value="netif=%E[val1, NetIf:id], code=%d[val2, NetVal:low] (valid=%d[val2, NetVal:high])" info="Wrong code in echo reply received"/>
    <event id=" 9 + 0xCD00" level="Error"  property="EchoReplyWrongIpAddress"   value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Wrong source IP address in echo reply"/>
    <event id="10 + 0xCD00" level="Error"  property="EchoReplyWrongId"          value="netif=%E[val1, NetIf:id], eid=%x[val2, NetVal:low] (valid=%x[val2, NetVal:high])" val1="uint16_t" val2="uint16_t" info="Wrong identifier in echo reply"/>
    <event id="11 + 0xCD00" level="Error"  property="EchoReplyWrongPayload"     value="netif=%E[val1, NetIf:id]" info="Wrong payload in echo reply"/>
    <event id="12 + 0xCD00" level="Op"     property="MessageDiscarded"          value="netif=%E[val1, NetIf:id], type=%E[val2, ICMP6_Type:id]" info="Router discover message discarded"/>
    <event id="13 + 0xCD00" level="Error"  property="WrongHopLimit"             value="netif=%E[val1, NetIf:id], hop_limit=%d[val2, NetVal:low] (valid=%d[val2, NetVal:high])" info="Wrong hop limit in discover message"/>
    <event id="14 + 0xCD00" level="Error"  property="WrongCode"                 value="netif=%E[val1, NetIf:id], code=%d[val2, NetVal:low] (valid=%d[val2, NetVal:high])" info="Wrong code in discover message"/>
    <event id="15 + 0xCD00" level="Op"     property="MessageTypeUnknown"        value="netif=%E[val1, NetIf:id], type=%x[val2]" val1="uint8_t" info="Message not recognised, wrong message type"/>
    <event id="16 + 0xCD00" level="Op"     property="SendFrame"                 value="netif=%E[val1, NetIf:id], len=%d[val2]" info="Send ICMPv6 frame"/>
    <!-- ICMP6-ping events -->
    <event id="17 + 0xCD00" level="API"    property="PingEcho"                  value="ip=%J[val1]" info="Ping IPv6 target address"/>
    <event id="18 + 0xCD00" level="Error"  property="PingTargetNotValid"        value="error" info="Target name not valid"/>
    <event id="19 + 0xCD00" level="Error"  property="PingDnsError"              value="error" info="DNS name resolver failed"/>
    <event id="20 + 0xCD00" level="Error"  property="PingInvalidParameter"      value="error" info="Ping parameter invalid"/>
    <event id="21 + 0xCD00" level="Error"  property="PingClientBusy"            value="error" info="Ping client busy"/>
    <event id="22 + 0xCD00" level="Op"     property="PingSendRequest"           value="netif=%E[val1, NetIf:id]" info="Send ping-echo request"/>
    <event id="23 + 0xCD00" level="Op"     property="PingRetransmitRequest"     value="netif=%E[val1, NetIf:id]" info="Retransmit ping-echo request"/>
    <event id="24 + 0xCD00" level="Op"     property="PingTimeout"               value="netif=%E[val1, NetIf:id]" info="Ping timeout, no response received"/>

    <!-- NetDHCP6: DHCPv6 Client events -->
    <event id=" 0 + 0xCE00" level="Op"     property="InitClient"                value="netif=%E[val1, NetIf:id], opt=%E[val2, DHCP6_Opt:id]" info="Initialize DHCPv6 client"/>
    <event id=" 1 + 0xCE00" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate UDP socket"/>
    <event id=" 2 + 0xCE00" level="Op"     property="StartClient"               value="netif=%E[val1, NetIf:id], mode=%E[val2, DHCP6_Mode:id]" info="Start DHCPv6 client"/>
    <event id=" 3 + 0xCE00" level="Op"     property="StopClient"                value="netif=%E[val1, NetIf:id]"  info="Stop DHCPv6 client"/>
    <event id=" 4 + 0xCE00" level="Op"     property="ClientState"               value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP6_State:id]" info="Current DHCPv6 client state"/>
    <event id=" 5 + 0xCE00" level="Op"     property="NextState"                 value="netif=%E[val1, NetIf:id], next=%E[val2, DHCP6_State:id]" info="Next DHCPv6 client state"/>
    <event id=" 6 + 0xCE00" level="Op"     property="NextStateDelay"            value="netif=%E[val1, NetIf:id], next=%E[val2, DHCP6_State:id], delay=%d[val2, NetVal:high]00ms" info="Next DHCPv6 client state with random delay"/>
    <event id=" 7 + 0xCE00" level="Op"     property="ChangeStateLinkDown"       value="netif=%E[val1, NetIf:id], next=%E[val2, DHCP6_State:id]" info="Change DHCPv6 client state on link-down event"/>
    <event id=" 8 + 0xCE00" level="Op"     property="NoAddressAvailable"        value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP6_State:id]" info="No address available status received"/>
    <event id=" 9 + 0xCE00" level="Op"     property="StateRetransmit"           value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP6_State:id]" info="Retransmit in current DHCPv6 client state"/>
    <event id="10 + 0xCE00" level="Op"     property="StateTimeout"              value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP6_State:id]" info="Timeout expired in current DHCPv6 client state"/>
    <event id="11 + 0xCE00" level="Op"     property="ChangeStateOnTimeout"      value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP6_State:id], next=%E[val2>>16, DHCP6_State:id]" info="State timeout, change to next state"/>
    <event id="12 + 0xCE00" level="Op"     property="T1Expired"                 value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP6_State:id]" info="Timer T1 expired in current state"/>
    <event id="13 + 0xCE00" level="Op"     property="T2Expired"                 value="netif=%E[val1, NetIf:id], state=%E[val2, DHCP6_State:id]" info="Timer T2 expired in current state"/>
    <event id="14 + 0xCE00" level="Op"     property="SendDhcpMessage"           value="netif=%E[val1, NetIf:id], type=%E[val1>>16, DHCP6_Type:id], xid=%x[val2]" info="Send a DHCPv6 message"/>
    <event id="15 + 0xCE00" level="Op"     property="ReceiveFrame"              value="netif=%E[val1, NetIf:id], len=%d[val2]" info="DHCPv6 frame received"/>
    <event id="16 + 0xCE00" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id="17 + 0xCE00" level="Error"  property="WrongTransactionId"        value="netif=%E[val1, NetIf:id], xid=%x[val2] (valid=%x[val3])" info="Wrong Transaction Identifier received"/>
    <event id="18 + 0xCE00" level="Error"  property="MessageTypeUnknown"        value="netif=%E[val1, NetIf:id], type=%d[val2]" info="Unknown message type received"/>
    <event id="19 + 0xCE00" level="Op"     property="ViewMessage"               value="netif=%E[val1, NetIf:id], type=%E[val1>>16, DHCP6_Type:id], xid=%x[val2]" info="Display message type and transaction identifier"/>
    <event id="20 + 0xCE00" level="Op"     property="InvalidMessageType"        value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP6_Type:id] (valid=%E[val2>>16, DHCP6_Type:id])" info="Invalid message type received"/>
    <event id="21 + 0xCE00" level="Op"     property="WrongClientId"             value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP6_Type:id]" info="Wrong client identifier received"/>
    <event id="22 + 0xCE00" level="Op"     property="ServerNotChosen"           value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP6_Type:id]" info="Server not chosen"/>
    <event id="23 + 0xCE00" level="Op"     property="StatusCode"                value="netif=%E[val1, NetIf:id], status=%E[val2, DHCP6_Status:id]" info="Status code option received"/>
    <event id="24 + 0xCE00" level="Op"     property="WrongServerId"             value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP6_Type:id]" info="Wrong server identifier received"/>
    <event id="25 + 0xCE00" level="Op"     property="ViewDnsServers"            value="netif=%E[val1, NetIf:id], pri=%J[val1, DHCP6_DNS:PriDNS], sec=%J[val1, DHCP6_DNS:SecDNS]" info="Display primary and secondary DNS server addresses"/>
    <event id="26 + 0xCE00" level="Op"     property="MissingServerId"           value="netif=%E[val1, NetIf:id], type=%E[val2, DHCP6_Type:id]" info="No server identifier option in received frame"/>
    <event id="27 + 0xCE00" level="Op"     property="WrongIaid"                 value="netif=%E[val1, NetIf:id], iaid=%x[val2] (valid=%x[val3])" info="Wrong identity association identifier received"/>
    <event id="28 + 0xCE00" level="Op"     property="ViewIanaOffer"             value="addr=%J[val1, DHCP6_IANA:Addr], valid=%d[val1, DHCP6_IANA:ValidTime]s, prefrd=%d[val1, DHCP6_IANA:PrefTime]s, t1=%d[val1, DHCP6_IANA:T1]s, t2=%d[val1, DHCP6_IANA:T2]s" info="Display offered address and timers"/>
    <event id="29 + 0xCE00" level="Error"  property="OfferTimerCheckFailed"     value="netif=%E[val1, NetIf:id]" info="Offered address timer check failed"/>
    <event id="30 + 0xCE00" level="Op"     property="UnInitClient"              value="netif=%E[val1, NetIf:id]" info="De-initialize DHCPv6 client"/>

    <!-- NetNDP: NDP Neighbor Discovery events -->
    <event id=" 0 + 0xCF00" level="Op"     property="InitCache"                 value="netif=%E[val1, NetIf:id], entries=%d[val2]" info="Initialize neighbor discovery and NDP cache"/>
    <event id=" 1 + 0xCF00" level="Error"  property="FrameCheckFailed"          value="netif=%E[val1, NetIf:id], type=%E[val2, ICMP6_Type:id]" info="Discovery frame consistency check failed"/>
    <event id=" 2 + 0xCF00" level="Op"     property="AddressNotLinkLocal"       value="netif=%E[val1, NetIf:id], src_addr=%J[val2]" info="Source IPv6 address is not link-local"/>
    <event id=" 3 + 0xCF00" level="Op"     property="RouterAdvertisement"       value="netif=%E[val1, NetIf:id], hop_limit=%d[val2, NetVal:b2], flags=%x[val2, NetVal:b3], lifetime=%d[val2, NetVal:low]s" info="Router advertisement message received"/>
    <event id=" 4 + 0xCF00" level="Op"     property="OptionMtu"                 value="netif=%E[val1, NetIf:id], mtu=%d[val2]" info="NDP option maximum transfer unit"/>
    <event id=" 5 + 0xCF00" level="Op"     property="OptionSourceMacAddress"    value="netif=%E[val1, NetIf:id], addr=%M[val1, NetVal:w1]" info="NDP option source link-layer address"/>
    <event id=" 6 + 0xCF00" level="Op"     property="OptionPrefixInfo"          value="prefix=%J[val1, NDP_Prefix:Addr]/%d[val1, NDP_Prefix:PrefLen], valid=%d[val1, NDP_Prefix:ValTime]s, prefrd=%d[val1, NDP_Prefix:PrefTime]s, flags=%x[val1, NDP_Prefix:Flags]" info="NDP option address prefix info"/>
    <event id=" 7 + 0xCF00" level="Op"     property="PrefixInfoNotValid"        value="netif=%E[val1, NetIf:id]" info="NDP Option address prefix information not valid"/>
    <event id=" 8 + 0xCF00" level="Op"     property="WrongTargetAddress"        value="netif=%E[val1, NetIf:id], targ_addr=%J[val2]" info="Wrong target address received"/>
    <event id=" 9 + 0xCF00" level="Op"     property="NeighborSolicitation"      value="netif=%E[val1, NetIf:id], targ_addr=%J[val2]" info="Neighbor solicitation message received"/>
    <event id="10 + 0xCF00" level="Op"     property="ProbeRequest"              value="netif=%E[val1, NetIf:id]" info="Neighbor probe request received"/>
    <event id="11 + 0xCF00" level="Op"     property="NeighborAdvertisement"     value="netif=%E[val1, NetIf:id], targ_addr=%J[val2]" info="Neighbor advertisement message received"/>
    <event id="12 + 0xCF00" level="Op"     property="ProbeResponse"             value="netif=%E[val1, NetIf:id]" info="Neighbor probe response received"/>
    <event id="13 + 0xCF00" level="Op"     property="WrongDestinationAddress"   value="netif=%E[val1, NetIf:id], dst_addr=%J[val2]" info="Wrong destination address received"/>
    <event id="14 + 0xCF00" level="Op"     property="SendReply"                 value="netif=%E[val1, NetIf:id], targ_addr=%J[val2]" info="Send advertisement reply to solicitation message"/>
    <event id="15 + 0xCF00" level="Op"     property="ViewFlags"                 value="netif=%E[val1, NetIf:id], flags=%x[val2]" info="Display advertisement message flags"/>
    <event id="16 + 0xCF00" level="Op"     property="SendRequest"               value="netif=%E[val1, NetIf:id], type=%E[val2, ICMP6_Type:id]" info="Send neighbor or router solicitation message"/>
    <event id="17 + 0xCF00" level="Op"     property="ViewTargetAddress"         value="netif=%E[val1, NetIf:id], targ_addr=%J[val2]" info="Display target IPv6 address"/>
    <event id="18 + 0xCF00" level="Op"     property="OptionTargetMacAddress"    value="netif=%E[val1, NetIf:id], addr=%M[val1, NetVal:w1]" info="NDP option target link-layer address"/>
    <event id="19 + 0xCF00" level="Op"     property="CacheEntryUpdate"          value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="NDP Cache entry update"/>
    <event id="20 + 0xCF00" level="Error"  property="WrongResponse"             value="netif=%E[val1, NetIf:id], type=%E[val2, ICMP6_Type:id]" info="Wrong response received"/>
    <event id="21 + 0xCF00" level="Op"     property="MakeLinkLocalAddress"      value="netif=%E[val1, NetIf:id], local_addr=%J[val2]" info="Make link-local address from the MAC address using EUI-64"/>
    <event id="22 + 0xCF00" level="Op"     property="MakeTempAddress"           value="netif=%E[val1, NetIf:id], temp_addr=%J[val2]" info="Make temporary address using prefix info"/>
    <event id="23 + 0xCF00" level="Op"     property="CacheIpRefreshed"          value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Cached IPv6 address refreshed"/>
    <event id="24 + 0xCF00" level="Op"     property="CacheAdd"                  value="netif=%E[val1, NetIf:id], ip=%J[val1, NDP_Cache:IpAddr], mac=%M[val1, NDP_Cache:MacAddr], type=%E[val1, NDP_Cache:Type]" info="Add host IPv6 and MAC address to NDP cache"/>
    <event id="25 + 0xCF00" level="Op"     property="RouterListFull"            value="netif=%E[val1, NetIf:id], max_count=%d[val2]" info="Add entry to NDP router cache failed"/>
    <event id="26 + 0xCF00" level="Error"  property="CacheAllocFailed"          value="netif=%E[val1, NetIf:id]" info="Failed to allocate free entry in NDP cache"/>
    <event id="27 + 0xCF00" level="Op"     property="CacheEntryAdded"           value="netif=%E[val1, NetIf:id], entry=%d[val1, NetVal:high], tout=%d[val2]s" info="Cache entry added with timeout"/>
    <event id="28 + 0xCF00" level="Op"     property="CacheEntryDeleted"         value="netif=%E[val1, NetIf:id], entry=%d[val1, NDP_Cache:Num], ip=%J[val1, NDP_Cache:IpAddr], type=%E[val1, NDP_Cache:Type]" info="Cache entry deleted from NDP cache"/>
    <event id="29 + 0xCF00" level="Op"     property="CacheEntryRefreshed"       value="netif=%E[val1, NetIf:id], entry=%d[val1, NDP_Cache:Num], ip=%J[val1, NDP_Cache:IpAddr]" info="Cache entry refreshed in NDP cache"/>
    <event id="30 + 0xCF00" level="Op"     property="CacheFind"                 value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Find requested IPv6 address in NDP cache"/>
    <event id="31 + 0xCF00" level="Error"  property="GatewayUnknown"            value="netif=%E[val1, NetIf:id], gw=%J[val2]" info="Default gateway address not known"/>
    <event id="32 + 0xCF00" level="Op"     property="UsingGateway"              value="netif=%E[val1, NetIf:id], gw=%J[val2]" info="Using gateway to access requested IPv6 address"/>
    <event id="33 + 0xCF00" level="Error"  property="UnresolvedMacAddress"      value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Unresolved MAC address in cache"/>
    <event id="34 + 0xCF00" level="Op"     property="EntryFound"                value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Cache entry found"/>
    <event id="35 + 0xCF00" level="API"    property="CacheIp"                   value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Resolve MAC address from NDP cache"/>
    <event id="36 + 0xCF00" level="Error"  property="CacheIpInvalidParameter"   value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="37 + 0xCF00" level="API"    property="GetIp"                     value="netif=%E[val1, NetIf:id], ip=%J[val1, NDP_Cache:IpAddr], mac=%M[val1, NDP_Cache:MacAddr]" info="Get IPv6 address from the NDP cache"/>
    <event id="38 + 0xCF00" level="Error"  property="GetIpInvalidParameter"     value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="39 + 0xCF00" level="Op"     property="GetIpEntryNotFound"        value="netif=%E[val1, NetIf:id], mac=%M[val1, NetVal:w1]" info="IPv6 address not found in NDP cache"/>
    <event id="40 + 0xCF00" level="API"    property="GetMac"                    value="netif=%E[val1, NetIf:id], mac=%M[val1, NDP_Cache:MacAddr], ip=%J[val1, NDP_Cache:IpAddr]" info="Get MAC address from the NDP cache"/>
    <event id="41 + 0xCF00" level="Error"  property="GetMacInvalidParameter"    value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="42 + 0xCF00" level="Op"     property="GetMacEntryNotFound"       value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="MAC address not found in NDP cache"/>
    <event id="43 + 0xCF00" level="API"    property="Probe"                     value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Probe IPv6 address if already in use"/>
    <event id="44 + 0xCF00" level="Error"  property="ProbeInvalidParameter"     value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="45 + 0xCF00" level="Error"  property="ProbeBusy"                 value="netif=%E[val1, NetIf:id]" info="Probe failed, process busy"/>
    <event id="46 + 0xCF00" level="Op"     property="ProbeRetransmit"           value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Retransmit NDP-probe request"/>
    <event id="47 + 0xCF00" level="Op"     property="ProbeTimeout"              value="netif=%E[val1, NetIf:id], ip=%J[val2]" info="Probe timeout expired, no response"/>
    <event id="53 + 0xCF00" level="API"    property="ClearCache"                value="netif=%E[val1, NetIf:id], deleted=%d[val2, NetVal:low] (max=%d[val2, NetVal:high])" info="Clear NDP cache requested"/>
    <event id="54 + 0xCF00" level="Error"  property="ClearCacheInvalidParam"    value="netif=%E[val1, NetIf:id]" info="Invalid parameter provided for the function"/>
    <event id="55 + 0xCF00" level="Error"  property="ClearCacheClientBusy"      value="netif=%E[val1, NetIf:id]" info="Clear NDP cache request failed, NDP client busy"/>
    <event id="48 + 0xCF00" level="Op"     property="CacheEntryTimeout"         value="netif=%E[val1, NetIf:id], entry=%d[val1, NDP_Cache:Num], type=%E[val1, NDP_Cache:Type], ip=%J[val1, NDP_Cache:IpAddr], mac=%M[val1, NDP_Cache:MacAddr]" info="Cache entry timeout"/>
    <event id="49 + 0xCF00" level="Op"     property="EntryReleased"             value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Cache entry released from cache"/>
    <event id="50 + 0xCF00" level="Op"     property="ResolveEntry"              value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Resolve entry on timeout, resend NDP solicitation request"/>
    <event id="51 + 0xCF00" level="Op"     property="RefreshEntry"              value="netif=%E[val1, NetIf:id], entry=%d[val2]" info="Refresh entry on timeout"/>
    <event id="52 + 0xCF00" level="Op"     property="UnInitCache"               value="netif=%E[val1, NetIf:id]" info="De-initialize neighbor discovery and NDP cache"/>

    <!-- NetMLD: MLD Multicast Listener Discovery events -->
    <event id=" 0 + 0xDE00" level="Op"     property="InitNode"                  value="netif=%E[val1, NetIf:id], groups=%d[val2]" info="Initialize multicast listener node"/>
    <event id=" 1 + 0xDE00" level="API"    property="Join"                      value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Join to a group membership requested"/>
    <event id=" 2 + 0xDE00" level="Op"     property="AlreadyInGroup"            value="netif=%E[val1, NetIf:id], id=%d[val2]" info="Requested address is already in group"/>
    <event id=" 3 + 0xDE00" level="Error"  property="NoFreeEntries"             value="netif=%E[val1, NetIf:id], used=%d[val2]" info="No free entries available in group table"/>
    <event id=" 4 + 0xDE00" level="Op"     property="SendReport"                value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Send MLD report message"/>
    <event id=" 5 + 0xDE00" level="API"    property="Leave"                     value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Leave a group membership requested"/>
    <event id=" 6 + 0xDE00" level="Error"  property="NotInGroup"                value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Leave failed, requested address not in a group"/>
    <event id=" 7 + 0xDE00" level="Op"     property="SendLeave"                 value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Send MLD leave message"/>
    <event id=" 8 + 0xDE00" level="Error"  property="FrameTooShort"             value="netif=%E[val1, NetIf:id], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id=" 9 + 0xDE00" level="Op"     property="AddressSpecificQuery"      value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Address specific query received"/>
    <event id="10 + 0xDE00" level="Error"  property="DestAddressWrong"          value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Wrong destination address received"/>
    <event id="11 + 0xDE00" level="Op"     property="DelayedReportScheduled"    value="netif=%E[val1, NetIf:id], max_time=%d[val2]ms" info="Delayed report message scheduled"/>
    <event id="12 + 0xDE00" level="Op"     property="GeneralQuery"              value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="General query received"/>
    <event id="13 + 0xDE00" level="Op"     property="MaxTimeForReport"          value="netif=%E[val1, NetIf:id], max_time=%d[val2]ms" info="Maximum delay for report messages"/>
    <event id="14 + 0xDE00" level="Op"     property="GroupReportsScheduled"     value="netif=%E[val1, NetIf:id], num=%d[val2]" info="Number of group reports scheduled"/>
    <event id="15 + 0xDE00" level="Op"     property="NoReportScheduled"         value="netif=%E[val1, NetIf:id]" info="No report scheduled as no active group"/>
    <event id="16 + 0xDE00" level="Op"     property="ReportReceived"            value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Report message for a group received"/>
    <event id="17 + 0xDE00" level="Op"     property="OwnReportCanceled"         value="netif=%E[val1, NetIf:id], id=%d[val2]" info="Own report canceled, membership already reported"/>
    <event id="18 + 0xDE00" level="Op"     property="SendDelayedReport"         value="netif=%E[val1, NetIf:id], addr=%J[val2]" info="Send delayed MLD report message"/>
    <event id="19 + 0xDE00" level="Op"     property="UnInitNode"                value="netif=%E[val1, NetIf:id]" info="De-initialize multicast listener node"/>

    <!-- NetUDP: UDP Socket events -->
    <event id=" 0 + 0xD000" level="Op"     property="InitSockets"               value="sockets=%d[val1]" info="Initialize UDP sockets"/>
    <event id=" 1 + 0xD000" level="Op"     property="GetSocket"                 value="socket=%d[val1] (max=%d[val2])" info="Free socket allocated"/>
    <event id=" 2 + 0xD000" level="Error"  property="GetSocketInvalidParameter" value="error" info="Invalid parameter provided for the function"/>
    <event id=" 3 + 0xD000" level="Error"  property="NoSocketAvailable"         value="used=%d[val1]" info="Get socket failed, no free socket available"/>
    <event id=" 4 + 0xD000" level="Op"     property="ReleaseSocket"             value="socket=%d[val1]" info="Release socket"/>
    <event id=" 5 + 0xD000" level="Error"  property="ReleaseSocketNotValid"     value="socket=%d[val1]" info="Release failed, socket not valid"/>
    <event id=" 6 + 0xD000" level="Error"  property="ReleaseSocketWrongState"   value="socket=%d[val1], state=%E[val2, UDP_State:id]" info="Release failed, socket in wrong state"/>
    <event id=" 7 + 0xD000" level="Op"     property="OpenSocket"                value="socket=%d[val1], port=%d[val2]" info="Open socket for communication"/>
    <event id=" 8 + 0xD000" level="Error"  property="OpenSocketNotValid"        value="socket=%d[val1]" info="Open failed, socket not valid"/>
    <event id=" 9 + 0xD000" level="Error"  property="OpenSocketWrongState"      value="socket=%d[val1], state=%E[val2, UDP_State:id]" info="Open failed, socket in wrong state"/>
    <event id="10 + 0xD000" level="Op"     property="AssignLocalPort"           value="socket=%d[val1], port=%d[val2]" info="Local port assigned by system"/>
    <event id="11 + 0xD000" level="Error"  property="OpenLocalPortInUse"        value="socket=%d[val1], loc_port=%d[val2]" info="Open failed, requested port already used"/>
    <event id="12 + 0xD000" level="Op"     property="CloseSocket"               value="socket=%d[val1]" info="Close socket"/>
    <event id="13 + 0xD000" level="Error"  property="CloseSocketNotValid"       value="socket=%d[val1]" info="Close failed, socket not valid"/>
    <event id="14 + 0xD000" level="Op"     property="SetOptionSocket"           value="socket=%d[val1], opt=%E[val2 &amp; 0xFF, UDP_Opt:id], val=%d[val2 >> 8]" info="Set option for the socket"/>
    <event id="15 + 0xD000" level="Error"  property="SetOptionSocketNotValid"   value="socket=%d[val1]" info="SetOption failed, socket not valid"/>
    <event id="16 + 0xD000" level="Error"  property="SetOptionSocketWrongState" value="socket=%d[val1], state=%E[val2, UDP_State:id]" info="SetOption failed, socket in wrong state"/>
    <event id="17 + 0xD000" level="Detail" property="SetOptionTos"              value="socket=%d[val1], tos=%d[val2]" info="Set socket option type of service for IPv4"/>
    <event id="18 + 0xD000" level="Detail" property="SetOptionTtl"              value="socket=%d[val1], ttl=%d[val2]" info="Set socket option multicast time to live for IPv4"/>
    <event id="19 + 0xD000" level="Detail" property="SetOptionTclass"           value="socket=%d[val1], tclass=%d[val2]" info="Set socket option traffic class for IPv6"/>
    <event id="20 + 0xD000" level="Detail" property="SetOptionHopLimit"         value="socket=%d[val1], hop_limit=%d[val2]" info="Set socket option hop limit for IPv6"/>
    <event id="21 + 0xD000" level="Detail" property="SetOptionChecksum"         value="socket=%d[val1], send=%t[val2 &amp; 1 ? &quot;On&quot; : &quot;Off&quot;], verify=%t[val2 &amp; 2 ? &quot;On&quot; : &quot;Off&quot;]" info="Set socket checksum calculation options"/>
    <event id="42 + 0xD000" level="Detail" property="SetOptionInterface"        value="socket=%d[val1], netif=%E[val2, NetIf:id]" info="Set Network Interface for broadcasts and multicasts"/>
    <event id="22 + 0xD000" level="Error"  property="SetOptionWrongOption"      value="socket=%d[val1], opt=%E[val2, UDP_Opt:id]" info="Invalid option requested"/>
    <event id="23 + 0xD000" level="Error"  property="SetOptionWrongValue"       value="socket=%d[val1], value=%d[val2]" info="Invalid value for option provided"/>
    <event id="24 + 0xD000" level="Error"  property="GetBufferFailed"           value="size=%d[val1]" info="GetBuffer failed, out of memory error"/>
    <event id="25 + 0xD000" level="Op"     property="SendFrame"                 value="socket=%d[val1], len=%d[val2]" info="Send UDP frame"/>
    <event id="26 + 0xD000" level="Error"  property="SendBufferInvalid"         value="socket=%d[val1]" info="Send failed, invalid buffer"/>
    <event id="27 + 0xD000" level="Error"  property="SendSocketNotValid"        value="socket=%d[val1]" info="Send failed, socket not valid"/>
    <event id="28 + 0xD000" level="Error"  property="SendAddressUnspecified"    value="socket=%d[val1]" info="Send failed, destination address unspecified"/>
    <event id="29 + 0xD000" level="Error"  property="SendPortUndefined"         value="socket=%d[val1]" info="Send failed, port undefined"/>
    <event id="30 + 0xD000" level="Error"  property="SendSocketNotOpen"         value="socket=%d[val1]" info="Send failed, socket not open"/>
    <event id="31 + 0xD000" level="Op"     property="SendZeroLengthFrame"       value="socket=%d[val1]" info="Dump 0-length packet"/>
    <event id="41 + 0xD000" level="Error"  property="SendNoRouteFound"          value="socket=%d[val1]" info="Send failed, no route to destination address found"/>
    <event id="32 + 0xD000" level="Op"     property="SendSizeTruncated"         value="socket=%d[val1], new_len=%d[val2]" info="Send data length truncated"/>
    <event id="33 + 0xD000" level="Detail" property="ShowFrameHeader"           value="dst_port=%d[val1, UDP_Header:DstPort], src_port=%d[val1, UDP_Header:SrcPort], cksum=%x[val1, UDP_Header:Chksum], len=%d[val1, UDP_Header:Len]" info="Display UDP frame header content"/>
    <event id="34 + 0xD000" level="Op"     property="ReceiveFrame"              value="len=%d[val1], ver=%E[val2, IP_Ver:id]" info="UDP frame received"/>
    <event id="35 + 0xD000" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="36 + 0xD000" level="Op"     property="MapFrameToSocket"          value="socket=%d[val1]" info="Received frame mapped to a socket"/>
    <event id="37 + 0xD000" level="Op"     property="FrameNotMapped"            value="len=%d[val1]" info="Frame not mapped, no open sockets found"/>
    <event id="38 + 0xD000" level="Error"  property="LinkLayerAddressed"        value="socket=%d[val1]" info="Received frame link-layer addressed (by MAC address)"/>
    <event id="39 + 0xD000" level="Error"  property="ChecksumFailed"            value="socket=%d[val1]" info="Frame error, checksum check failed"/>
    <event id="40 + 0xD000" level="Op"     property="UnInitSockets"             value="udp" info="De-initialize UDP sockets"/>

    <!-- NetTCP: TCP Socket events -->
    <event id=" 0 + 0xD100" level="Op"     property="InitSockets"               value="sockets=%d[val1], mss=%d[val2]" info="Initialize TCP sockets"/>
    <event id=" 1 + 0xD100" level="Op"     property="GetSocket"                 value="socket=%d[val1] (max=%d[val2])" info="Free socket allocated"/>
    <event id=" 2 + 0xD100" level="Error"  property="GetSocketInvalidParameter" value="error" info="Invalid parameter provided for the function"/>
    <event id=" 3 + 0xD100" level="Error"  property="NoSocketAvailable"         value="used=%d[val1]" info="Get socket failed, no free socket available"/>
    <event id=" 4 + 0xD100" level="Op"     property="ReleaseSocket"             value="socket=%d[val1]" info="Release socket"/>
    <event id=" 5 + 0xD100" level="Error"  property="ReleaseSocketNotValid"     value="socket=%d[val1]" info="Release failed, socket not valid"/>
    <event id=" 6 + 0xD100" level="Error"  property="ReleaseSocketWrongState"   value="socket=%d[val1], state=%E[val2, TCP_State:id]" info="Release failed, socket in wrong state"/>
    <event id=" 7 + 0xD100" level="Op"     property="ListenSocket"              value="socket=%d[val1], port=%d[val2]" info="Listen socket"/>
    <event id=" 8 + 0xD100" level="Error"  property="ListenSocketNotValid"      value="socket=%d[val1]" info="Listen failed, socket not valid"/>
    <event id=" 9 + 0xD100" level="Error"  property="ListenPortUndefined"       value="socket=%d[val1]" info="Listen failed, listen port undefined"/>
    <event id="10 + 0xD100" level="Error"  property="ListenSocketWrongState"    value="socket=%d[val1], state=%E[val2, TCP_State:id]" info="Listen failed, socket in wrong state"/>
    <event id="11 + 0xD100" level="Op"     property="ConnectSocket"             value="socket=%d[val1], loc_port=%d[val2]" info="Connect socket"/>
    <event id="12 + 0xD100" level="Error"  property="ConnectSocketNotValid"     value="socket=%d[val1]" info="Connect failed, socket not valid"/>
    <event id="13 + 0xD100" level="Error"  property="ConnectAddressUnspecified" value="socket=%d[val1]" info="Connect failed, address unspecified"/>
    <event id="14 + 0xD100" level="Error"  property="ConnectPortUndefined"      value="socket=%d[val1]" info="Connect failed, port undefined"/>
    <event id="15 + 0xD100" level="Op"     property="ShowNetAddress"            info="Display network IP address and port number">
      <print cond="!(val1 &amp; 0x1)"      property="ShowNetAddressIp4"         value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="ShowNetAddressIp6"         value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id="17 + 0xD100" level="Error"  property="ConnectLocalPortInvalid"   value="socket=%d[val1], loc_port=%d[val2]" info="Connect failed, local port invalid"/>
    <event id="18 + 0xD100" level="Op"     property="AssignLocalPort"           value="socket=%d[val1], loc_port=%d[val2]" info="Local port assigned by system"/>
    <event id="19 + 0xD100" level="Error"  property="ConnectSocketWrongState"   value="socket=%d[val1], state=%E[val2, TCP_State:id]" info="Connect failed, socket in wrong state"/>
    <event id="115+ 0xD100" level="Error"  property="ConnectNoRouteFound"       value="socket=%d[val1]" info="Connect failed, no route to destination host found"/>
    <event id="20 + 0xD100" level="Detail" property="ShowRttVariables"          value="socket=%d[val1], rto=%d[((val2 >> 19) + (val2 &amp; 0xFFFF))*100]ms, sa=%d[val2 >> 16], sv=%d[val2 &amp; 0xFFFF]" info="Display round trip time estimation values"/>
    <event id="21 + 0xD100" level="Error"  property="GetBufferFailed"           value="size=%d[val1]" info="GetBuffer failed, out of memory error"/>
    <event id="22 + 0xD100" level="Op"     property="SendFrame"                 value="socket=%d[val1], len=%d[val2]" info="Send TCP frame"/>
    <event id="23 + 0xD100" level="Error"  property="SendBufferInvalid"         value="socket=%d[val1]" info="Send failed, invalid buffer"/>
    <event id="24 + 0xD100" level="Error"  property="SendSocketNotValid"        value="socket=%d[val1]" info="Send failed, socket not valid"/>
    <event id="25 + 0xD100" level="Error"  property="SendSocketNotConnected"    value="socket=%d[val1]" info="Send failed, socket not connected"/>
    <event id="26 + 0xD100" level="Error"  property="SendSocketClosing"         value="socket=%d[val1]" info="Send failed, socket is closing"/>
    <event id="27 + 0xD100" level="Error"  property="SendReenteredCall"         value="socket=%d[val1]" info="Send failed, called from a socket callback function"/>
    <event id="28 + 0xD100" level="Error"  property="SendDataUnacked"           value="socket=%d[val1]" info="Send failed, data is pending asknowledge"/>
    <event id="29 + 0xD100" level="Error"  property="SendMssExceeded"           value="socket=%d[val1]" info="Send failed, maximum segment size exceeded"/>
    <event id="30 + 0xD100" level="Op"     property="SendZeroLengthFrame"       value="socket=%d[val1]" info="Dump 0-length packet"/>
    <event id="31 + 0xD100" level="Op"     property="CloseSocket"               value="socket=%d[val1]" info="Close socket"/>
    <event id="32 + 0xD100" level="Error"  property="CloseSocketNotValid"       value="socket=%d[val1]" info="Close failed, socket not valid"/>
    <event id="33 + 0xD100" level="Op"     property="CloseDataUnacked"          value="socket=%d[val1], len=%d[val2]" info="Close pended, unacked data exist"/>
    <event id="34 + 0xD100" level="Error"  property="CloseSocketWrongState"     value="socket=%d[val1], state=%E[val2, TCP_State:id]" info="Close failed, socket in wrong state"/>
    <event id="35 + 0xD100" level="Op"     property="AbortSocket"               value="socket=%d[val1]" info="Abort socket"/>
    <event id="36 + 0xD100" level="Error"  property="AbortSocketNotValid"       value="socket=%d[val1]" info="Abort failed, socket not valid"/>
    <event id="37 + 0xD100" level="Error"  property="AbortSocketWrongState"     value="socket=%d[val1], state=%E[val2, TCP_State:id]" info="Abort failed, socket in wrong state"/>
    <event id="38 + 0xD100" level="Error"  property="SendReadySocketNotValid"   value="socket=%d[val1]" info="SendReady failed, socket not valid"/>
    <event id="39 + 0xD100" level="Error"  property="SendReadyReenteredCall"    value="socket=%d[val1]" info="SendReady failed, called from a socket callback function"/>
    <event id="40 + 0xD100" level="Error"  property="ResetWindowSocketNotValid" value="socket=%d[val1]" info="ResetWindow failed, socket not valid"/>
    <event id="41 + 0xD100" level="Error"  property="ResetWindowNotConnected"   value="socket=%d[val1]" info="ResetWindow failed, socket not connected"/>
    <event id="42 + 0xD100" level="Error"  property="ResetWindowNoFlowControl"  value="socket=%d[val1]" info="ResetWindow failed, flow control not enabled"/>
    <event id="43 + 0xD100" level="Op"     property="ResetWindowUpdate"         value="socket=%d[val1], window_size=%d[val2]" info="Window updated"/>
    <event id="44 + 0xD100" level="Op"     property="SetOptionSocket"           value="socket=%d[val1], opt=%E[val2 &amp; 0xFF, TCP_Opt:id], val=%d[val2 >> 8]" info="Set option for the socket"/>
    <event id="45 + 0xD100" level="Error"  property="SetOptionSocketNotValid"   value="socket=%d[val1]" info="SetOption failed, socket not valid"/>
    <event id="46 + 0xD100" level="Error"  property="SetOptionSocketWrongState" value="socket=%d[val1], state=%E[val2, TCP_State:id]" info="SetOption failed, socket in wrong state"/>
    <event id="47 + 0xD100" level="Detail" property="SetOptionTos"              value="socket=%d[val1], tos=%d[val2]" info="Set socket option type of service for IPv4"/>
    <event id="48 + 0xD100" level="Detail" property="SetOptionTclass"           value="socket=%d[val1], tclasst=%d[val2]" info="Set socket option traffic class for IPv6"/>
    <event id="49 + 0xD100" level="Detail" property="SetOptionTimeout"          value="socket=%d[val1], tout=%d[val2]s" info="Set socket option connection timeout"/>
    <event id="50 + 0xD100" level="Detail" property="SetOptionKeepAlive"        value="socket=%d[val1], enable=%d[val2]" info="Set socket option keep-alive"/>
    <event id="51 + 0xD100" level="Detail" property="SetOptionFlowControl"      value="socket=%d[val1], enable=%d[val2]" info="Set socket option flow-control"/>
    <event id="52 + 0xD100" level="Detail" property="SetOptionDelayedAck"       value="socket=%d[val1], enable=%d[val2]" info="Set socket option delayed-acknowledge"/>
    <event id="53 + 0xD100" level="Error"  property="SetOptionWrongOption"      value="socket=%d[val1], opt=%E[val2, TCP_Opt:id]" info="Invalid option requested"/>
    <event id="54 + 0xD100" level="Error"  property="SetOptionWrongValue"       value="socket=%d[val1], value=%d[val2]" info="Invalid value for option provided"/>
    <event id="55 + 0xD100" level="Op"     property="SendDelayedAck"            value="socket=%d[val1]" info="Send delayed-acknowledge"/>
    <event id="56 + 0xD100" level="Op"     property="SendKeepAliveProbe"        value="socket=%d[val1]" info="Send keep-alive probe"/>
    <event id="57 + 0xD100" level="Op"     property="KeepAliveTimeoutClosing"   value="socket=%d[val1]" info="Keep-alive timeout expired, closing socket"/>
    <event id="58 + 0xD100" level="Op"     property="CallbackEventAck"          value="socket=%d[val1]" info="Acknowledge callback notification to the user"/>
    <event id="59 + 0xD100" level="Op"     property="ResendOnTimeout"           value="socket=%d[val1], len=%d[val2]" info="Resend the data on timeout"/>
    <event id="60 + 0xD100" level="Detail" property="ShowCongestionVariables"   value="socket=%d[val1], cwnd=%d[val2 >> 16], ssth=%d[val2 &amp; 0xFFFF]" info="Display congestion avoidance and control variables"/>
    <event id="61 + 0xD100" level="Op"     property="TimeoutInState"            value="socket=%d[val1], state=%E[val2, TCP_State:id]" info="Timeout in current socket state"/>
    <event id="62 + 0xD100" level="Op"     property="TwaitTimeoutClosing"       value="socket=%d[val1]" info="Timeout in TIME_WAIT state, closing socket"/>
    <event id="63 + 0xD100" level="Op"     property="ClosingTimeout"            value="socket=%d[val1]" info="Timeout in CLOSING, FIN_WAIT_1, LAST_ACK state"/>
    <event id="64 + 0xD100" level="Error"  property="NoRetriesLeft"             value="socket=%d[val1]" info="No retries left"/>
    <event id="65 + 0xD100" level="Op"     property="ReceiveFrame"              value="len=%d[val1], ver=%E[val2, IP_Ver:id]" info="TCP frame received"/>
    <event id="66 + 0xD100" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="67 + 0xD100" level="Op"     property="MapFrameToSocket"          value="socket=%d[val1], state=%E[val2, TCP_State:id]" info="Received frame mapped to a socket"/>
    <event id="68 + 0xD100" level="Op"     property="FrameNotMapped"            value="len=%d[val1]" info="Frame not mapped, no open sockets found"/>
    <event id="69 + 0xD100" level="Error"  property="ChecksumFailed"            value="socket=%d[val1]" info="Frame error, checksum check failed"/>
    <event id="70 + 0xD100" level="Detail" property="ShowFrameHeader"           value="dport=%d[val1, TCP_Header:DstPort], sport=%d[val1, TCP_Header:SrcPort], seq=%x[val1, TCP_Header:SeqNr], ack=%x[val1, TCP_Header:AckNr], flags=%E[val1, TCP_Header:Flags], win=%d[val1, TCP_Header:Window], cksum=%x[val1, TCP_Header:Chksum]" info="Display TCP frame header content"/>
    <event id="71 + 0xD100" level="Op"     property="RstInWindow"               value="socket=%d[val1]" info="RST flag received within current receive window"/>
    <event id="72 + 0xD100" level="Op"     property="RstNotValid"               value="socket=%d[val1]" info="RST flag received outside current receive window"/>
    <event id="73 + 0xD100" level="Op"     property="RepeatedSynAck"            value="socket=%d[val1]" info="Repeated SYN+ACK flags received"/>
    <event id="74 + 0xD100" level="Op"     property="AckNotSet"                 value="socket=%d[val1]" info="ACK flag not set in received frame"/>
    <event id="75 + 0xD100" level="Op"     property="ShowSendWindow"            value="socket=%d[val1], send_win=%d[val2]" info="Display sending window size"/>
    <event id="76 + 0xD100" level="Op"     property="KeepAliveSegment"          value="socket=%d[val1]" info="Keep-alive frame received"/>
    <event id="77 + 0xD100" level="Op"     property="RetransmittedSegment"      value="socket=%d[val1]" info="Retransmitted frame received"/>
    <event id="78 + 0xD100" level="Error"  property="OutOfRangeSegment"         value="socket=%d[val1]" info="Out of range segment received"/>
    <event id="79 + 0xD100" level="Op"     property="ZeroWindowProbe"           value="socket=%d[val1]" info="Zero-window probe received"/>
    <event id="80 + 0xD100" level="Op"     property="RemotePeerClosing"         value="socket=%d[val1]" info="FIN flag received, remote peer wants to close"/>
    <event id="81 + 0xD100" level="Op"     property="ShowReceiveWindow"         value="socket=%d[val1], rec_win=%d[val2]" info="Display receiving window size"/>
    <event id="82 + 0xD100" level="Error"  property="InvalidAck"                value="socket=%d[val1]" info="ACK flag received, invalid in LISTEN state"/>
    <event id="83 + 0xD100" level="Error"  property="SynNotSet"                 value="socket=%d[val1]" info="SYN flag not set in received frame"/>
    <event id="84 + 0xD100" level="Op"     property="UserConnectionReject"      value="socket=%d[val1]" info="User rejected inbound connection"/>
    <event id="85 + 0xD100" level="Op"     property="NextState"                 value="socket=%d[val1], next=%E[val2, TCP_State:id]" info="Change socket state to next state"/>
    <event id="86 + 0xD100" level="Error"  property="WrongSynAck"               value="socket=%d[val1]" info="SYN+ACK flags received, but wrong acknowledge number"/>
    <event id="87 + 0xD100" level="Error"  property="WrongAckNumber"            value="socket=%d[val1]" info="ACK flag received, but wrong acknowledge number"/>
    <event id="88 + 0xD100" level="Error"  property="WrongSeqNumber"            value="socket=%d[val1]" info="ACK flag received, but wrong sequence number"/>
    <event id="89 + 0xD100" level="Op"     property="RepeatedSyn"               value="socket=%d[val1]" info="Repeated SYN flag received"/>
    <event id="90 + 0xD100" level="Error"  property="FrameUnrecognised"         value="socket=%d[val1]" info="Unrecognised frame received"/>
    <event id="91 + 0xD100" level="Op"     property="SimultOpenNextState"       value="socket=%d[val1], next=%E[val2, TCP_State:id]" info="SYN flag received in simultaneous open, change state to next state"/>
    <event id="92 + 0xD100" level="Error"  property="WrongFinAck"               value="socket=%d[val1]" info="FIN+ACK flags received, but wrong acknowledge number"/>
    <event id="93 + 0xD100" level="Op"     property="FinAckNextState"           value="socket=%d[val1], next=%E[val2, TCP_State:id]" info="FIN+ACK flags received, change state to next state"/>
    <event id="94 + 0xD100" level="Op"     property="SimultCloseNextState"      value="socket=%d[val1], next=%E[val2, TCP_State:id]" info="FIN flag received in simultaneous close, change state to next state"/>
    <event id="95 + 0xD100" level="Op"     property="AckNextState"              value="socket=%d[val1], next=%E[val2, TCP_State:id]" info="ACK flag received, change state to next state"/>
    <event id="96 + 0xD100" level="Op"     property="FinNextState"              value="socket=%d[val1], next=%E[val2, TCP_State:id]" info="FIN flag received, change state to next state"/>
    <event id="97 + 0xD100" level="Op"     property="PshAckInHalfClosed"        value="socket=%d[val1]" info="PSH+ACK flags received in half closed state FIN_WAIT_2"/>
    <event id="98 + 0xD100" level="Op"     property="RepeatedFin"               value="socket=%d[val1]" info="Repeated FIN flag received"/>
    <event id="99 + 0xD100" level="Op"     property="LastAckNextState"          value="socket=%d[val1], next=%E[val2, TCP_State:id]" info="Last ACK flag received, change state to next state"/>
    <event id="100+ 0xD100" level="Error"  property="RstReceived"               value="socket=%d[val1]" info="RST flag received"/>
    <event id="101+ 0xD100" level="Error"  property="InvalidState"              value="socket=%d[val1]" info="Socket is in invalid state"/>
    <event id="102+ 0xD100" level="Op"     property="SendData"                  value="socket=%d[val1], len=%d[val2]" info="Send TCP data frame"/>
    <event id="103+ 0xD100" level="Op"     property="SendControl"               value="socket=%d[val1]" info="Send TCP control frame"/>
    <event id="104+ 0xD100" level="Op"     property="SendReset"                 value="rst" info="Send reset to remote host for unmapped frame"/>
    <event id="105+ 0xD100" level="Op"     property="ParseHeaderOptions"        value="socket=%d[val1], opt_len=%d[val2]" info="Parse TCP header options"/>
    <event id="106+ 0xD100" level="Op"     property="OptionMss"                 value="socket=%d[val1], mss=%d[val2]" info="Maximum segment size option found"/>
    <event id="107+ 0xD100" level="Op"     property="DuplicateAck"              value="socket=%d[val1], dup_acks=%d[val2]" info="Duplicate acknowledge processing"/>
    <event id="108+ 0xD100" level="Op"     property="FastRetransmit"            value="socket=%d[val1], len=%d[val2]" info="Fast retransmit the data after 3 duplicate acks"/>
    <event id="109+ 0xD100" level="Op"     property="DataAcked"                 value="socket=%d[val1], ack_len=%d[val2]" info="Data acknowledge processing"/>
    <event id="110+ 0xD100" level="Op"     property="ResendData"                value="socket=%d[val1], len=%d[val2 >> 16], tout=%d[(val2 &amp; 0xFFFF)*100]ms" info="Resend the data from transmit queue"/>
    <event id="111+ 0xD100" level="Error"  property="MapSocketWrongFlagsSet"    value="error" info="Map socket failed, wrong TCP flags set in received frame"/>
    <event id="112+ 0xD100" level="Error"  property="MapSocketSynNotSet"        value="error" info="Map socket failed, SYN flag not set in received frame"/>
    <event id="113+ 0xD100" level="Error"  property="MapSocketNoListenSocket"   value="error" info="Map socket failed, no listening sockets found"/>
    <event id="114+ 0xD100" level="Op"     property="UnInitSockets"             value="tcp"   info="De-initialize TCP sockets"/>

    <!-- NetBSD: BSD Socket events -->
    <event id=" 0 + 0xD200" level="Op"     property="InitSockets"               value="sockets=%d[val1]" info="Initialize BSD sockets"/>
    <event id=" 1 + 0xD200" level="API"    property="SocketCreate"              value="sock=%d[val1], type=%E[val2, BSD_Type:id]" info="Create communication endpoint"/>
    <event id=" 2 + 0xD200" level="Error"  property="SocketInvalidParameter"    value="error" info="Socket create failed, invalid parameter"/>
    <event id=" 3 + 0xD200" level="Error"  property="NoSocketAvailable"         value="used=%d[val1]" info="Socket create failed, no free socket available"/>
    <event id=" 4 + 0xD200" level="API"    property="BindSocket"                value="sock=%d[val1]" info="Bind socket"/>
    <event id=" 5 + 0xD200" level="Error"  property="BindSocketNotValid"        value="sock=%d[val1]" info="Bind failed, socket not valid"/>
    <event id=" 6 + 0xD200" level="Error"  property="BindInvalidParameter"      value="sock=%d[val1]" info="Bind failed, invalid parameter provided"/>
    <event id=" 7 + 0xD200" level="Error"  property="BindSocketNotCreated"      value="sock=%d[val1]" info="Bind failed, socket not created"/>
    <event id=" 8 + 0xD200" level="Error"  property="BindSocketAlreadyBound"    value="sock=%d[val1]" info="Bind failed, socket already bound"/>
    <event id=" 9 + 0xD200" level="Error"  property="BindSocketConnected"       value="sock=%d[val1]" info="Bind failed, socket already connected"/>
    <event id="10 + 0xD200" level="Error"  property="BindPortInUse"             value="sock=%d[val1]" info="Bind failed, port already in use"/>
    <event id="11 + 0xD200" level="Op"     property="ViewNetAddress"            info="Display network IP address and port number">
      <print cond="!(val1 &amp; 0x1)"      property="ViewNetAddressIp4"         value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="ViewNetAddressIp6"         value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id="13 + 0xD200" level="API"    property="ListenSocket"              value="sock=%d[val1], backlog=%d[val2]" info="Listen socket"/>
    <event id="14 + 0xD200" level="Error"  property="ListenSocketNotValid"      value="sock=%d[val1]" info="Listen failed, socket not valid"/>
    <event id="15 + 0xD200" level="Error"  property="ListenInvalidParameter"    value="sock=%d[val1]" info="Listen failed, invalid parameter provided"/>
    <event id="145+ 0xD200" level="Error"  property="ListenSocketNotCreated"    value="sock=%d[val1]" info="Listen failed, socket not created"/>
    <event id="16 + 0xD200" level="Error"  property="ListenSocketNotBound"      value="sock=%d[val1]" info="Listen failed, socket not bound"/>
    <event id="17 + 0xD200" level="Error"  property="ListenSocketNotStreamType" value="sock=%d[val1]" info="Listen failed, socket not stream type"/>
    <event id="18 + 0xD200" level="Error"  property="ListenSockAlreadyListens"  value="sock=%d[val1]" info="Listen failed, socket already listens"/>
    <event id="19 + 0xD200" level="Error"  property="ListenBacklogCreateFailed" value="sock=%d[val1]" info="Listen failed, creating socket backlog failed"/>
    <event id="20 + 0xD200" level="API"    property="AcceptSocket"              value="sock=%d[val1]" info="Accept socket"/>
    <event id="21 + 0xD200" level="Error"  property="AcceptSocketNotValid"      value="sock=%d[val1]" info="Accept failed, socket not valid"/>
    <event id="146+ 0xD200" level="Error"  property="AcceptSocketNotCreated"    value="sock=%d[val1]" info="Accept failed, socket not created"/>
    <event id="22 + 0xD200" level="Error"  property="AcceptSocketNotListening"  value="sock=%d[val1]" info="Accept failed, socket not listening"/>
    <event id="23 + 0xD200" level="Error"  property="AcceptSocketNotStreamType" value="sock=%d[val1]" info="Accept failed, socket not stream type"/>
    <event id="24 + 0xD200" level="Error"  property="AcceptSocketLocked"        value="sock=%d[val1]" info="Accept failed, socket locked from the other thread"/>
    <event id="25 + 0xD200" level="Op"     property="AcceptChildSockConnected"  value="child_sock=%d[val1]" info="Child socket connected"/>
    <event id="26 + 0xD200" level="Error"  property="AcceptSocketClosed"        value="sock=%d[val1]" info="Accept failed, socket closed by peer"/>
    <event id="27 + 0xD200" level="Error"  property="AcceptSocketKilled"        value="sock=%d[val1]" info="Accept failed, socket killed locally"/>
    <event id="28 + 0xD200" level="API"    property="ConnectSocket"             value="sock=%d[val1]" info="Connect socket"/>
    <event id="29 + 0xD200" level="Error"  property="ConnectSocketNotValid"     value="sock=%d[val1]" info="Connect failed, socket not valid"/>
    <event id="30 + 0xD200" level="Error"  property="ConnectInvalidParameter"   value="sock=%d[val1]" info="Connect failed, invalid parameter provided"/>
    <event id="31 + 0xD200" level="Error"  property="ConnectSocketLocked"       value="sock=%d[val1]" info="Connect failed, socket locked from the other thread"/>
    <event id="32 + 0xD200" level="Error"  property="ConnectSocketNotCreated"   value="sock=%d[val1]" info="Connect failed, socket not created"/>
    <event id="33 + 0xD200" level="Error"  property="ConnectSocketWrongState"   value="sock=%d[val1]" info="Connect failed, socket in wrong state"/>
    <event id="34 + 0xD200" level="Op"     property="ConnectDatagramSuccess"    value="sock=%d[val1]" info="Datagram socket connected"/>
    <event id="35 + 0xD200" level="Op"     property="ConnectStreamSuccess"      value="sock=%d[val1]" info="Stream socket connected"/>
    <event id="36 + 0xD200" level="Error"  property="ConnectStreamTimeout"      value="sock=%d[val1]" info="Connect failed, connect request timed out"/>
    <event id="37 + 0xD200" level="Error"  property="ConnectStreamRefused"      value="sock=%d[val1]" info="Connect failed, remote host refused connection"/>
    <event id="38 + 0xD200" level="Error"  property="ConnectSocketKilled"       value="sock=%d[val1]" info="Connect failed, socket killed locally"/>
    <event id="39 + 0xD200" level="API"    property="SendSocket"                value="sock=%d[val1], len=%d[val2]" info="Send data"/>
    <event id="40 + 0xD200" level="Error"  property="SendSocketNotValid"        value="sock=%d[val1]" info="Send failed, socket not valid"/>
    <event id="41 + 0xD200" level="Error"  property="SendInvalidParameter"      value="sock=%d[val1]" info="Send failed, invalid parameter provided"/>
    <event id="42 + 0xD200" level="Error"  property="SendSocketNotCreated"      value="sock=%d[val1]" info="Send failed, socket not created"/>
    <event id="43 + 0xD200" level="Error"  property="SendSocketLocked"          value="sock=%d[val1]" info="Send failed, socket locked from the other thread"/>
    <event id="44 + 0xD200" level="Error"  property="SendSocketNotConnected"    value="sock=%d[val1]" info="Send failed, socket not connected"/>
    <event id="45 + 0xD200" level="Error"  property="SendSocketWrongState"      value="sock=%d[val1]" info="Send failed, socket in wrong state"/>
    <event id="46 + 0xD200" level="Error"  property="SendSocketClosed"          value="sock=%d[val1]" info="Send failed, socket closed by peer"/>
    <event id="47 + 0xD200" level="Op"     property="SendCompleteNonBlocking"   value="sock=%d[val1], num_sent=%d[val2 >> 16], len=%d[val2 &amp; 0xFFFF]" info="Send complete in non-blocking mode"/>
    <event id="48 + 0xD200" level="Error"  property="SendSocketKilled"          value="sock=%d[val1]" info="Send failed, socket killed locally"/>
    <event id="49 + 0xD200" level="Error"  property="SendStreamError"           value="sock=%d[val1]" info="Send failed, unspecified stream socket error"/>
    <event id="50 + 0xD200" level="Error"  property="SendtoInvalidParameter"    value="sock=%d[val1]" info="Sendto failed, invalid parameter provided"/>
    <event id="51 + 0xD200" level="Error"  property="SendDestAddressUndefined"  value="sock=%d[val1]" info="Send failed, dest.address undefined, connect not called"/>
    <event id="152+ 0xD200" level="Error"  property="SendtoMsgTooLarge"         value="sock=%d[val1], len=%d[val2]" info="Sendto failed, message too large to send"/>
    <event id="153+ 0xD200" level="Error"  property="SendtoNoMemory"            value="sock=%d[val1], len=%d[val2]" info="Sendto failed, out of memory"/>
    <event id="52 + 0xD200" level="Error"  property="SendDatagramError"         value="sock=%d[val1]" info="Send failed, unspecified datagram socket error"/>
    <event id="53 + 0xD200" level="Op"     property="SendCompleteBlocking"      value="sock=%d[val1], num_sent=%d[val2]" info="Send complete in blocking mode"/>
    <event id="54 + 0xD200" level="Op"     property="SendTimeoutBlocking"       value="sock=%d[val1], num_sent=%d[val2 >> 16], len=%d[val2 &amp; 0xFFFF]" info="Send timeout in blocking mode"/>
    <event id="55 + 0xD200" level="Op"     property="SendNoMemory"              value="sock=%d[val1], num_sent=%d[val2 >> 16], len=%d[val2 &amp; 0xFFFF]" info="Send out of memory"/>
    <event id="56 + 0xD200" level="API"    property="SendmsgSocket"             value="sock=%d[val1]" info="Send message"/>
    <event id="57 + 0xD200" level="Error"  property="SendmsgSocketNotValid"     value="sock=%d[val1]" info="Sendmsg failed, socket not valid"/>
    <event id="58 + 0xD200" level="Error"  property="SendmsgInvalidParameter"   value="sock=%d[val1]" info="Sendmsg failed, invalid parameter provided"/>
    <event id="59 + 0xD200" level="Error"  property="SendmsgSocketNotCreated"   value="sock=%d[val1]" info="Sendmsg, socket not created"/>
    <event id="60 + 0xD200" level="Error"  property="SendmsgSocketLocked"       value="sock=%d[val1]" info="Sendmsg failed, socket locked from the other thread"/>
    <event id="61 + 0xD200" level="Error"  property="SendmsgDestAddrUndefined"  value="sock=%d[val1]" info="Sendmsg failed, dest.address undefined, connect not called"/>
    <event id="154+ 0xD200" level="Error"  property="SendmsgMsgTooLarge"        value="sock=%d[val1], len=%d[val2]" info="Sendmsg failed, message too large to send"/>
    <event id="62 + 0xD200" level="Error"  property="SendmsgNoMemory"           value="sock=%d[val1], len=%d[val2]" info="Sendmsg failed, out of memory"/>
    <event id="63 + 0xD200" level="Error"  property="SendmsgDatagramError"      value="sock=%d[val1]" info="Sendmsg failed, unspecified datagram socket error"/>
    <event id="64 + 0xD200" level="Error"  property="SendmsgSocketKilled"       value="sock=%d[val1]" info="Sendmsg failed, socket killed locally"/>
    <event id="65 + 0xD200" level="Op"     property="SendmsgComplete"           value="sock=%d[val1], num_sent=%d[val2]" info="Sendmsg complete"/>
    <event id="66 + 0xD200" level="API"    property="RecvSocket"                value="sock=%d[val1], len=%d[val2]" info="Receive socket"/>
    <event id="67 + 0xD200" level="Error"  property="RecvSocketNotValid"        value="sock=%d[val1]" info="Recv failed, socket not valid"/>
    <event id="68 + 0xD200" level="Error"  property="RecvInvalidParameter"      value="sock=%d[val1]" info="Recv failed, invalid parameter provided"/>
    <event id="69 + 0xD200" level="Error"  property="RecvSocketNotCreated"      value="sock=%d[val1]" info="Recv failed, socket not created"/>
    <event id="70 + 0xD200" level="Error"  property="RecvSocketNotConnected"    value="sock=%d[val1]" info="Recv failed, socket not connected"/>
    <event id="71 + 0xD200" level="Error"  property="RecvSocketWrongState"      value="sock=%d[val1]" info="Recv failed, socket in wrong state"/>
    <event id="72 + 0xD200" level="Error"  property="RecvSocketLocked"          value="sock=%d[val1]" info="Recv failed, socket locked from the other thread"/>
    <event id="73 + 0xD200" level="Error"  property="RecvSocketClosed"          value="sock=%d[val1]" info="Recv failed, socket closed by peer"/>
    <event id="74 + 0xD200" level="Op"     property="RecvTimeout"               value="sock=%d[val1]" info="Receive timeout expired"/>
    <event id="75 + 0xD200" level="Error"  property="RecvSocketKilled"          value="sock=%d[val1]" info="Recv failed, socket killed locally"/>
    <event id="76 + 0xD200" level="Op"     property="RecvQueueFree"             value="sock=%d[val1], len=%d[val2]" info="Receive queue free buffers"/>
    <event id="77 + 0xD200" level="Op"     property="RecvComplete"              value="sock=%d[val1], len=%d[val2]" info="Receive complete"/>
    <event id="78 + 0xD200" level="API"    property="RecvmsgSocket"             value="sock=%d[val1]" info="Receive socket message"/>
    <event id="79 + 0xD200" level="Error"  property="RecvmsgSocketNotValid"     value="sock=%d[val1]" info="Recvmsg failed, socket not valid"/>
    <event id="80 + 0xD200" level="Error"  property="RecvmsgInvalidParameter"   value="sock=%d[val1]" info="Recvmsg failed, invalid parameter provided"/>
    <event id="81 + 0xD200" level="Error"  property="RecvmsgSocketNotCreated"   value="sock=%d[val1]" info="Recvmsg failed, socket not created"/>
    <event id="82 + 0xD200" level="Error"  property="RecvmsgSocketLocked"       value="sock=%d[val1]" info="Recvmsg failed, socket locked from the other thread"/>
    <event id="83 + 0xD200" level="Error"  property="RecvmsgSocketWrongState"   value="sock=%d[val1]" info="Recvmsg failed, socket in wrong state"/>
    <event id="84 + 0xD200" level="Op"     property="RecvmsgTimeout"            value="sock=%d[val1]" info="Receive timeout expired"/>
    <event id="85 + 0xD200" level="Error"  property="RecvmsgSocketKilled"       value="sock=%d[val1]" info="Recvmsg failed, socket killed locally"/>
    <event id="86 + 0xD200" level="Op"     property="RecvmsgComplete"           value="sock=%d[val1], len=%d[val2]" info="Receive message complete"/>
    <event id="87 + 0xD200" level="API"    property="Closesocket"               value="sock=%d[val1]" info="Close socket"/>
    <event id="88 + 0xD200" level="Error"  property="CloseSocketNotValid"       value="sock=%d[val1]" info="Closesocket failed, socket not valid"/>
    <event id="147+ 0xD200" level="Error"  property="CloseSocketNotCreated"     value="sock=%d[val1]" info="Closesocket failed, socket not created"/>
    <event id="89 + 0xD200" level="API"    property="Select"                    value="nfds=%d[val1]" info="Check status for one or more sockets"/>
    <event id="90 + 0xD200" level="Error"  property="SelectInvalidParameter"    value="nfds=%d[val1]" info="Select failed, invalid parameter provided"/>
    <event id="91 + 0xD200" level="Error"  property="SelectSuspendFailed"       value="nfds=%d[val1]" info="Select suspend failed, no sockets subscribed to resume events"/>
    <event id="92 + 0xD200" level="Op"     property="SelectComplete"            value="n_ready=%d[val1]" info="Select completed in non-blocking mode"/>
    <event id="93 + 0xD200" level="Op"     property="SelectCompleteBlocking"    value="n_ready=%d[val1]" info="Select completed in blocking mode"/>
    <event id="94 + 0xD200" level="API"    property="Getpeername"               value="sock=%d[val1]" info="Get peer name"/>
    <event id="95 + 0xD200" level="Error"  property="GetpeerSocketNotValid"     value="sock=%d[val1]" info="Getpeername failed, socket not valid"/>
    <event id="148+ 0xD200" level="Error"  property="GetpeerSocketNotCreated"   value="sock=%d[val1]" info="Getpeername failed, socket not created"/>
    <event id="96 + 0xD200" level="Error"  property="GetpeerInvalidParameter"   value="sock=%d[val1]" info="Getpeername failed, invalid parameter provided"/>
    <event id="97 + 0xD200" level="Error"  property="GetpeerSocketNotConnected" value="sock=%d[val1]" info="Getpeername failed, socket not connected"/>
    <event id="98 + 0xD200" level="API"    property="Getsockname"               value="sock=%d[val1]" info="Get socket name"/>
    <event id="99 + 0xD200" level="Error"  property="GetsockSocketNotValid"     value="sock=%d[val1]" info="Getsockname failed, socket not valid"/>
    <event id="149+ 0xD200" level="Error"  property="GetsockSocketNotCreated"   value="sock=%d[val1]" info="Getsockname failed, socket not created"/>
    <event id="100+ 0xD200" level="Error"  property="GetsockInvalidParameter"   value="sock=%d[val1]" info="Getsockname failed, invalid parameter provided"/>
    <event id="101+ 0xD200" level="Error"  property="GetsockSocketNotBound"     value="sock=%d[val1]" info="Getsockname failed, socket not bound"/>
    <event id="102+ 0xD200" level="API"    property="Setsockopt"                value="sock=%d[val1], level=%E[val2 >> 4, BSD_Level:id], name=%E[val2, BSD_Optname:id]" info="Set socket options"/>
    <event id="103+ 0xD200" level="Error"  property="SetoptSocketNotValid"      value="sock=%d[val1]" info="Setsockopt failed, socket not valid"/>
    <event id="104+ 0xD200" level="Error"  property="SetoptInvalidParameter"    value="sock=%d[val1]" info="Setsockopt failed, invalid parameter provided"/>
    <event id="105+ 0xD200" level="Error"  property="SetoptSocketNotCreated"    value="sock=%d[val1]" info="Setsockopt failed, socket not created"/>
    <event id="106+ 0xD200" level="Error"  property="SetoptOptionNotSupported"  value="sock=%d[val1], level=%E[val2 >> 4, BSD_Level:id], name=%E[val2, BSD_Optname:id]" info="Setsockopt failed, option not supported by the protocol"/>
    <event id="107+ 0xD200" level="Op"     property="SetoptKeepAlive"           value="sock=%d[val1], enable=%d[val2]" info="Set socket option: keep-alive"/>
    <event id="108+ 0xD200" level="Op"     property="SetoptRecvTimeout"         value="sock=%d[val1], tout=%d[val2]ms" info="Set socket option: receive-timeout in blocking mode"/>
    <event id="109+ 0xD200" level="Op"     property="SetoptSendTimeout"         value="sock=%d[val1], tout=%d[val2]ms" info="Set socket option: send-timeout in blocking mode"/>
    <event id="12 + 0xD200" level="Op"     property="SetoptBindToDevice"        value="sock=%d[val1], netif=%E[val2, NetIf:id]" info="Set socket option: bind to network interface"/>
    <event id="110+ 0xD200" level="Op"     property="SetoptIp4Tos"              value="sock=%d[val1], tos=%d[val2]" info="Set socket option: type-of-service for IPv4"/>
    <event id="111+ 0xD200" level="Op"     property="SetoptIp4Ttl"              value="sock=%d[val1], ttl=%d[val2]" info="Set socket option: multicast time-to-live for IPv4"/>
    <event id="112+ 0xD200" level="Op"     property="SetoptIp4RecvDstAddr"      value="sock=%d[val1], enable=%d[val2]" info="Set socket option: receive-destination-address for IPv4"/>
    <event id="113+ 0xD200" level="Op"     property="SetoptIp6Tclass"           value="sock=%d[val1], tclass=%d[val2]" info="Set socket option: traffic class for IPv6"/>
    <event id="114+ 0xD200" level="Op"     property="SetoptIp6HopLimit"         value="sock=%d[val1], hop_limit=%d[val2]" info="Set socket option hop limit for IPv6"/>
    <event id="115+ 0xD200" level="Op"     property="SetoptIp6RecvDstAddr"      value="sock=%d[val1], enable=%d[val2]" info="Set socket option: receive-destination-address for IPv6"/>
    <event id="150+ 0xD200" level="Op"     property="SetoptIp6Only"             value="sock=%d[val1], enable=%d[val2]" info="Set socket option: restrict-communication to IPv6 only"/>
    <event id="151+ 0xD200" level="Error"  property="SetoptSocketBound"         value="sock=%d[val1]" info="Setsockopt failed, socket already bound"/>
    <event id="116+ 0xD200" level="API"    property="Getsockopt"                value="sock=%d[val1], level=%E[val2 >> 4, BSD_Level:id], name=%E[val2, BSD_Optname:id]" info="Get socket options"/>
    <event id="117+ 0xD200" level="Error"  property="GetoptSocketNotValid"      value="sock=%d[val1]" info="Getsockopt failed, socket not valid"/>
    <event id="118+ 0xD200" level="Error"  property="GetoptInvalidParameter"    value="sock=%d[val1]" info="Getsockopt failed, invalid parameter provided"/>
    <event id="119+ 0xD200" level="Error"  property="GetoptSocketNotCreated"    value="sock=%d[val1]" info="Getsockopt failed, socket not created"/>
    <event id="120+ 0xD200" level="Error"  property="GetoptOptionNotSupported"  value="sock=%d[val1], level=%E[val2 >> 4, BSD_Level:id], name=%E[val2, BSD_Optname:id]" info="Getsockopt failed, option not supported by the protocol"/>
    <event id="121+ 0xD200" level="API"    property="Ioctlsocket"               value="sock=%d[val1]" info="Ioctl socket"/>
    <event id="122+ 0xD200" level="Error"  property="IoctlSocketNotValid"       value="sock=%d[val1]" info="Ioctlsocket failed, socket not valid"/>
    <event id="123+ 0xD200" level="Error"  property="IoctlInvalidParameter"     value="sock=%d[val1]" info="Ioctlsocket failed, invalid parameter provided"/>
    <event id="124+ 0xD200" level="Error"  property="IoctlSocketNotCreated"     value="sock=%d[val1]" info="Ioctlsocket failed, socket not created"/>
    <event id="125+ 0xD200" level="Error"  property="IoctlSocketNotStreamType"  value="sock=%d[val1]" info="Ioctlsocket failed, socket not stream type"/>
    <event id="126+ 0xD200" level="Op"     property="IoctlNonBlocking"          value="sock=%d[val1], enable=%d[val2]" info="Ioctl socket set blocking mode"/>
    <event id="127+ 0xD200" level="Op"     property="IoctlDelayAck"             value="sock=%d[val1], enable=%d[val2]" info="Ioctl socket set delayed-acknowledge mode"/>
    <event id="128+ 0xD200" level="Op"     property="IoctlKeepAlive"            value="sock=%d[val1], enable=%d[val2]" info="Ioctl socket set keep-alive mode"/>
    <event id="129+ 0xD200" level="Op"     property="IoctlFlowControl"          value="sock=%d[val1], enable=%d[val2]" info="Ioctl socket set flow-control mode"/>
    <event id="130+ 0xD200" level="Op"     property="CbfuncTcpEvent"            value="sock=%d[val1], event=%E[val2, TCP_Event:id]" info="Callback notification of TCP event"/>
    <event id="131+ 0xD200" level="Op"     property="CbfuncTcpQueueAdd"         value="sock=%d[val1], len=%d[val2]" info="Received TCP data added to socket queue"/>
    <event id="132+ 0xD200" level="Error"  property="CbfuncTcpNoMemory"         value="sock=%d[val1]" info="Memory allocation to buffer received TCP data failed"/>
    <event id="133+ 0xD200" level="Op"     property="CbfuncUdpQueueAdd"         value="sock=%d[val1], len=%d[val2]" info="Received UDP data addet to socket queue"/>
    <event id="134+ 0xD200" level="Error"  property="CbfuncUdpDumpData"         value="sock=%d[val1], len=%d[val2]" info="Dump received UDP data when out of memory"/>
    <event id="135+ 0xD200" level="Op"     property="UnInitSockets"             value="bsd" info="De-initialize BSD sockets"/>
    <!-- BSD-Host resolver events -->
    <event id="136+ 0xD200" level="Op"     property="GetHostInit"               value="dns" info="Initialize BSD hostname resolver"/>
    <event id="137+ 0xD200" level="API"    property="GetHostByName"             value="name=&quot;%t[val1]&quot;" info="Resolve requested host IP address"/>
    <event id="138+ 0xD200" level="Op"     property="GetHostNameResolved"       value="" info="Hostname resolved successfully"/>
    <event id="139+ 0xD200" level="Op"     property="GetHostNameNotExisting"    value="" info="Requested hostname not found in DNS database"/>
    <event id="140+ 0xD200" level="Op"     property="GetHostResolverTimeout"    value="" info="Resolving process timeout expired"/>
    <event id="141+ 0xD200" level="Error"  property="GetHostResolverError"      value="error" info="Resolving process failed, protocol error detected"/>
    <event id="142+ 0xD200" level="Error"  property="GetHostResolverBusy"       value="error" info="Resolve request failed, DNS Client busy"/>
    <event id="143+ 0xD200" level="Error"  property="GetHostInvalidParameter"   value="error" info="Invalid parameter provided for the function"/>
    <event id="144+ 0xD200" level="Op"     property="GetHostUnInit"             value="dns" info="De-initialize BSD hostname resolver"/>

    <!-- NetHTTP: Web Server events -->
    <event id=" 0 + 0xD300" level="Op"     property="InitServer"                value="sessions=%d[val1], port=%d[val2]" info="Initialize HTTP server"/>
    <event id=" 1 + 0xD300" level="Op"     property="ViewRootFolder"            value="root=&quot;%t[val1]&quot;" info="Display root directory of HTTP server"/>
    <event id=" 2 + 0xD300" level="Error"  property="GetSocketFailed"           value="session=%d[val1]" info="Failed to allocate TCP socket"/>
    <event id=" 3 + 0xD300" level="API"    property="SetRootPath"               value="path=&quot;%t[val1]&quot;" info="Set/change path to the root directory"/>
    <event id=" 4 + 0xD300" level="API"    property="SetUsername"               value="username=&quot;%t[val1]&quot;" info="Set/change username for the administrator account"/>
    <event id=" 5 + 0xD300" level="API"    property="SetPassword"               value="password=&quot;%t[val1]&quot;" info="Set/change password for the administrator account"/>
    <event id=" 6 + 0xD300" level="Op"     property="StartService"              value="port=%d[val1]" info="Start HTTP server service"/>
    <event id=" 7 + 0xD300" level="Op"     property="StopService"               value="" info="Stop HTTP server service"/>
    <event id=" 8 + 0xD300" level="Error"  property="FileNotFound"              value="session=%d[val1]" info="Requested resource file not found on HTTP server"/>
    <event id=" 9 + 0xD300" level="Error"  property="FileAccessForbidden"       value="session=%d[val1]" info="Access to requested resource file not allowed"/>
    <event id="10 + 0xD300" level="Op"     property="FileCached"                value="session=%d[val1]" info="Requested resource file already cached in the browser"/>
    <event id="11 + 0xD300" level="Op"     property="CloseSession"              value="session=%d[val1]" info="Close HTTP server session"/>
    <event id="12 + 0xD300" level="Op"     property="SendFile"                  value="session=%d[val1]" info="Send a resource file to the client"/>
    <event id="13 + 0xD300" level="Op"     property="CgiSendFile"               value="session=%d[val1]" info="Send CGI dynamic resource file to the client"/>
    <event id="14 + 0xD300" level="Op"     property="CgiIncludeFile"            value="session=%d[val1]" info="Include a file in CGI script interpreter"/>
    <event id="15 + 0xD300" level="Op"     property="CgiStopEngine"             value="session=%d[val1]" info="Stop CGI script interpreter engine"/>
    <event id="16 + 0xD300" level="Error"  property="CgiScriptError"            value="session=%d[val1]" info="CGI script interpreter error found in script file"/>
    <event id="17 + 0xD300" level="Error"  property="UnauthorizedAccess"        value="session=%d[val1]" info="Unauthorized access to HTTP server"/>
    <event id="18 + 0xD300" level="Error"  property="MethodNotImplemented"      value="session=%d[val1]" info="Requested method not implemented in HTTP server"/>
    <event id="19 + 0xD300" level="Error"  property="UserAccessDenied"          info="User denied access for this client">
      <print cond="!(val1 &amp; 0x1)"      property="UserAccessDeniedIp4"       value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="UserAccessDeniedIp6"       value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id="20 + 0xD300" level="API"    property="SetCookie"                 value="&quot;%t[val1]&quot;" info="Set cookie to send to the client"/>
    <event id="21 + 0xD300" level="Op"     property="SessionOpen"               value="session=%d[val1]" info="HTTP server session is open"/>
    <event id="22 + 0xD300" level="Op"     property="SocketAborted"             value="session=%d[val1]" info="TCP socket connection aborted by remote peer"/>
    <event id="23 + 0xD300" level="Op"     property="SocketClosed"              value="session=%d[val1]" info="TCP socket connection closed by remote peer"/>
    <event id="24 + 0xD300" level="Op"     property="ReceiveFrame"              value="session=%d[val1], len=%d[val2]" info="HTTP frame received"/>
    <event id="25 + 0xD300" level="Error"  property="FrameTooShort"             value="session=%d[val1], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id="26 + 0xD300" level="Op"     property="RequestMethod"             value="session=%d[val1], method=%E[val2, HTTP_Method:id]" info="HTTP server requested method"/>
    <event id="27 + 0xD300" level="Op"     property="CgiStartEngine"            value="session=%d[val1]" info="Start CGI script interpreter engine"/>
    <event id="28 + 0xD300" level="Op"     property="RequestedFile"             value="name=&quot;%t[val1]&quot;" info="Resource file requested"/>
    <event id="29 + 0xD300" level="Op"     property="FileOpenDrive"             value="%E[val1, HTTP_Drive:id]" info="Drive where the resource file is open"/>
    <event id="30 + 0xD300" level="Op"     property="ViewFileStatus"            value="size=%d[val1], lm_time=%d[val2]" info="Display open file size and last-modified time"/>
    <event id="31 + 0xD300" level="Op"     property="ViewRedirectionUrl"        value="url=&quot;%t[val1]&quot;" info="Display resource file redirection URL"/>
    <event id="32 + 0xD300" level="Op"     property="ViewUserCredentials"       value="user=&quot;%t[val1]&quot;" info="Display user credentials in the form of (username:password)"/>
    <event id="33 + 0xD300" level="Op"     property="ViewAcceptLanguage"        value="lang=&quot;%t[val1]&quot;" info="Display accept language http header"/>
    <event id="45 + 0xD300" level="Op"     property="ViewCookie"                value="&quot;%t[val1]&quot;" info="Display cookie http header"/>
    <event id="34 + 0xD300" level="Op"     property="ViewXmlType"               value="xml_type=&quot;%t[val1]&quot;" info="Display xml content type header"/>
    <event id="35 + 0xD300" level="Op"     property="PostXmlEncoded"            value="len=%d[val1]" info="Display content-length for xml-encoded POST"/>
    <event id="36 + 0xD300" level="Op"     property="PostCompleteMultipacket"   value="len=%d[val1]" info="Multipacket POST completed"/>
    <event id="37 + 0xD300" level="Op"     property="PostFormUrlEncoded"        value="len=%d[val1]" info="Display content-length for www-form-urlencoded POST"/>
    <event id="38 + 0xD300" level="Error"  property="PostDataTruncated"         value="new_len=%d[val1]" info="POST data truncated in buffer mode for www-form-urlencoded POST"/>
    <event id="39 + 0xD300" level="Op"     property="FileUploadRequested"       value="file=&quot;%t[val1]&quot;" info="File upload requested"/>
    <event id="40 + 0xD300" level="Op"     property="FileUploadDataReceived"    value="len=%d[val1]" info="File data received in file-upload process"/>
    <event id="41 + 0xD300" level="Op"     property="FileUploadRemaining"       value="len=%d[val1]" info="Display remaining data size to complete file-upload"/>
    <event id="42 + 0xD300" level="Op"     property="FileUploadComplete"        value="" info="File upload completed successfuly"/>
    <event id="43 + 0xD300" level="Error"  property="TlsGetContextFailed"       value="session=%d[val1]" info="Failed to allocate secure TLS context"/>
    <event id="44 + 0xD300" level="Op"     property="UnInitServer"              value="http" info="De-initialize HTTP server"/>

    <!-- NetFTPs: File Transfer Server events -->
    <event id=" 0 + 0xD400" level="Op"     property="InitServer"                value="sessions=%d[val1], port=%d[val2, NetVal:low], tout=%d[val2, NetVal:high]s" info="Initialize FTP server"/>
    <event id=" 1 + 0xD400" level="Op"     property="ShowRootFolder"            value="root=&quot;%t[val1]&quot;" info="Display root directory of FTP server"/>
    <event id=" 2 + 0xD400" level="Error"  property="GetSocketFailed"           value="session=%d[val1]" info="Failed to allocate TCP socket"/>
    <event id=" 3 + 0xD400" level="API"    property="SetRootPath"               value="path=&quot;%t[val1]&quot;" info="Set/change path to the root directory"/>
    <event id=" 4 + 0xD400" level="API"    property="SetUsername"               value="username=&quot;%t[val1]&quot;" info="Set/change username for the administrator account"/>
    <event id=" 5 + 0xD400" level="API"    property="SetPassword"               value="password=&quot;%t[val1]&quot;" info="Set/change password for the administrator account"/>
    <event id=" 6 + 0xD400" level="Error"  property="UserAccessDenied"          info="User denied access for this client">
      <print cond="!(val1 &amp; 0x1)"      property="UserAccessDeniedIp4"       value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="UserAccessDeniedIp6"       value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id=" 8 + 0xD400" level="Op"     property="SessionOpen"               value="session=%d[val1]" info="FTP server session is open"/>
    <event id=" 9 + 0xD400" level="Op"     property="SocketAborted"             value="session=%d[val1]" info="TCP socket connection aborted by remote peer"/>
    <event id="10 + 0xD400" level="Op"     property="SocketClosed"              value="session=%d[val1]" info="TCP socket connection closed by remote peer"/>
    <event id="11 + 0xD400" level="Error"  property="UnackedDataError"          value="session=%d[val1]" info="Not acknowledged transmit data pending for acknowledge"/>
    <event id="12 + 0xD400" level="Op"     property="ReceiveFrame"              value="session=%d[val1], len=%d[val2]" info="FTP frame received"/>
    <event id="13 + 0xD400" level="Error"  property="FrameTooShort"             value="session=%d[val1], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, frame length too short"/>
    <event id="14 + 0xD400" level="Op"     property="ShowCommand"               value="command=&quot;%t[val1]&quot;" info="Display command string received from the client"/>
    <event id="15 + 0xD400" level="Op"     property="VerifyUsername"            value="session=%d[val1]" info="Verify username of the client"/>
    <event id="16 + 0xD400" level="Op"     property="VerifyPassword"            value="session=%d[val1]" info="Verify password of the client"/>
    <event id="17 + 0xD400" level="Error"  property="AuthenticationFailed"      value="session=%d[val1]" info="Client authentication failed, provided credentials not valid"/>
    <event id="18 + 0xD400" level="Op"     property="UserLoginSuccess"          value="session=%d[val1]" info="Client user login to the server successful"/>
    <event id="19 + 0xD400" level="Op"     property="NotAuthenticated"          value="session=%d[val1]" info="Client command ignored, user not authenticated"/>
    <event id="20 + 0xD400" level="Op"     property="ShowSystemType"            value="session=%d[val1], sys=Windows_NT" info="Display FTP server system identification type"/>
    <event id="21 + 0xD400" level="Op"     property="NoOperation"               value="session=%d[val1]" info="Execute no operation (NOOP) command"/>
    <event id="22 + 0xD400" level="Op"     property="CurrentDirectory"          value="path=&quot;%t[val1]&quot;" info="Display current working directory"/>
    <event id="23 + 0xD400" level="Op"     property="ChangeDirectory"           value="path=&quot;%t[val1]&quot;" info="Change working directory"/>
    <event id="67 + 0xD400" level="Error"  property="ChangeDirectoryFailed"     value="session=%d[val1]" info="Change working directory failed"/>
    <event id="24 + 0xD400" level="Op"     property="ChangeDirectoryLevelUp"    value="session=%d[val1]" info="Change working directory one level up"/>
    <event id="25 + 0xD400" level="Op"     property="MakeDirectory"             value="path=&quot;%t[val1]&quot;" info="Make or create new directory on the server"/>
    <event id="26 + 0xD400" level="Op"     property="OperationDenied"           value="session=%d[val1]" info="Access or operation is denied for the client"/>
    <event id="27 + 0xD400" level="Op"     property="RemoveDirectory"           value="path=&quot;%t[val1]&quot;" info="Remove directory on the server"/>
    <event id="28 + 0xD400" level="Error"  property="RemoveDirectoryFailed"     value="session=%d[val1]" info="Remove directory command failed on the server"/>
    <event id="29 + 0xD400" level="Op"     property="DirectoryRemoved"          value="session=%d[val1]" info="Directory removed on the server successfully"/>
    <event id="30 + 0xD400" level="Op"     property="ShowDataMode"              value="session=%d[val1], mode=%E[val2, FTP_DataMode:id]" info="Display transfer data mode"/>
    <event id="31 + 0xD400" level="Op"     property="ActiveModeStart"           value="session=%d[val1], port=%d[val2]" info="Start active FTP server mode"/>
    <event id="32 + 0xD400" level="Op"     property="PassiveModeStart"          value="session=%d[val1], local_port=%d[val2]" info="Start passive FTP server mode"/>
    <event id="33 + 0xD400" level="Op"     property="GetFileSize"               value="name=&quot;%t[val1]&quot;" info="Get size of the requested file"/>
    <event id="34 + 0xD400" level="Op"     property="GetFileLastModifiedTime"   value="name=&quot;%t[val1]&quot;" info="Get last-modified time of the requested file"/>
    <event id="35 + 0xD400" level="Op"     property="ListDirectoryBasic"        value="session=%d[val1]" info="List directory names only"/>
    <event id="36 + 0xD400" level="Op"     property="ListDirectoryExtended"     value="session=%d[val1]" info="List directory in extended format"/>
    <event id="37 + 0xD400" level="Op"     property="ReadFile"                  value="name=&quot;%t[val1]&quot;" info="Read requested file on the server"/>
    <event id="38 + 0xD400" level="Error"  property="FileNotFound"              value="session=%d[val1]" info="Requested file not found on server"/>
    <event id="39 + 0xD400" level="Op"     property="WriteFile"                 value="name=&quot;%t[val1]&quot;" info="Write requested file on the server"/>
    <event id="40 + 0xD400" level="Op"     property="AppendFile"                value="name=&quot;%t[val1]&quot;" info="Append requested file on the server"/>
    <event id="41 + 0xD400" level="Error"  property="FileCreateFailed"          value="session=%d[val1]" info="Requested file create failed on server"/>
    <event id="42 + 0xD400" level="Op"     property="DeleteFile"                value="name=&quot;%t[val1]&quot;" info="Delete requested file on the server"/>
    <event id="43 + 0xD400" level="Error"  property="FileDeleteFailed"          value="session=%d[val1]" info="Requested file delete failed on server"/>
    <event id="44 + 0xD400" level="Op"     property="FileDeleted"               value="session=%d[val1]" info="File successfully deleted on the server"/>
    <event id="45 + 0xD400" level="Op"     property="RenameFileFrom"            value="name=&quot;%t[val1]&quot;" info="Rename file from current name (1st part)"/>
    <event id="46 + 0xD400" level="Op"     property="RenameFileTo"              value="new_name=&quot;%t[val1]&quot;" info="Rename file to new name (2nd part)"/>
    <event id="47 + 0xD400" level="Op"     property="FileRenamed"               value="session=%d[val1]" info="Requested file renamed successfully"/>
    <event id="48 + 0xD400" level="Error"  property="FileRenameFailed"          value="session=%d[val1]" info="Renaming requested file failed"/>
    <event id="49 + 0xD400" level="Error"  property="UnknownCommand"            value="session=%d[val1]" info="Unrecognized command received from the client"/>
    <event id="50 + 0xD400" level="Error"  property="InvalidState"              value="session=%d[val1]" info="Server in invalid state, ignore command received from the client"/>
    <event id="51 + 0xD400" level="Error"  property="InboundConnRejected"       value="session=%d[val1]" info="Inbound data connection to FTP server rejected in active mode"/>
    <event id="52 + 0xD400" level="Op"     property="DataSocketClosed"          value="session=%d[val1]" info="Data socket closed when transfer completed"/>
    <event id="53 + 0xD400" level="Op"     property="DataSocketOpen"            value="session=%d[val1]" info="Data socket open for data transfer"/>
    <event id="54 + 0xD400" level="Error"  property="LocalDiskWriteError"       value="session=%d[val1]" info="File write to local disk on the server failed, disk full"/>
    <event id="55 + 0xD400" level="Op"     property="StartService"              value="port=%d[val1]" info="Start FTP server service"/>
    <event id="56 + 0xD400" level="Op"     property="StopService"               value="" info="Stop FTP server service"/>
    <event id="57 + 0xD400" level="Op"     property="ShowFileFindMask"          value="path=&quot;%t[val1]&quot;" info="Display find file(s) mask filter with path"/>
    <event id="58 + 0xD400" level="Error"  property="MakeDirectoryFailed"       value="session=%d[val1]" info="Make new directory failed on the server"/>
    <event id="59 + 0xD400" level="Op"     property="DirectoryCreated"          value="session=%d[val1]" info="Directory successfully created on the server"/>
    <event id="60 + 0xD400" level="Op"     property="ShowFileSize"              value="session=%d[val1], size=%u[val2]" info="Display the size of the file requested"/>
    <event id="61 + 0xD400" level="Op"     property="ShowFileLastModifiedTime"  value="session=%d[val1], lm_time=&quot;%t[val2]&quot;" info="Display last-modified time of the requested file"/>
    <event id="62 + 0xD400" level="Op"     property="CloseDataConnection"       value="session=%d[val1]" info="Server closing data connection"/>
    <event id="63 + 0xD400" level="Op"     property="CloseSession"              value="session=%d[val1]" info="Server session closing"/>
    <event id="64 + 0xD400" level="Op"     property="SessionIdle"               value="session=%d[val1]" info="Server session is idle"/>
    <event id="65 + 0xD400" level="Op"     property="ShowPath"                  value="path=&quot;%t[val1]&quot;" info="Display an absolute path for file access"/>
    <event id="66 + 0xD400" level="Op"     property="UnInitServer"              value="ftp" info="De-initialize FTP server"/>

    <!-- NetFTPc: File Transfer Client events -->
    <event id=" 0 + 0xD500" level="Op"     property="InitClient"                value="mode=%E[val1, FTPc_Mode:id]" info="Initialize FTP client"/>
    <event id=" 1 + 0xD500" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate TCP socket"/>
    <event id=" 2 + 0xD500" level="API"    property="Connect"                   info="Connect to the server">
      <print cond="!(val1 &amp; 0x1)"      property="ConnectIp4"                value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="ConnectIp6"                value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id=" 4 + 0xD500" level="Error"  property="ConnectInvalidParameter"   value="error" info="Invalid parameter provided for the function"/>
    <event id=" 5 + 0xD500" level="Error"  property="ConnectClientBusy"         value="error" info="Connect failed, FTP Client busy"/>
    <event id=" 6 + 0xD500" level="Op"     property="InboundConnRejected"       value="sock=%d[val1]" info="Inbound connection to FTP client rejected"/>
    <event id=" 7 + 0xD500" level="Error"  property="SocketAborted"             value="sock=%d[val1]" info="TCP socket connection aborted by remote peer"/>
    <event id=" 8 + 0xD500" level="Op"     property="SocketConnected"           value="sock=%d[val1]" info="TCP socket connection established"/>
    <event id=" 9 + 0xD500" level="Op"     property="SocketClosed"              value="sock=%d[val1]" info="TCP socket connection closed by remote peer"/>
    <event id="10 + 0xD500" level="Op"     property="ReceiveFrame"              value="sock=%d[val1], len=%d[val2]" info="FTP frame received"/>
    <event id="11 + 0xD500" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="12 + 0xD500" level="Op"     property="ShowReplyCode"             value="reply=&quot;%t[val1]&quot;" info="Display numeric reply code from FTP server"/>
    <event id="13 + 0xD500" level="Op"     property="ResponseFragmented"        value="" info="Response to FTP command is divided into multiple frames"/>
    <event id="14 + 0xD500" level="Op"     property="ServerReady"               value="" info="FTP server ready response received"/>
    <event id="15 + 0xD500" level="Op"     property="UserOkNeedPassword"        value="" info="Authentication username is ok, password needed"/>
    <event id="16 + 0xD500" level="Error"  property="UserLoginFailed"           value="error" info="User login to FTP server failed"/>
    <event id="17 + 0xD500" level="Op"     property="UserLoginSuccess"          value="" info="Client user login successful"/>
    <event id="18 + 0xD500" level="Error"  property="WorkingDirectoryInvalid"   value="error" info="Invalid path for a working directory"/>
    <event id="19 + 0xD500" level="Op"     property="ExecuteUserCommand"        value="commandd=%E[val1, FTPc_Cmd:id]" info="Execute user command for file operations"/>
    <event id="20 + 0xD500" level="Op"     property="BinaryModeEnabled"         value="" info="FTP binary transfer mode enabled"/>
    <event id="21 + 0xD500" level="Error"  property="PasvCommandFailed"         value="error" info="PASV command failed"/>
    <event id="22 + 0xD500" level="Op"     property="PassiveModeStart"          value="port=%d[val1]" info="Start passive FTP server mode"/>
    <event id="23 + 0xD500" level="Error"  property="PortCommandFailed"         value="error" info="PORT command failed"/>
    <event id="24 + 0xD500" level="Op"     property="ActiveModeStart"           value="local_port=%d[val1]" info="Start active FTP server mode"/>
    <event id="25 + 0xD500" level="Error"  property="FileNotFoundOnServer"      value="error" info="Requested file not found on FTP server"/>
    <event id="26 + 0xD500" level="Error"  property="OperationNotAllowed"       value="error" info="Requested file operation not allowed"/>
    <event id="27 + 0xD500" level="Op"     property="AboutToOpenDataConn"       value="sock=%d[val1]" info="Client about to open data connection"/>
    <event id="28 + 0xD500" level="Op"     property="DataConnAlreadyOpen"       value="sock=%d[val1]" info="Data connection already opened"/>
    <event id="29 + 0xD500" level="Op"     property="TransferAborted"           value="" info="File data transfer aborted"/>
    <event id="30 + 0xD500" level="Op"     property="TransferCompleted"         value="" info="File data transfer completed successfully"/>
    <event id="31 + 0xD500" level="Op"     property="FileDeleted"               value="" info="File successfully deleted on FTP server"/>
    <event id="32 + 0xD500" level="Op"     property="NewNameRequired"           value="" info="New name required to rename a file on FTP server"/>
    <event id="33 + 0xD500" level="Op"     property="FileOrDirectoryRenamed"    value="" info="File or directory successfully renamed on FTP server"/>
    <event id="34 + 0xD500" level="Op"     property="DirectoryCreated"          value="" info="Directory successfully created on FTP server"/>
    <event id="35 + 0xD500" level="Op"     property="FileOrPathNotFound"        value="" info="Requested path or file not found on FTP server"/>
    <event id="36 + 0xD500" level="Op"     property="DirectoryRemoved"          value="" info="Directory successfully removed on FTP server"/>
    <event id="37 + 0xD500" level="Error"  property="CommandErrorResponse"      value="error" info="Error response to a FTP command received"/>
    <event id="38 + 0xD500" level="Error"  property="WrongResponse"             value="reply=&quot;%t[val1]&quot;" info="Invalid response to a FTP command received"/>
    <event id="39 + 0xD500" level="Op"     property="DataSocketClosed"          value="sock=%d[val1]" info="Data socket for file transfer closed"/>
    <event id="40 + 0xD500" level="Op"     property="DataSocketOpened"          value="sock=%d[val1]" info="Data socket for file transfer opened"/>
    <event id="41 + 0xD500" level="Error"  property="LocalDiskWriteError"       value="error" info="File write to local disk failed, disk full"/>
    <event id="42 + 0xD500" level="Error"  property="ClientStopTimeoutExpired"  value="error" info="File operation timeout expired, stop the client"/>
    <event id="43 + 0xD500" level="Op"     property="LocalPortAssigned"         value="local_port=%d[val1]" info="Local port assigned to accept connection in FTP server active mode"/>
    <event id="44 + 0xD500" level="Op"     property="OpenLocalFile"             value="name=&quot;%t[val1]&quot;" info="Open local file for reading or writing"/>
    <event id="45 + 0xD500" level="Error"  property="LocalFileCreateFailed"     value="error" info="Failed to create local file for writing"/>
    <event id="46 + 0xD500" level="Error"  property="LocalFileNotFound"         value="error" info="Local file not found"/>
    <event id="47 + 0xD500" level="Error"  property="OpenDataConnFailed"        value="sock=%d[val1]" info="Client failed to open data connection"/>
    <event id="48 + 0xD500" level="Detail" property="SendCommand"               value="command=&quot;%t[val1]&quot;" info="Send command to FTP server"/>
    <event id="49 + 0xD500" level="Op"     property="ClientCloseSocket"         value="sock=%d[val1]" info="Close FTP client control socket"/>
    <event id="50 + 0xD500" level="Op"     property="ClientDone"                value="cb_event=%E[val1, FTPc_Event:id]" info="FTP client operation complete, notify the user"/>
    <event id="51 + 0xD500" level="Op"     property="CloseLocalFile"            value="" info="Close local file"/>
    <event id="52 + 0xD500" level="Op"     property="UnInitClient"              value="ftp" info="De-initialize FTP client"/>

    <!-- NetTeln: Telnet Server events -->
    <event id=" 0 + 0xD600" level="Op"     property="InitServer"                value="sessions=%d[val1], port=%d[val2, NetVal:low], tout=%d[val2, NetVal:high]s" info="Initialize Telnet server"/>
    <event id=" 1 + 0xD600" level="Error"  property="GetSocketFailed"           value="session=%d[val1]" info="Failed to allocate TCP socket"/>
    <event id=" 2 + 0xD600" level="API"    property="SetUsername"               value="username=&quot;%t[val1]&quot;" info="Set/change username for the administrator account"/>
    <event id=" 3 + 0xD600" level="API"    property="SetPassword"               value="password=&quot;%t[val1]&quot;" info="Set/change password for the administrator account"/>
    <event id=" 4 + 0xD600" level="Op"     property="StartService"              value="port=%d[val1]" info="Start Telnet server service"/>
    <event id=" 5 + 0xD600" level="Op"     property="StopService"               value="" info="Stop Telnet server service"/>
    <event id=" 6 + 0xD600" level="Op"     property="CloseSession"              value="session=%d[val1]" info="Close Telnet server session"/>
    <event id=" 7 + 0xD600" level="Op"     property="ProcessData"               value="session=%d[val1], len=%d[val2]" info="Process Telnet received data"/>
    <event id=" 8 + 0xD600" level="Op"     property="ProcessCommand"            value="command=&quot;%t[val1]&quot;" info="Process Telnet client command"/>
    <event id=" 9 + 0xD600" level="Op"     property="EchoBackspace"             value="session=%d[val1]" info="Echo backspace character"/>
    <event id="10 + 0xD600" level="Op"     property="CommandHistory"            value="command=&quot;%t[val1]&quot;" info="Recall client command history"/>
    <event id="11 + 0xD600" level="Op"     property="EchoCharacters"            value="line_buff=&quot;%t[val1]&quot;" info="Echo command line characters from the line buffer"/>
    <event id="12 + 0xD600" level="Op"     property="LineBufferUsage"           value="session=%d[val1], num_char=%d[val2]" info="Display command line buffer usage"/>
    <event id="13 + 0xD600" level="Op"     property="SendAuthorizationRequest"  value="session=%d[val1]" info="Send authorization request to the clieng"/>
    <event id="14 + 0xD600" level="Op"     property="SendInitialHeader"         value="session=%d[val1]" info="Send initial telnet header to the client"/>
    <event id="15 + 0xD600" level="Op"     property="LoginTimeoutExpired"       value="session=%d[val1]" info="Login timeout expired for the user because of user inactivity"/>
    <event id="16 + 0xD600" level="Op"     property="ShowPassword"              value="password=&quot;%t[val1]&quot;" info="Display password that was entered by the client"/>
    <event id="17 + 0xD600" level="Error"  property="AuthenticationFailed"      value="session=%d[val1]" info="User authentication failed, invalid credentials"/>
    <event id="18 + 0xD600" level="Op"     property="UserLoginSuccess"          value="session=%d[val1]" info="User login of the client successful"/>
    <event id="19 + 0xD600" level="Op"     property="ShowUsername"              value="username=&quot;%t[val1]&quot;" info="Display username that was entered by the client"/>
    <event id="20 + 0xD600" level="Op"     property="NegotiateStart"            value="session=%d[val1]" info="Start Telnet server option negotiation"/>
    <event id="21 + 0xD600" level="Error"  property="NegotiateFailed"           value="session=%d[val1]" info="Telnet server option negotiation failed"/>
    <event id="22 + 0xD600" level="Error"  property="UserAccessDenied"          info="User denied access for this client">
      <print cond="!(val1 &amp; 0x1)"      property="UserAccessDeniedIp4"       value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="UserAccessDeniedIp6"       value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id="24 + 0xD600" level="Op"     property="SessionOpen"               value="session=%d[val1]" info="Telnet server session is open"/>
    <event id="25 + 0xD600" level="Op"     property="SocketAborted"             value="session=%d[val1]" info="TCP socket connection aborted by remote peer"/>
    <event id="26 + 0xD600" level="Op"     property="SocketClosed"              value="session=%d[val1]" info="TCP socket connection closed by remote peer"/>
    <event id="27 + 0xD600" level="Op"     property="ReceiveFrame"              value="session=%d[val1], len=%d[val2]" info="Telnet frame received"/>
    <event id="28 + 0xD600" level="Op"     property="NegotiateSuccess"          value="session=%d[val1]" info="Telnet server option negotiation successful"/>
    <event id="29 + 0xD600" level="Op"     property="UnInitServer"              value="telnet" info="De-initialize Telnet server"/>

    <!-- NetTFTPs: Trivial File Transfer Server events -->
    <event id=" 0 + 0xD700" level="Op"     property="InitServer"                value="sessions=%d[val1], port=%d[val2, NetVal:low], firewall_en=%d[val2, NetVal:high]" info="Initialize TFTP server"/>
    <event id=" 1 + 0xD700" level="Op"     property="ShowRootFolder"            value="root=&quot;%t[val1]&quot;" info="Display root directory of TFTP server"/>
    <event id=" 2 + 0xD700" level="Error"  property="GetSocketFailed"           value="session=%d[val1]" info="Failed to allocate UDP socket"/>
    <event id=" 3 + 0xD700" level="API"    property="SetRootPath"               value="path=&quot;%t[val1]&quot;" info="Set/change path to the root directory"/>
    <event id=" 4 + 0xD700" level="Op"     property="StartService"              value="port=%d[val1]" info="Start TFTP server service"/>
    <event id=" 5 + 0xD700" level="Op"     property="StopService"               value="" info="Stop TFTP server service"/>
    <event id=" 6 + 0xD700" level="Error"  property="TimeoutExpiredAbort"       value="session=%d[val1]" info="Session activity timeout expired, abort transfer"/>
    <event id=" 7 + 0xD700" level="Op"     property="SendBlock"                 value="session=%d[val1], block=%d[val2, NetVal:high], len=%d[val2, NetVal:low]" info="Send data block"/>
    <event id=" 8 + 0xD700" level="Op"     property="ReceiveFrame"              value="sock=%d[val1], len=%d[val2]" info="TFTP frame received"/>
    <event id=" 9 + 0xD700" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="10 + 0xD700" level="Error"  property="UserAccessDenied"          info="User denied access for this client">
      <print cond="!(val1 &amp; 0x1)"      property="UserAccessDeniedIp4"       value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="UserAccessDeniedIp6"       value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id="12 + 0xD700" level="Error"  property="AccessDeniedNoResources"   value="error" info="Client access denied, server out of resources"/>
    <event id="13 + 0xD700" level="Op"     property="ShowClientAddress"         info="Display client IP address and port number">
      <print cond="!(val1 &amp; 0x1)"      property="ShowClientAddressIp4"      value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="ShowClientAddressIp6"      value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id="15 + 0xD700" level="Op"     property="OperationRequest"          value="session=%d[val1], opcode=%E[val2, TFTP_Opcode:id]" info="Process operation requested by the client"/>
    <event id="16 + 0xD700" level="Op"     property="SessionRestart"            value="session=%d[val1]" info="Restart TFTP session, maybe our response was lost"/>
    <event id="17 + 0xD700" level="Error"  property="InvalidTransferId"         value="session=%d[val1]" info="TFTP server detected invalid transfer id (TID)"/>
    <event id="18 + 0xD700" level="Error"  property="ErrorCodeReceived"         value="session=%d[val1], code=%E[val2, TFTP_Error:id]" info="Error code received from the client"/>
    <event id="19 + 0xD700" level="Error"  property="IllegalOpcodeReceived"     value="session=%d[val1], opcode=%E[val2, TFTP_Opcode:id]" info="Illegal operation code received from the client"/>
    <event id="20 + 0xD700" level="Op"     property="FileRequested"             value="name=&quot;%t[val1]&quot;" info="File request received from the client"/>
    <event id="21 + 0xD700" level="Op"     property="TransferBlockSize"         value="session=%d[val1], size=%d[val2]" info="Display transfer block size for the session"/>
    <event id="22 + 0xD700" level="Error"  property="TransferModeNotBinary"     value="session=%d[val1]" info="Transfer mode not set to binary"/>
    <event id="23 + 0xD700" level="Error"  property="LocalFileNotFound"         value="session=%d[val1]" info="Requested file not found on server"/>
    <event id="24 + 0xD700" level="Error"  property="LocalFileCreateFailed"     value="session=%d[val1]" info="Failed to create local file on the server"/>
    <event id="25 + 0xD700" level="Op"     property="ReceiveDataFrame"          value="session=%d[val1], len=%d[val2]" info="TFTP file data frame received"/>
    <event id="26 + 0xD700" level="Error"  property="DataFrameTooShort"         value="session=%d[val1], len=%d[val2, NetVal:low] (min=%d[val2, NetVal:high])" info="Discard, data frame length too short"/>
    <event id="27 + 0xD700" level="Op"     property="DuplicateBlockReceived"    value="session=%d[val1], block=%d[val2]" info="Duplicate data block received from the client"/>
    <event id="28 + 0xD700" level="Error"  property="TooManyRetries"            value="session=%d[val1]" info="Abort transmission, too many retransmissions"/>
    <event id="29 + 0xD700" level="Op"     property="BlockReceived"             value="session=%d[val1], block=%d[val2]" info="Data block received from the client"/>
    <event id="30 + 0xD700" level="Error"  property="InvalidBlockReceived"      value="session=%d[val1], block=%d[val2]" info="Invalid data block received from the client"/>
    <event id="31 + 0xD700" level="Error"  property="WriteErrorDiskFull"        value="session=%d[val1], len=%d[val2]" info="Write local disk failed, disk full"/>
    <event id="32 + 0xD700" level="Op"     property="BlockAckReceived"          value="session=%d[val1], block=%d[val2]" info="Block acknowledge received from the client"/>
    <event id="33 + 0xD700" level="Op"     property="BlockRetransmit"           value="session=%d[val1], block=%d[val2]" info="Retransmit data block to the client"/>
    <event id="34 + 0xD700" level="Error"  property="InvalidBlockAck"           value="session=%d[val1], block=%d[val2]" info="Invalid block acknowledge received from the client"/>
    <event id="35 + 0xD700" level="Op"     property="ShowRequestMode"           value="mode=&quot;%t[val1]&quot;" info="Display received request mode parameter"/>
    <event id="36 + 0xD700" level="Op"     property="SendOptionAck"             value="session=%d[val1], block_size=%d[val2]" info="Send option acknowledgment to the client"/>
    <event id="37 + 0xD700" level="Op"     property="SendBlockAck"              value="session=%d[val1], block=%d[val2]" info="Send block acknowledgment to the client"/>
    <event id="38 + 0xD700" level="Op"     property="SendError"                 value="session=%d[val1], code=%E[val2, TFTP_Error:id]" info="Send error code to the client"/>
    <event id="39 + 0xD700" level="Op"     property="AbortSession"              value="session=%d[val1]" info="Abnormal session close on error"/>
    <event id="40 + 0xD700" level="Op"     property="CloseSession"              value="session=%d[val1]" info="Normal session close when file operation completed"/>
    <event id="41 + 0xD700" level="Op"     property="UnInitServer"              value="tftp" info="De-initialize TFTP server"/>

    <!-- NetTFTPc: Trivial File Transfer Client events -->
    <event id=" 0 + 0xD800" level="Op"     property="InitClient"                value="tftp" info="Initialize TFTP client"/>
    <event id=" 1 + 0xD800" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate UDP socket"/>
    <event id=" 2 + 0xD800" level="API"    property="PutFile"                   value="name=&quot;%t[val1]&quot;" info="Put the file on TFTP server"/>
    <event id=" 3 + 0xD800" level="Op"     property="PutRemoteName"             value="name=&quot;%t[val1]&quot;" info="Name of the file on TFTP server"/>
    <event id=" 4 + 0xD800" level="Error"  property="PutInvalidParameter"       value="error" info="Invalid parameter provided for the function"/>
    <event id=" 5 + 0xD800" level="Error"  property="PutWrongState"             value="state=%E[val1, TFTPc_State:id]" info="TFTP Client in wrong state"/>
    <event id=" 6 + 0xD800" level="Op"     property="ShowServerAddress"         info="Display server IP address and port number">
      <print cond="!(val1 &amp; 0x1)"      property="ShowServerAddressIp4"      value="ip=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="ShowServerAddressIp6"      value="ip=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id=" 8 + 0xD800" level="Op"     property="OpenLocalFile"             value="" info="Open local file for file transfer"/>
    <event id=" 9 + 0xD800" level="Error"  property="OpenLocalFileFailed"       value="error" info="Open local file failed"/>
    <event id="10 + 0xD800" level="API"    property="GetFile"                   value="name=&quot;%t[val1]&quot;" info="Get the file from TFTP server"/>
    <event id="11 + 0xD800" level="Op"     property="GetLocalName"              value="name=&quot;%t[val1]&quot;" info="Name of the local file"/>
    <event id="12 + 0xD800" level="Error"  property="GetInvalidParameter"       value="error" info="Invalid parameter provided for the function"/>
    <event id="13 + 0xD800" level="Error"  property="GetWrongState"             value="state=%E[val1, TFTPc_State:id]" info="TFTP Client in wrong state"/>
    <event id="14 + 0xD800" level="Op"     property="TimeoutBlockRetransmit"    value="block=%d[val1]" info="Timeout expired, retransmit a data block"/>
    <event id="15 + 0xD800" level="Op"     property="SendBlock"                 value="block=%d[val1], len=%d[val2]" info="Send a data block"/>
    <event id="16 + 0xD800" level="Op"     property="StopClient"                value="" info="Stop TFTP client operation, go to idle"/>
    <event id="17 + 0xD800" level="Op"     property="CloseLocalFile"            value="" info="Close local file opened for transfer"/>
    <event id="18 + 0xD800" level="Error"  property="WrongServerAddress"        info="Wrong server IP address received">
      <print cond="!(val1 &amp; 0x1)"      property="WrongServerAddressIp4"     value="ip=%I[val1, NetAddr:addr]"/>
      <print cond=" (val1 &amp; 0x1)"      property="WrongServerAddressIp6"     value="ip=%J[val1, NetAddr:addr]"/>
    </event>
    <event id="20 + 0xD800" level="Error"  property="WrongServerPort"           value="port=%d[val1]" info="Wrong TFTP server port received"/>
    <event id="21 + 0xD800" level="Op"     property="ServerTidAssigned"         value="tid=%d[val1]" info="Transfer identifier of the server assigned"/>
    <event id="22 + 0xD800" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="23 + 0xD800" level="Op"     property="ReceiveFrame"              value="len=%d[val1]" info="TFTP frame received"/>
    <event id="24 + 0xD800" level="Error"  property="ErrorCodeReceived"         value="code=%E[val1, TFTP_Error:id]" info="Error code received from server"/>
    <event id="25 + 0xD800" level="Op"     property="DuplicateBlockAck"         value="block=%d[val1]" info="Duplicate block acknowledgment received"/>
    <event id="26 + 0xD800" level="Error"  property="InvalidBlockAck"           value="block=%d[val1]" info="Invalid block acknowledgment received"/>
    <event id="27 + 0xD800" level="Op"     property="BlockAckReceived"          value="block=%d[val1]" info="Data block acknowledgment received"/>
    <event id="28 + 0xD800" level="Op"     property="DuplicateBlockReceived"    value="block=%d[val1]" info="Duplicate data block received"/>
    <event id="29 + 0xD800" level="Error"  property="InvalidBlockReceived"      value="block=%d[val1]" info="Invalid data block received"/>
    <event id="30 + 0xD800" level="Op"     property="BlockReceived"             value="block=%d[val1]" info="Data block received"/>
    <event id="31 + 0xD800" level="Error"  property="WriteErrorDiskFull"        value="len=%d[val1]" info="Local file write failed, disk full"/>
    <event id="32 + 0xD800" level="Error"  property="IllegalServerOperation"    value="error" info="Illegal server operation recognised"/>
    <event id="33 + 0xD800" level="Op"     property="SendRequest"               value="opcode=%E[val1, TFTP_Opcode:id]" info="Sent TFTP operation request"/>
    <event id="34 + 0xD800" level="Op"     property="OptionBlockSize"           value="size=%d[val1]" info="Add block size option to send request"/>
    <event id="35 + 0xD800" level="Op"     property="SendAck"                   value="block=%d[val1]" info="Send data block acknowledgment"/>
    <event id="36 + 0xD800" level="Op"     property="SendError"                 value="code=%E[val1, TFTP_Error:id]" info="Send error code to TFTP server"/>
    <event id="37 + 0xD800" level="Op"     property="OptionAckReceived"         value="" info="TFTP option acknoledgment received"/>
    <event id="38 + 0xD800" level="Op"     property="UnInitClient"              value="tftp" info="De-initialize TFTP client"/>

    <!-- NetSMTP: Simple Mail Transfer Client events -->
    <event id=" 0 + 0xD900" level="Op"     property="InitClient"                value="smtp" info="Initialize SMTP client"/>
    <event id=" 1 + 0xD900" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate TCP socket"/>
    <event id=" 2 + 0xD900" level="API"    property="Connect"                   info="Connect to mail server">
      <print cond="!(val1 &amp; 0x1)"      property="ConnectIp4"                value="server=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="ConnectIp6"                value="server=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id=" 4 + 0xD900" level="Error"  property="ConnectInvalidParameter"   value="error" info="Invalid parameter provided for the function"/>
    <event id=" 5 + 0xD900" level="Error"  property="ConnectClientBusy"         value="error" info="Connect failed, SMTP client busy"/>
    <event id=" 6 + 0xD900" level="API"    property="SendMail"                  value="recipients=%d[val1]" info="Send mail requested"/>
    <event id=" 7 + 0xD900" level="Error"  property="SendMailInvalidParameter"  value="error" info="Invalid parameter provided for the function"/>
    <event id=" 8 + 0xD900" level="Error"  property="SendMailTlsNotEnabled"     value="error" info="Send mail failed, Secure TLS (SMTPS) not enabled"/>
    <event id=" 9 + 0xD900" level="Error"  property="SendMailClientBusy"        value="error" info="Send mail failed, SMTP client busy"/>
    <event id="10 + 0xD900" level="Error"  property="SendMailNoRecipients"      value="error" info="Send mail failed, No recipients specified"/>
    <event id="11 + 0xD900" level="Error"  property="SendMailServerNotValid"    value="error" info="Send mail failed, SMTP server not valid"/>
    <event id="12 + 0xD900" level="Error"  property="SendMailDnsError"          value="error" info="Send mail failed, DNS host resolver error"/>
    <event id="13 + 0xD900" level="Error"  property="SendMailAttachNotEnabled"  value="error" info="Send mail failed, Support for attachments not enabled"/>
    <event id="14 + 0xD900" level="Error"  property="SendMailAttachFailed"      value="name=&quot;%t[val1]&quot;" info="Open file for mail attachment failed"/>
    <event id="15 + 0xD900" level="Op"     property="SendMailMultipart"         value="attachments=%d[val1]" info="Mail with attachments requested"/>
    <event id="16 + 0xD900" level="Op"     property="SendMailAttachment"        value="name=&quot;%t[val1]&quot;" info="Open a file for mail attachment"/>
    <event id="17 + 0xD900" level="Op"     property="InboundConnRejected"       value="sock=%d[val1]" info="Inbound connection to SMTP client rejected"/>
    <event id="18 + 0xD900" level="Error"  property="SocketAborted"             value="sock=%d[val1]" info="TCP socket connection aborted by remote peer"/>
    <event id="19 + 0xD900" level="Op"     property="SocketConnected"           value="sock=%d[val1]" info="TCP socket connection established"/>
    <event id="20 + 0xD900" level="Op"     property="SocketClosed"              value="sock=%d[val1]" info="TCP socket connection closed by remote peer"/>
    <event id="21 + 0xD900" level="Op"     property="ReceiveFrame"              value="sock=%d[val1], len=%d[val2]" info="SMTP frame received"/>
    <event id="22 + 0xD900" level="Error"  property="UnackedDataError"          value="sock=%d[val1]" info="Not acknowledged transmit data pending for acknowledge"/>
    <event id="23 + 0xD900" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="24 + 0xD900" level="Op"     property="ServerReady"               value="" info="SMTP server ready for commands"/>
    <event id="25 + 0xD900" level="Op"     property="EsmtpModeNotSupported"     value="" info="Extended SMTP mode not supported on server"/>
    <event id="26 + 0xD900" level="Op"     property="EhloResponseFragmented"    value="" info="Response to EHLO command is divided into multiple frames"/>
    <event id="27 + 0xD900" level="Op"     property="EsmtpModeActive"           value="" info="Extended SMTP server mode is active"/>
    <event id="28 + 0xD900" level="Op"     property="StartAuthentication"       value="auth_mode=%E[val1, SMTP_Auth:id]" info="Start SMTP authentication with authentication mode"/>
    <event id="29 + 0xD900" level="Op"     property="AuthenticationDenied"      value="" info="User has denied authentication requested by SMTP server"/>
    <event id="30 + 0xD900" level="Error"  property="AuthMethodNotSupported"    value="auth_mode=%E[val1, SMTP_Auth:id]" info="Requested authentication mode is not supported on the client"/>
    <event id="31 + 0xD900" level="Op"     property="SmtpModeActive"            value="" info="Basic SMTP server mode is active"/>
    <event id="32 + 0xD900" level="Op"     property="AuthenticationSuccessful"  value="" info="Client authentication completed successfully"/>
    <event id="33 + 0xD900" level="Error"  property="AuthenticationFailed"      value="error" info="Client authentication failed"/>
    <event id="34 + 0xD900" level="Op"     property="ServerAcknowledge"         value="" info="SMTP server acknowledged the command"/>
    <event id="35 + 0xD900" level="Error"  property="WrongResponse"             value="response=&quot;%t[val1]&quot;" info="Client received wrong response from the server"/>
    <event id="36 + 0xD900" level="Error"  property="ClientStopTimeoutExpired"  value="error" info="Operation timeout expired, stop SMTP client"/>
    <event id="37 + 0xD900" level="Op"     property="SendMessageBody"           value="" info="Send email message body"/>
    <event id="38 + 0xD900" level="Op"     property="SendMessageEnd"            value="CRLF.CRLF" info="Send end of message character sequence"/>
    <event id="39 + 0xD900" level="Detail" property="SendCommand"               value="command=&quot;%t[val1]&quot;" info="Send a command to the server"/>
    <event id="40 + 0xD900" level="Op"     property="ClientCloseSocket"         value="sock=%d[val1]" info="Close SMTP client socket"/>
    <event id="41 + 0xD900" level="Op"     property="ClientDone"                value="cb_event=%E[val1, SMTPc_Event:id]" info="SMTP client operation complete, notify the user"/>
    <event id="42 + 0xD900" level="Op"     property="TlsSupportIndicated"       value="" info="Explicit TLS support indicated by SMTP server"/>
    <event id="43 + 0xD900" level="Op"     property="StartTlsAccepted"          value="" info="STARTTLS command accepted by SMTP server"/>
    <event id="44 + 0xD900" level="Error"  property="TlsGetContextFailed"       value="error" info="Failed to allocate secure TLS context"/>
    <event id="45 + 0xD900" level="Op"     property="TlsModeStarted"            value="" info="SMTP client started secure TLS mode initialization"/>
    <event id="46 + 0xD900" level="Op"     property="TlsModeEstablished"        value="tls_id=%d[val1]" info="SMTP client established secure TLS session"/>
    <event id="47 + 0xD900" level="Op"     property="UnInitClient"              value="smtp" info="De-initialize SMTP client"/>

    <!-- NetDNS: Domain Name Service Client events -->
    <event id=" 0 + 0xDA00" level="Op"     property="InitClient"                value="entries=%d[val1]" info="Initialize DNS client"/>
    <event id=" 1 + 0xDA00" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate UDP socket"/>
    <event id=" 2 + 0xDA00" level="Op"     property="ChangeDnsServer"           value="dns=%E[val1, DNS_Active:id]" info="Change active DNS server to secondary/primary"/>
    <event id=" 3 + 0xDA00" level="Error"  property="ClientStopTimeoutExpired"  value="error" info="Timeout expired, stop DNS client operation"/>
    <event id=" 4 + 0xDA00" level="Op"     property="ReceiveFrame"              info="Frame received from DNS server">
      <print cond="!(val1 &amp; 0x1)"      property="ReceiveFrameIp4"           value="ip=%I[val1, NetAddr:addr], len=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="ReceiveFrameIp6"           value="ip=%J[val1, NetAddr:addr], len=%d[val1, NetAddr:port]"/>
    </event>
    <event id=" 6 + 0xDA00" level="Error"  property="WrongServerPort"           value="port=%d[val1]" info="Wrong server port number"/>
    <event id=" 7 + 0xDA00" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id=" 8 + 0xDA00" level="Error"  property="WrongServerAddress"        value="error" info="Received DNS response frame from wrong server"/>
    <event id=" 9 + 0xDA00" level="Detail" property="ShowFrameHeader"           value="tid=%x[val1, DNS_Header:TID], flags=%x[val1, DNS_Header:Flags], qd=%d[val1, DNS_Header:QDCOUNT], an=%d[val1, DNS_Header:ANCOUNT], ns=%d[val1, DNS_Header:NSCOUNT], ar=%d[val1, DNS_Header:ARCOUNT]" info="Display DNS frame header content"/>
    <event id="10 + 0xDA00" level="Error"  property="WrongTransactionId"        value="tid=%x[val1] (valid=%x[val2])" info="Wrong Transaction Identifier received"/>
    <event id="11 + 0xDA00" level="Error"  property="DnsRequestReceived"        value="error" info="DNS client received a DNS request"/>
    <event id="12 + 0xDA00" level="Error"  property="OpcodeNotQuery"            value="error" info="OPCODE in a response is not QUERY (not zero)"/>
    <event id="35 + 0xDA00" level="Op"     property="MessageTruncated"          value="" info="Truncated response message received"/>
    <event id="13 + 0xDA00" level="Op"     property="NoSuchNameFound"           value="" info="No no such name found in DNS database"/>
    <event id="14 + 0xDA00" level="Error"  property="RcodeAndRecursion"         value="error" info="RCODE in a response is not zero and recursion available"/>
    <event id="15 + 0xDA00" level="Error"  property="MoreAnswersReceived"       value="error" info="More than one answer received"/>
    <event id="16 + 0xDA00" level="Error"  property="QnameNotTheSame"           value="error" info="QNAME in a response not the same as requested"/>
    <event id="17 + 0xDA00" level="Error"  property="QtypeNotTheSame"           value="error" info="QTYPE in a response not the same as requested"/>
    <event id="18 + 0xDA00" level="Error"  property="QclassNotInet"             value="error" info="QCLASS in a response is not CLASS_INET"/>
    <event id="19 + 0xDA00" level="Op"     property="GotHostAddress"            info="Resolved IP address of the host received">
      <print cond="!(val1 &amp; 0x1)"      property="GotHostAddressIp4"         value="ip=%I[val1, NetAddr:addr], ttl=%d[val1 >> 1]"/>
      <print cond=" (val1 &amp; 0x1)"      property="GotHostAddressIp6"         value="ip=%J[val1, NetAddr:addr], ttl=%d[val1 >> 1]"/>
    </event>
    <event id="21 + 0xDA00" level="Op"     property="GotAuthorityAddress"       info="Received IP address of the authority">
      <print cond="!(val1 &amp; 0x1)"      property="GotAuthorityAddressIp4"    value="ip=%I[val1, NetAddr:addr]"/>
      <print cond=" (val1 &amp; 0x1)"      property="GotAuthorityAddressIp6"    value="ip=%J[val1, NetAddr:addr]"/>
    </event>
    <event id="23 + 0xDA00" level="Error"  property="RecordTypeNotSupported"    value="rr_type=%E[val1, DNS_RR:type]" info="Can not handle resource record type"/>
    <event id="24 + 0xDA00" level="Op"     property="Resolve"                   value="name=&quot;%t[val1]&quot;" info="Resolve host requested"/>
    <event id="25 + 0xDA00" level="Error"  property="ResolveInvalidParameter"   value="error" info="Invalid parameter provided for the function"/>
    <event id="26 + 0xDA00" level="Error"  property="ResolveClientBusy"         value="error" info="Resolve failed, DNS client busy"/>
    <event id="27 + 0xDA00" level="Op"     property="ResolvedAddress"           info="Resolved IP address internally">
      <print cond="!(val1 &amp; 0x1)"      property="ResolvedAddressIp4"        value="ip=%I[val1, NetAddr:addr]"/>
      <print cond=" (val1 &amp; 0x1)"      property="ResolvedAddressIp6"        value="ip=%J[val1, NetAddr:addr]"/>
    </event>
    <event id="29 + 0xDA00" level="Error"  property="ResolveDnsServerUnknown"   value="error" info="Resolve failed, DNS server unknown"/>
    <event id="30 + 0xDA00" level="Op"     property="SendRequest"               info="Send resolve request to DNS server">
      <print cond="!(val1 &amp; 0x1)"      property="SendRequestIp4"            value="server=%I[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
      <print cond=" (val1 &amp; 0x1)"      property="SendRequestIp6"            value="server=%J[val1, NetAddr:addr], port=%d[val1, NetAddr:port]"/>
    </event>
    <event id="32 + 0xDA00" level="API"    property="ClearCache"                value="deleted=%d[val1] (max=%d[val2])" info="Clear DNS cache requested"/>
    <event id="33 + 0xDA00" level="Error"  property="ClearCacheClientBusy"      value="error" info="Clear DNS cache failed, DNS client busy"/>
    <event id="34 + 0xDA00" level="Op"     property="UnInitClient"              value="dns" info="De-initialize DNS client"/>

    <!-- NetSNMP: Simple Network Management Agent events -->
    <event id=" 0 + 0xDB00" level="Op"     property="InitAgent"                 value="snmp" info="Initialize SNMP agent"/>
    <event id=" 1 + 0xDB00" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate UDP socket"/>
    <event id=" 2 + 0xDB00" level="Op"     property="ViewCommunity"             value="community=&quot;%t[val1]&quot;" info="Display current SNMP community"/>
    <event id=" 3 + 0xDB00" level="API"    property="SetCommunity"              value="community=&quot;%t[val1]&quot;" info="Change SNMP community"/>
    <event id=" 4 + 0xDB00" level="Error"  property="SetCommunityInvalidParam"  value="error" info="Invalid parameter provided for the function"/>
    <event id=" 5 + 0xDB00" level="API"    property="SetMibTable"               value="entries=%d[val1]" info="Register a MIB table in SNMP agent"/>
    <event id=" 6 + 0xDB00" level="Error"  property="SetMibTableInvalidParam"   value="error" info="Invalid parameter provided for the function"/>
    <event id=" 7 + 0xDB00" level="API"    property="Trap"                      value="ip=%I[val1, SNMP_Trap:addr], generic=%E[val1, SNMP_Trap:generic], specific=%d[val1, SNMP_Trap:specific], nobj=%d[val1, SNMP_Trap:nobj]" info="Send a trap message to SNMP trap server"/>
    <event id=" 8 + 0xDB00" level="Error"  property="TrapInvalidParameter"      value="error" info="Invalid parameter provided for the function"/>
    <event id=" 9 + 0xDB00" level="Error"  property="TrapMibTableNotSet"        value="error" info="Trap failed, MIB table not yet registered"/>
    <event id="10 + 0xDB00" level="Error"  property="TrapMissingSysObjectId"    value="error" info="Trap failed, missing sysObjectID in MIB table"/>
    <event id="11 + 0xDB00" level="Error"  property="TrapGenericTrapInvalid"    value="generic=%d[val1] (max=%d[val2])" info="Invalid generic trap value"/>
    <event id="12 + 0xDB00" level="Error"  property="TrapTooManyObjects"        value="nobj=%d[val1] (max=%d[val2])" info="Maximum number of objects in trap message exceeded"/>
    <event id="13 + 0xDB00" level="Error"  property="TrapObjectNotExisting"     value="obj=%d[val1] (max=%d[val2])" info="Requested object not existing in MIB table"/>
    <event id="14 + 0xDB00" level="Error"  property="TrapMessageTooBig"         value="size=%d[val1] (max=%d[val2])" info="Trap message is too big"/>
    <event id="15 + 0xDB00" level="Detail" property="MibAddObject"              value="type=%E[val2, SNMP_Object:type], index=%d[val1]" info="Add MIB object to SNMP message"/>
    <event id="32 + 0xDB00" level="Detail" property="ViewObjectId"              value="oid=%t[val1]" info="Display Object Identification"/>
    <event id="33 + 0xDB00" level="Detail" property="ViewObjectVal"             info="Display 4-byte Object value">
      <print cond="(val1 == 0)"            property="ViewObjectVal-Integer"     value="val=%d[val2]"/>
      <print cond="(val1 == 1)"            property="ViewObjectVal-Counter"     value="val=%u[val2]"/>
      <print cond="(val1 == 2)"            property="ViewObjectVal-Gauge"       value="val=%u[val2]"/>
      <print cond="(val1 == 3)"            property="ViewObjectVal-Ticks"       value="val=%u[val2]"/>
    </event>
    <event id="34 + 0xDB00" level="Detail" property="ViewObjectAddr"            value="ip=%I[val2]" info="Display IP Address Object value"/>
    <event id="35 + 0xDB00" level="Detail" property="ViewObjectVar"             info="Display Object value of variable size in ascii form">
      <print cond="((val1 &amp; 0xFF)==0)" property="ViewObjectVar-OID"         value="oid=%t[val2]"/>
      <print cond="((val1 &amp; 0xFF)==1)" property="ViewObjectVar-String"      value="len=%d[val1>>16], val=&quot;%t[val2]&quot;"/>
      <print cond="((val1 &amp; 0xFF)==2)" property="ViewObjectVar-BString"     value="len=%d[val1>>17], val=&quot;%t[val2]&quot;"/>
    </event>
    <event id="16 + 0xDB00" level="Op"     property="ReceiveFrame"              value="ip=%I[val2], len=%d[val1]" info="SNMP frame received"/>
    <event id="17 + 0xDB00" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="18 + 0xDB00" level="Error"  property="FrameProtocolError"        value="error" info="Trap failed, missing sysObjectID in MIB table"/>
    <event id="19 + 0xDB00" level="Op"     property="VersionNotSupported"       value="ver=%d[val1]" info="SNMP protocol version not supported"/>
    <event id="20 + 0xDB00" level="Op"     property="WrongCommunityReceived"    value="error" info="Wrong community in received message"/>
    <event id="21 + 0xDB00" level="Error"  property="InvalidRequestType"        value="type=%E[val1, SNMP_PDU:type]" info="Invalid PDU request type received"/>
    <event id="22 + 0xDB00" level="Op"     property="ViewRequest"               value="type=%E[val1, SNMP_PDU:type], id=%d[val2]" info="Display received PDU request type and id"/>
    <event id="23 + 0xDB00" level="Error"  property="TooManyObjectsReceived"    value="nobj=%d[val1] (max=%d[val2])" info="Too many TLV objects in received message"/>
    <event id="24 + 0xDB00" level="Error"  property="ObjectNotFound"            value="obj=%d[val1]" info="Receive object not found in the MIB table"/>
    <event id="25 + 0xDB00" level="Error"  property="ObjectWrongType"           value="obj=%d[val1]" info="Receive object type not the same as in the MIB table"/>
    <event id="26 + 0xDB00" level="Error"  property="ObjectReadOnly"            value="obj=%d[val1]" info="Writing a read-only object not allowed"/>
    <event id="27 + 0xDB00" level="Error"  property="ObjectWriteFailed"         value="obj=%d[val1]" info="Object write attempt failed for unknown reason"/>
    <event id="28 + 0xDB00" level="Op"     property="SendErrorStatus"           value="error=%E[val1, SNMP_Error:id], index=%d[val2]" info="Send error status response to a SNMP request"/>
    <event id="29 + 0xDB00" level="Error"  property="ResponseMessageTooBig"     value="size=%d[val1] (max=%d[val2])" info="Response message would be too big"/>
    <event id="30 + 0xDB00" level="Op"     property="SendGetResponse"           value="id=%d[val1]" info="Send get-response to a SNMP request"/>
    <event id="31 + 0xDB00" level="Op"     property="UnInitAgent"               value="snmp" info="De-initialize SNMP agent"/>

    <!-- NetSNTP: Simple Network Time Client events -->
    <event id=" 0 + 0xDC00" level="Op"     property="InitClient"                value="mode=%E[val1, SNTP_Mode:id]" info="Initialize SNTP client"/>
    <event id=" 1 + 0xDC00" level="Error"  property="GetSocketFailed"           value="error" info="Failed to allocate UDP socket"/>
    <event id=" 2 + 0xDC00" level="API"    property="GetTime"                   value="mode=%E[val1, SNTP_Mode:id]" info="Get time from NTP server requested"/>
    <event id=" 3 + 0xDC00" level="Error"  property="GetTimeInvalidParameter"   value="error" info="Invalid parameter provided for the function"/>
    <event id=" 4 + 0xDC00" level="Error"  property="GetTimeWrongState"         value="state=%E[val1, SNTP_State:id]" info="SNTP Client in wrong state"/>
    <event id=" 5 + 0xDC00" level="Op"     property="GetTimeOpen"               value="ntp=%I[val1]" info="Open port, start broadcast receive mode"/>
    <event id=" 6 + 0xDC00" level="Op"     property="GetTimeClose"              value="stop" info="Close port, stop broadcast receive mode"/>
    <event id=" 7 + 0xDC00" level="Error"  property="GetTimeServerUnknown"      value="ntp=%I[val1]" info="NTP server address unknown"/>
    <event id=" 8 + 0xDC00" level="Error"  property="GetTimexInvalidParameter"  value="error" info="Invalid parameter provided for the function"/>
    <event id=" 9 + 0xDC00" level="Error"  property="GetTimexClientBusy"        value="error" info="Function failed, SNTP client busy"/>
    <event id="10 + 0xDC00" level="Error"  property="GetTimexServerNotValid"    value="error" info="Server name not valid or not existing"/>
    <event id="11 + 0xDC00" level="Error"  property="GetTimexDnsError"          value="error" info="DNS name resolver failed"/>
    <event id="12 + 0xDC00" level="API"    property="SetMode"                   value="mode=%E[val1, SNTP_Mode:id]" info="Set mode of operation for SNTP client"/>
    <event id="13 + 0xDC00" level="Error"  property="SetModeInvalidParameter"   value="error" info="Invalid parameter provided for the function"/>
    <event id="14 + 0xDC00" level="Error"  property="SetModeWrongState"         value="state=%E[val1, SNTP_State:id]" info="SNTP Client in wrong state"/>
    <event id="15 + 0xDC00" level="Op"     property="SendMessage"               value="ntp=%I[val1]" info="Send SNTP time request message"/>
    <event id="16 + 0xDC00" level="Op"     property="ServerNotResponding"       value="ntp=%I[val1]" info="Timeout, NTP server not responding"/>
    <event id="17 + 0xDC00" level="Op"     property="ReceiveFrame"              value="ntp=%I[val1], len=%d[val2]" info="NTP frame received"/>
    <event id="18 + 0xDC00" level="Error"  property="WrongServerPort"           value="port=%d[val1]" info="Wrong server port number"/>
    <event id="19 + 0xDC00" level="Error"  property="FrameTooShort"             value="len=%d[val1] (min=%d[val2])" info="Discard, frame length too short"/>
    <event id="20 + 0xDC00" level="Error"  property="WrongServerAddress"        value="ntp=%I[val1]" info="Received NTP frame from wrong server"/>
    <event id="21 + 0xDC00" level="Error"  property="ModeNotServer"             value="mode=%d[val1]" info="Received NTP message mode not server"/>
    <event id="22 + 0xDC00" level="Error"  property="ModeNotBroadcast"          value="mode=%d[val1]" info="Received NTP message mode not broadcast"/>
    <event id="23 + 0xDC00" level="Error"  property="AnswerInWrongState"        value="state=%E[val1, SNTP_State:id]" info="NTP message received in wrong client state"/>
    <event id="24 + 0xDC00" level="Op"     property="ShowTimeStamp"             value="ref=%x[val1], utc=%d[val2]" info="Display time stamp information"/>
    <event id="25 + 0xDC00" level="Op"     property="TimeStampInvalid"          value="ref=%x[val1]" info="Time stamp information not valid"/>
    <event id="26 + 0xDC00" level="Op"     property="UnInitClient"              value="sntp" info="De-initialize SNTP client"/>
  </events>
</component_viewer>
