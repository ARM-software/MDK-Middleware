/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page fs_create_app Create a File System Application
The steps to create a microcontroller application that uses the File System are:
 -# Select \ref fs_RTE_Software_Component_Selection "RTE Components" along with other components that are
    required for your application.
 -# Configure the \ref fs_Device_Configuration "File System".
 -# Configure the \ref fs_Driver_Configuration "hardware".
 -# Implement the \ref fs_User_Code_Implementation "User Code".
 -# \ref fs_debugging "Debug" you application using the built-in mechanisms of the File System Component.
  
\section fs_RTE_Software_Component_Selection RTE Component Selection

Only a few steps are necessary to complete the RTE Component selection: 
 
 -# From the <b>File System</b> Component:
   - Select <b>File System:CORE</b> that provides the basic functionality required for data storage and access.
   - Select your desired <b>File System:Drive</b>. \ref fs_drives gives more details.
 -# From the <b>CMSIS Driver</b> Component select an appropriate driver suitable for your \b drive. \ref fs_drives gives more
    details.
 -# From the <b>CMSIS-Compiler</b> Component select <b>CORE</b> and <b>File Interface:MDK-MW File System</b> to provide
    interface for the Standard C Library functions.
 -# From the \b Device Component:
   - Additional device specific drivers may be required according to the validation output.
 -# From the CMSIS Component:
   - Select the <b>CMSIS:CORE</b> to provide the core interface to the processor.
   - Select a suitable <b>CMSIS:RTOS</b> that is a required for the File System Component.
   
\image html "fs_rte_comp_selection.png" RTE Component for File System


\section fs_drives Using Drives
The section \ref drive shows the relationship between drive - memory device - and driver/interface.


\subsection nor_usage NOR Flash Drive
For using a NOR Flash drive, a \urlout{Flash-API} driver is required, which encapsulates either the Memory Bus interface or SPI (in which case an \urlout{SPI-API} driver is required in addition):
- Set <b>File System:Drive:NOR</b> to at least '1' to use a NOR Flash drive (independently if it is using a memory bus or SPI interface).
- From the \b CMSIS \b Driver Component, select an appropriate <b>Flash (API)</b> device. If your NOR Flash uses an SPI
  interface, select <b>SPI (API)</b> additionally.

If your NOR Flash device is not listed, use one of the examples as a reference to implement a driver for your specific
device:
- AM29x800BB/<a href="https://media-www.micron.com/-/media/client/global/documents/products/data-sheet/nor-flash/parallel/m29w/m29w640f.pdf" target="_blank">M29W640FB</a>
(Flash with 16-bit memory bus interface)
- <a href="https://www.infineon.com/dgdl/Infineon-S29GL064N_S29GL032N_64_Mbit_32_Mbit_3_V_Page_Mode_MirrorBit_Flash-DataSheet-v03_00-EN.pdf?fileId=8ac78c8c7d0d8da4017d0ed556fd548b" target="_blank">S29GL064Nx2</a> (Flash with 32-bit
memory bus interface)
- <a href="https://datasheet.octopart.com/AT45DB642D-CNU-Atmel-datasheet-9652374.pdf" target="_blank">AT45DB642D</a> (Flash with SPI interface using an SPI
driver)

\image html fs_flash_drivers.png "Flash (API) Drivers shipped with the Middleware Component"

Configure the driver-hardware relationship using the \b FS_Config_NOR_n.h file:

\image html fs_config_nor_0_h.png "NOR Flash Drive Configuration File"

\note General \ref fs_sys_req requirements apply.


\subsection ram_usage RAM Disk Drive
To enable a RAM disk drive, select <b>File System:Drive:RAM</b>.

Set the drive characteristics in the \b FS_Config_RAM.h file:

\image html fs_config_ram_0_h.png "RAM Disk Configuration File"

\note General \ref fs_sys_req requirements apply.


\subsection mc_usage Memory Card Drive
Memory cards can be connected to a microcontroller device either using an SD/MMC bus mode (MCI) or an SPI bus mode.
- Set <b>File System:Drive:Memory Card</b> to at least '1'.
- From the \b CMSIS \b Driver Component, select <b>MCI (API)</b> or <b>SPI (API)</b>, depending on the actual connection of
  the card drive to the microcontroller.


Set the drive characteristics in the \b FS_Config_MC_n.h file:

\image html fs_config_mc_0_h.png "Memory Card Drive Configuration File"

\note
- If your microcontroller device does not have a \b CMSIS \b Driver for the <b>MCI (API)</b> or <b>SPI (API)</b>, you can try
  to develop your own one based on the \urlout{CMSIS-Driver-Ref} documentation.
- The page \ref mc_control_layer lists all supported memory card types and gives further details on how to use these cards. 
- General \ref fs_sys_req requirements apply.


\subsection usb_usage USB Flash Drive
- Set <b>File System:Drive:USB</b> to at least '1'.
- From the \b USB Component, please select the <b>USB:CORE</b>, set <b>USB:Host</b> to '1', and select <b>USB:Host:MSC</b>.
- From the \b CMSIS \b Driver component, select the appropriate USB driver from <b>USB Host (API)</b>.

Set the drive characteristics in the \b FS_Config_USB_n.h file:

\image html fs_config_usb_0_h.png "USB Host Mass Storage Class Drive Configuration File"

\note
- If your microcontroller device does not have a \b CMSIS \b Driver for the <b>USB Host (API)</b>, you can try to develop
  your own one based on the
  \urlout{CMSIS-Driver-Ref} documentation.
- General \ref fs_sys_req requirements apply.

\subsection nand_usage NAND Flash Drive
- Set <b>File System:Drive:NAND</b> to at least '1'.
- From the \b CMSIS \b Driver component, select the appropriate NAND driver from <b>NAND (API)</b>.

Set the drive characteristics in the \b FS_Config_NAND_n.h file:

\image html fs_config_nand_0_h.png "NAND Flash Drive Configuration File"

\note
- If your microcontroller device does not have a \b CMSIS \b Driver for the <b>NAND (API)</b>, you can try to develop your
  own one based on the \urlout{CMSIS-Driver-Ref} documentation.
- The page \ref nand_flash_TL describes additional features specific to these devices.
- Using a <b>NAND (API)</b> driver, you can use any NAND Flash device with an 8-/16-bit memory bus interface for data storage.
- NAND Flashes with SPI interface (Serial NAND) are currently \a not \a supported by the File System Component.
- General \ref fs_sys_req requirements apply.


\section fs_Device_Configuration File System Configuration

The File System configuration file \b FS_Config.h contains settings for the amount of files that can be open at the same time:

\image html fs_config_h.png "File System Configuration File"

Maximum number of simultaneously opened files can be set separately for FAT File System and for Embedded File System (EFS).


\section fs_Driver_Configuration Hardware Configuration
As the file system is not bound to a special type of hardware, you need to configure the necessary drivers according to the
requirements of your target device. This configuration is done in the \b RTE_Device.h configuration file:

\image html rte_device_h.png "Hardware Configuration Example using RTE_Device.h"

\note Consult the device's user manual or hardware reference guide for more details.


\section fs_sys_req System Resource Configuration

For proper operation, the File System Component requires some system configuration settings. The requirements are:
- Minimum \b heap size of <b>512 + 96 Bytes for each opened file</b>. If you want to be able to have three files open
  at the same time, you need to set a heap size of at least 3 * (512+96) Bytes = 1824 Bytes. This can be configured in the device's
  \b startup_device.s file (\c Heap_Size).
- As the File System Component is not creating any additional threads, you need to add thread stack size to the calling
  thread. This calling thread can be the main thread, a thread with a default stack size or a thread with a user provided
  stack size. Changing the size for these threads can be done in the
  \urlout{RTX-Conf-CM5} file.
- Each opened file is protected with a mutex in order to ensure thread-safe operation. When working with file functions
  from the standard C library, you need to ensure enough mutex objects available for the file stream operations in the
  standard library system. File System component's \ref fs_resource_requirements section explains how to determine the
  right setting in detail. Adjusting the number of mutex objects available for standard library system can be done in the \urlout{RTX-Conf-CM5} file.

For more information, check the File System component's \ref fs_resource_requirements section.


\section fs_User_Code_Implementation User Code Implementation

All available functions are documented in the <a class=el href="./modules.html" >Reference</a> section of the File System
Component. These routines can be adapted to the needs of the microcontroller application, in case more functionality is
needed.

\section fs_debugging Debugging

File System Component can be easily configured to generate debug events and provide dynamic visibility to the component operation.

File System supports event annotations for the \urlout{Event-Recorder-About} and make it very easy to analyze the internal operation
of the File System Component during application debug. The \ref evr_gr describes the events implemented in the File System Component.

\ref fsEvrSupport "Event Recorder Support" below explains how to configure File System for debugging.

\anchor fsEvrSupport
Event Recorder Support
----------------------
\urlout{Event-Recorder-About} is a powerful tool that provides visibility to the dynamic execution of the program.

The File System Component generates \ref evr_gr "a broad set of Debug Events" for the Event Recorder and implements required infrastructure to interface with it.

To use the Event Recorder it is required to create an image with event generation support. The necessary steps are:
  1. \urlout{Event-Recorder-Enable}: in the RTE management dialog enable the software component <b>CMSIS-View:Event Recorder</b>.
  2. Ensure that Event Recorder is initialized preferably by \urlout{RTX5-Event-Recorder-Config} if CMSIS-RTOS2 RTX v5 is used,
     or alternatively by calling the function \urlout{Event-Recorder-Initialize-Func} in the application code.
  3. \ref fsEvrConfig "Event Recorder Configuration": if necessary, adjust default Event Recorder configuration.
  4. In <b>FS_Debug.h</b> enable File System event generation and configure event filters.
  5. Build the application code, download it to the target hardware and start debug session.

Now, when the File System generates event information, it can be viewed in the \urlout{uv4-Event-Recorder}.

\anchor fsEvrConfig
Event Recorder Configuration
----------------------
This section describes the configuration settings for the Event Recorder.

<b>File System Event Generation Configuration</b>

Selecting the <b>File System:CORE</b> will add the file \c FS_Debug.h to your project. Use this file to set the event
generation configuration for File System core and drivers separately.

\image html fs_debug_h.png "FS_Debug.h file for event generation configuration"

The following settings are available for event generation configuration of each module:
- \b Off means no events will be generated by the module
- \b Errors means only error events will be generated by the module
- <b>Errors + API</b> means error and API call events will be generated by the module
- \b All means all available events will be generated by the module. Besides error and API call events, this contains operation and detailed events.

Event IDs
---------

The file system component uses the following event IDs:

| Component   | Event ID |
|-------------|----------|
| FsCore      | 0x80     |
| FsFAT       | 0x81     |
| FsEFS       | 0x82     |
| FsIOC       | 0x83     |
| FsNFTL      | 0x84     |
| FsNAND      | 0x85     |
| FsMcMCI     | 0x86     |
| FsMcSPI     | 0x87     |
*/

/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page fs_examples File System Examples
[TOC]
The File System Component is used in many different applications and examples. One stand-alone example is available to demonstrate
the usage of the File System. Other examples use the File System Component in conjunction with other Components (such as USB or
Network for example).
- The \ref fs_standalone_example shows the basic functionality of the File System.
- The \url{USBD-MSC-Ex} shows how to
  create an USB MSC Device that is recognized by an USB Host controller.
- The \url{USBH-MSC-Ex} explains how to access file system data from an attached USB memory device.
- The \url{FTP-Server-Ex} accesses the device's file system via a network connection.

These examples are available through the \urlout{uv4_ca_packinstaller}; select the related board and copy the example.

\section fs_standalone_example File System Example

This example shows how to manipulate files on a given drive using the File System Component. You can mount and format the drive
and then perform operations like write, read, rename and delete to manage files and directories on any enabled drive. Example
uses serial terminal connection to interact with the user.

Typically one connects the development board to a computer via debug connection that also provides virtual COM port, downloads
example application to a board and starts terminal application on computer. The following picture shows an exemplary connection
of the development board and a computer:

\image html "fs_setup.png"

\subsection fs_example_build Build the "File System" Project

Open the example project in MDK (the \urlout{uv4_ca_packinstaller} web page explains how to do this). The project tree should have
a similar structure:

\image html "fs_proj_structure.png" "File System Project Structure"

\subsubsection fs_example_sources Source Files

- \b File_Demo.c contains the main application thread and implementation of commands for user interaction.

You may now build and download the example project to the evaluation board.

After these steps, the project should start executing on your evaluation kit. In case of errors, refer to the Evaluation Board
User's Guide for configuration information.

\subsection fs_example_using Using the "File System" Project

\subsubsection fs_example_using_hw Hardware Setup

One you have example application executing on the Evaluation Board hardware you need to have serial (virtual COM) port
connected to the computer.

\subsubsection fs_example_using_pc PC Software

Open any software terminal emulator application to start interacting with the example running on the Evaluation Board.
After resetting the board, you should see something similar like this:

\image html "fs_example_intro.png"

Now you can type \b help to the command prompt and press enter (make sure that the new line character is also sent after
pressing enter). Now something similar to the below image should be printed:

\image html "fs_example_help.png"

You can now type the listed commands and send arguments directly to the FileSystem API functions.
*/

