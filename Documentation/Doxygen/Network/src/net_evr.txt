/**
\defgroup net_evr Debug Events
\brief Events generated by the Network
\details

The Network Component interfaces to the \urlout{Event-Recorder}
to provide event information which helps you to understand and analyse the component operation.

\ref netEvrSupport provides details on how to configure the Network Component to support
the \ref net_evr.

@{
*/


/**
\defgroup net_evr_sys_func NetSYS: System Core
\brief Events generated by the Network - System Core functions
\details
The Network System Core functions generate events that inform about the general system
events and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_InitSystem(uint32_t lib_version)
\details
The event \b InitSystem is created when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b ver: library version of the Network component (major.minor.build).
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_ThreadCreateFailed(void)
\details
The event \b ThreadCreateFailed is generated, if the function \ref netInitialize failed
to create the Network Core thread.

\b Value in the Event Recorder shows:
  - \b thread: netCore_Thread.
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_TimerCreateFailed(void)
\details
The event \b TimerCreateFailed is generated, if the function \ref netInitialize failed
to create the Network Tick timer.

\b Value in the Event Recorder shows:
  - \b timer: net_tick.
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_InitComplete(void)
\details
The event \b InitComplete is created when the function \ref netInitialize successfully
initialized the Network component.
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_GetOption(uint16_t if_id, int32_t option)
\details
The event \b GetOption is created when the function \ref netIF_GetOption is executed.

\b Value in the Event Recorder shows:
  - \b netif: interface identification (ETH0, ETH1, WiFi0, WiFi1, PPP, SLIP).
  - \b opt:   interface option to get as specified in \ref netIF_Option.
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_SetOption(uint16_t if_id, int32_t option)
\details
The event \b SetOption is created when the function \ref netIF_SetOption is executed.

\b Value in the Event Recorder shows:
  - \b netif: interface identification (ETH0, ETH1, WiFi0, WiFi1, PPP, SLIP).
  - \b opt:   interface option to set as specified in \ref netIF_Option.
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_SetDefault(uint16_t if_id, int32_t ip_version)
\details
The event \b SetDefault is created when the function \ref netIF_SetDefault is executed.

\b Value in the Event Recorder shows:
  - \b netif: interface identification (ETH0, ETH1, WiFi0, WiFi1, PPP, SLIP).
  - \b ver:   IP version used (IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_SetHostName(const char *name, uint32_t length)
\details
The event \b SetHostName is created when the function \ref netSYS_SetHostName is executed.

\b Value in the Event Recorder shows:
  - \b name: local host name that has been set.
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_UninitSystem(void)
\details
The event \b UninitSystem is created when the function \ref netUninitialize is executed.
*/

/**
\fn __STATIC_INLINE void EvrNetSYS_UninitComplete(void)
\details
The event \b UninitComplete is created when the function \ref netUninitialize successfully
de-initialized the Network component.
*/

/**
@}
*/

/**
\defgroup net_evr_mem_func NetMEM: Memory Management
\brief Events generated by the Network - Memory Management functions
\details
The Network Memory Management functions generate events that inform about the dynamic
memory management events and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_InitMemory(void *base, uint32_t size, uint32_t limit0, uint32_t limit1)
\details
The event \b InitMemory is created when the Network Memory Management is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b base:    memory pool base address.
  - \b size:    size of the memory pool in bytes.
  - \b limit_0: upper limit for ethernet and BSD receive buffering in bytes.
  - \b limit_1: upper limit for TCP send buffering in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_AllocMemory(void *mem, uint32_t size, uint32_t used, uint32_t blocks)
\details
The event \b AllocMemory is created when the Network Component attempts to allocate memory.

\b Value in the Event Recorder shows:
  - \b mem:    address of the allocated memory block.
  - \b size:   requested size of the memory block to allocate in bytes.
  - \b used:   size of the cumulative allocated space in the memory pool in bytes.
  - \b blocks: number of allocated memory blocks.
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_AllocLimitExceeded(uint32_t size, uint32_t used, uint32_t blocks)
\details
The event \b AllocMemory is created when the Network Component failed to allocate memory due
to exceeded threshold level \b limit_0. This is not critical failure and the system will try
to allocate memory again.

\b Value in the Event Recorder shows:
  - \b size:   requested size of the memory block to allocate in bytes.
  - \b used:   size of the cumulative allocated space in the memory pool in bytes.
  - \b blocks: number of allocated memory blocks.
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_AllocOutOfMemory(uint32_t size, uint32_t used, uint32_t blocks)
\details
The event \b AllocOutOfMemory is created when the Network Component failed to allocate
memory because the available memory is exhausted.

\b Value in the Event Recorder shows:
  - \b size:   requested size of the memory block to allocate in bytes.
  - \b used:   size of the cumulative allocated space in the memory pool in bytes.
  - \b blocks: number of allocated memory blocks.

\note
The size of allocated space (\b used) is smaller than the size of the memory pool
(\b pool_size), because additional memory is needed internally for handling memory blocks.
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_ShrinkMemory(void *mem, uint32_t new_size)
\details
The event \b ShrinkMemory is created when the Network Component attempts to shrink
the allocated memory block. This happens when the size of the memory needed for the operation
is not known at the beginning. The system assigns the maximum memory size for the required
operation, and shrinks the memory when the data is created and the size is known.

\b Value in the Event Recorder shows:
  - \b mem:      address of the memory block.
  - \b new_size: new size of the memory block in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_FreeMemory(void *mem, uint32_t size, uint32_t used, uint32_t blocks)
\details
The event \b FreeMemory is created when the Network Component attempts to release memory.

\b Value in the Event Recorder shows:
  - \b mem:    address of the memory block.
  - \b size:   size of the memory block to release in bytes.
  - \b used:   size of the cumulative allocated space in the memory pool in bytes after the release.
  - \b blocks: number of allocated memory blocks after the release.
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_FreeInvalidBlock(void *mem)
\details
The event \b FreeInvalidBlock is created when the Network Component attempts to release
invalid memory.

\b Value in the Event Recorder shows:
  - \b mem: address of the memory block.
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_FreeLinkCorrupted(void *link)
\details
The event \b FreeLinkCorrupted is created when the Network Component detects failure
in internal memory handling, when trying to release a memory block. This is a fatal error,
which happens when the memory is overwritten or when the application writes before
or after the end of buffer.

\b Value in the Event Recorder shows:
  - \b link: address of the corrupted link.
*/

/**
\fn __STATIC_INLINE void EvrNetMEM_UninitMemory(void)
\details
The event \b UninitMemory is created when the function \ref netUninitialize is executed.
*/

/**
@}
*/

/**
\defgroup net_evr_eth_func NetETH: ETH Interface
\brief Events generated by the Network - Ethernet Interface functions
\details
The Network Ethernet Interface functions generate events that inform about events in
the ethernet interface and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetETH_InitInterface(uint8_t if_num)
\details
The event \b InitInterface is created when the ethernet interface is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_MacAddressConfigError(uint8_t if_num)
\details
The event \b MacAddressConfigError is created when an error is found in the ethernet
MAC configuration while the ethernet interface is initializing. The event is generated
when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_VlanConfigError(uint8_t if_num)
\details
The event \b VlanConfigError is created when the VLAN is enabled in the ethernet
configuration, but it is not supported in the ethernet driver. An event is generated
when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_VlanInitError(uint8_t if_num)
\details
The event \b VlanInitError is created when the ethernet driver fails to initialize
the VLAN tag. An event is generated when the function \ref netInitialize is executed
and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_PhyDriverConfigError(uint8_t if_num)
\details
The event \b PhyDriverConfigError is created when the ethernet interface failed to
initialize the PHY driver, because the requested features are not supported in the
driver. The event is generated when the function \ref netInitialize is executed and is
a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_PhyDriverInitError(uint8_t if_num)
\details
The event \b PhyDriverConfigError is created when the ethernet interface failed to
initialize the PHY driver. The event is generated when the function \ref netInitialize
is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_Ip4ConfigError(uint8_t if_num)
\details
The event \b Ip4ConfigError is created when an error is found in IPv4 configuration for
the ethernet interface.

The error is in one of the following configurations:
- IP Address
- Subnet mask
- Default Gateway
- Primary DNS Server
- Secondary DNS Server

The event is created when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_Ip6ConfigError(uint8_t if_num)
\details
The event \b Ip6ConfigError is created when an error is found in IPv6 configuration for
the ethernet interface.

The error is in one of the following configurations:
- IPv6 Address
- Default Gateway
- Primary DNS Server
- Secondary DNS Server

The event is created when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_ThreadCreateFailed(uint8_t if_num)
\details
The event \b ThreadCreateFailed is generated, if the function \ref netInitialize failed
to create the ethernet interface thread.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SemaphoreCreateFailed(uint8_t if_num)
\details
The event \b SemaphoreCreateFailed is generated, if the function \ref netInitialize could
not create the semaphore for the ethernet interface.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_GetOptionInvalidParameter(uint8_t if_num)
\details
The event \b GetOptionInvalidParameter is created, when invalid input parameter is provided
for the internal \e get_option function. This happens when the function \ref netIF_GetOption
for the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetOptionInvalidParameter(uint8_t if_num)
\details
The event \b SetOptionInvalidParameter is created, when invalid input parameter is provided
for the internal \e set_option function. This happens when the function \ref netIF_SetOption
for the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetMacAddress(uint8_t if_num, const uint8_t *mac_addr)
\details
The event \b SetMacAddress is created when the MAC address for the ethernet interface
is set in the driver. This happens when the ethernet interface is initialized or when
the function \ref netIF_SetOption for the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b mac:    MAC address to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetVlanIdentifier(uint8_t if_num, uint16_t vlan_id)
\details
The event \b SetVlanIdentifier is created when the VLAN identifier for the ethernet interface
is set in the driver. This happens when the ethernet interface is initialized or when
the function \ref netIF_SetOption for the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  ethernet interface number.
  - \b vlan_id: VLAN identifier to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp4Address(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b SetIp4Address is created when the static IPv4 address is set for
the ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b ip:     static IPv4 address to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp4SubnetMask(uint8_t if_num, const uint8_t *net_mask)
\details
The event \b SetIp4SubnetMask is created when IPv4 subnet mask is set for the ethernet
interface. This happens when the function \ref netIF_SetOption for the ethernet interface
is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b mask:   IPv4 subnet mask to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp4DefaultGateway(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b SetIp4DefaultGateway is created when IPv4 default gateway address is set
for the ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b gw:     IPv4 address of default gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp4PrimaryDNS(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b SetIp4PrimaryDNS is created when IPv4 primary DNS server address is set
for the ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  ethernet interface number.
  - \b pri_dns: IPv4 address of the primary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp4SecondaryDNS(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b SetIp4SecondaryDNS is created when IPv4 secondary DNS server address is
set for the ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  ethernet interface number.
  - \b sec_dns: IPv4 address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp4Mtu(uint8_t if_num, uint16_t mtu)
\details
The event \b SetIp4Mtu is created when the Maximum Transmission Unit is set for the
ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b mtu:    IPv4 MTU to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp6Address(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b SetIp6Address is created when the static IPv6 address is set for the
ethernet interface. This happens when the function \ref netIF_SetOption for the ethernet
interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b ip:     static IPv6 address to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp6DefaultGateway(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b SetIp6DefaultGateway is created when IPv6 default gateway address is set
for the ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b gw:     IPv6 address of default gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp6PrimaryDNS(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b SetIp6PrimaryDNS is created when IPv6 primary DNS server address is set
for the ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  ethernet interface number.
  - \b pri_dns: IPv6 address of the primary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp6SecondaryDNS(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b SetIp6SecondaryDNS is created when IPv6 secondary DNS server address is set
for the ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  ethernet interface number.
  - \b sec_dns: IPv6 address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp6PrefixLength(uint8_t if_num, uint8_t pref_len)
\details
The event \b SetIp6PrefixLength is created when the IPv6 subnet prefix length is
set for the ethernet interface. This happens when the function \ref netIF_SetOption
for the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:   ethernet interface number.
  - \b pref_len: IPv6 prefix length to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SetIp6Mtu(uint8_t if_num, uint16_t mtu)
\details
The event \b SetIp6Mtu is created when the Maximum Transmission Unit is set for the
ethernet interface. This happens when the function \ref netIF_SetOption for
the ethernet interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b mtu:    IPv6 MTU to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SendFrame(uint8_t if_num, uint32_t length, uint8_t ip_version)
\details
The event \b SendFrame is created when the ethernet frame header is constructed
for the frame and the data is sent to the ethernet driver.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b len:    length of the ethernet frame payload.
  - \b ver:    IP protocol version (IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetETH_LinkDownError(uint8_t if_num)
\details
The event \b LinkDownError is created when the network library wants to send the frame
on the ethernet interface, but the link is down.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SendDataTooLarge(uint8_t if_num, uint32_t length, uint32_t max_length)
\details
The event \b SendDataTooLarge is created when the length of the data to send is
larger than the ethernet MTU (1500 bytes).

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b len:    length of the data to send in bytes.
  - \b max:    maximum allowed data length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SendIp4Disabled(uint8_t if_num)
\details
The event \b SendIp4Disabled is created when the internal \e send_frame function does
not send the IPv4 frame, because IPv4 is disabled in the interface configuration.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_Ip4LocalAddressUndefined(uint8_t if_num)
\details
The event \b Ip4LocalAddressUndefined is created when the internal \e send_frame function
wants to send the unicast frame, but the local IP address is not valid. This usually happens
when the DHCP client does not yet assign the IP address.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b addr:   0.0.0.0 (undefined address).
*/

/**
\fn __STATIC_INLINE void EvrNetETH_Ip4MacAddressUnresolved(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b Ip4MacAddressUnresolved is created when the internal \e send_frame function
wants to send the frame, but the destination MAC address is not resolved.
This usually happens when the destination IP address is external and the gateway
is not reachable.

\b Value in the Event Recorder shows:
  - \b if_num:   ethernet interface number.
  - \b dst_addr: destination IPv4 address to send to.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_EnqueueFrame(uint8_t if_num, uint8_t ca_entry, uint32_t length)
\details
The event \b EnqueueFrame is created when the internal \e send_frame function wants to send
the frame to the local network, but the destination MAC address is not resolved. The ARP or
NDP address resolver starts and enqueues the frame. When the address resolver completes,
enqueued frames are sent to resolved destination MAC address.

\b Value in the Event Recorder shows:
  - \b if_num:   ethernet interface number.
  - \b ca_entry: ARP/NDP cache entry identifier.
  - \b len:      length of the queued frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SendIp6Disabled(uint8_t if_num)
\details
The event \b SendIp6Disabled is created when the internal \e send_frame function does
not send the IPv6 frame, because IPv6 is disabled in the interface configuration.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_Ip6LocalAddressUndefined(uint8_t if_num)
\details
The event \b Ip6LocalAddressUndefined is created when the internal \e send_frame function
wants to send the unicast frame, but the local IPv6 address is not valid. This usually happens
when the DHCPv6 client does not yet assign the IPv6 address.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b addr:   0:0:0:0:0:0:0:0 (undefined address).
*/

/**
\fn __STATIC_INLINE void EvrNetETH_Ip6MacAddressUnresolved(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b Ip6MacAddressUnresolved is created when the internal \e send_frame function
wants to send the frame, but the destination MAC address is not resolved.
This happens when the Neighbor Discovery is in progress for the on-link destination
IPv6 address or when the gateway is not reachable for external IPv6 address.

\b Value in the Event Recorder shows:
  - \b if_num:   ethernet interface number.
  - \b dst_addr: destination IPv6 address to send to.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_InvalidIpVersion(uint8_t if_num, uint8_t ip_version)
\details
The event \b InvalidIpVersion is created when the internal \e send_frame function
wants to send the frame, but the requested Internet Protocol version is not recognized.
This might happen when the requested IP protocol version is IPv6, but the Network
Component library that is used supports IPv4 only.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b ver:    requested IP protocol version.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_ShowFrameHeader(const void *eth_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the ethernet header.

\b Value in the Event Recorder shows:
  - \b dst:   destination MAC address.
  - \b src:   source MAC address.
  - \b proto: protocol type (ARP, IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetETH_LinkDownStatus(uint8_t if_num)
\details
The event \b LinkDownStatus is created when the network library detects a change
in the state of the ethernet connection that is interrupted.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_LinkUpStatus(uint8_t if_num, uint8_t link_info)
\details
The event \b LinkUpStatus is created when the network library detects a change
in the state of the ethernet connection that becomes connected.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b speed:  link speed (10 Mbit, 100 Mbit, 1 Gbit).
  - \b duplex: link duplex (Half, Full).
*/

/**
\fn __STATIC_INLINE void EvrNetETH_ReceiveFrame(uint8_t if_num, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the ethernet frame.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b len:    length of the received ethernet frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_VlanInvalid(uint8_t if_num)
\details
The event \b VlanInvalid is created when the network library receives the ethernet frame
with VLAN tag, but the received VLAN tag is not the same as the locally set VLAN tag.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_Ip4Disabled(uint8_t if_num)
\details
The event \b Ip4Disabled is created when the network library receives the ethernet frame
with protocol type ARP or IPv4, but IPv4 protocol is disabled in the ethernet interface
configuration.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_Ip6Disabled(uint8_t if_num)
\details
The event \b Ip6Disabled is created when the network library receives the ethernet frame
with protocol type IPv6, but IPv6 protocol is disabled in the ethernet interface configuration.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_ProtocolUnknown(uint8_t if_num, uint16_t protocol)
\details
The event \b ProtocolUnknown is created when the network library receives an ethernet frame,
but the received ethernet protocol type is not recognized.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b proto:  received ethernet protocol type.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SendRawFrame(uint8_t if_num, uint32_t length)
\details
The event \b SendRawFrame is created when the function \ref netETH_SendRaw is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b len:    length of the data to send in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_SendRawInvalidParameter(uint8_t if_num)
\details
The event \b SendRawInvalidParameter is created when an invalid input parameter is specified
for the \ref netETH_SendRaw function.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_OutputLowLevel(uint8_t if_num, uint32_t length)
\details
The event \b OutputLowLevel is created when the ethernet interface wants to pass a frame
to the ethernet driver.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
  - \b len:    length of the frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetETH_UninitInterface(uint8_t if_num)
\details
The event \b UninitInterface is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b if_num: ethernet interface number.
*/

/**
@}
*/

/**
\defgroup net_evr_wifi_func NetWiFi: WiFi Interface
\brief Events generated by the Network - WiFi Interface functions
\details
The Network WiFi Interface functions generate events that inform about events in
the WiFi interface and help in troubleshooting.

WiFi Interface uses bypass or transparent mode. In this mode, the ethernet frames
are exchanged.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_InitInterface(uint8_t if_num)
\details
The event \b InitInterface is created when the WiFi interface is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_DriverInitFailed(uint8_t if_num)
\details
The event \b DriverInitFailed is created when the WiFi interface fails to initialize
and turn on the WiFi driver due to an internal error in the WiFi driver. The event
is generated when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetBypassModeFailed(uint8_t if_num)
\details
The event \b SetBypassModeFailed is created when the WiFi interface failed to
initialize the WiFi driver in bypass mode, because the requested features are not
supported in the driver. The event is generated when the function \ref netInitialize
is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_GetMacAddressFailed(uint8_t if_num)
\details
The event \b GetMacAddressFailed is created when the the WiFi interface failed to
retrieve the MAC address while the WiFi interface is initializing. The MAC address
is available in the WiFi module, but can not be retrieved. The event is generated
when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_DriverMacAddress(uint8_t if_num, const uint8_t *mac_addr)
\details
The event \b DriverMacAddress is created when the MAC address for the WiFi interface
is available in the driver. The MAC address is read-only and can not be changed from
the user application. The event is generated when the function \ref netInitialize
is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b mac:    MAC address retrieved from the driver.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_MacAddressConfigError(uint8_t if_num)
\details
The event \b MacAddressConfigError is created when an error is found in the WiFi
MAC configuration while the WiFi interface is initializing. The event is generated
when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetMacAddressFailed(uint8_t if_num)
\details
The event \b SetMacAddressFailed is created when the WiFi interface failed to
set the MAC address while the WiFi interface is initializing. The MAC address that
is configured in the WiFi configuration can not be set up in the WiFi module. The event
is generated when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Ip4ConfigError(uint8_t if_num)
\details
The event \b Ip4ConfigError is created when an error is found in IPv4 configuration for
the WiFi interface.

The error is in one of the following configurations:
- IP Address
- Subnet mask
- Default Gateway
- Primary DNS Server
- Secondary DNS Server

The event is created when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Ip6ConfigError(uint8_t if_num)
\details
The event \b Ip6ConfigError is created when an error is found in IPv6 configuration for
the WiFi interface.

The error is in one of the following configurations:
- IPv6 Address
- Default Gateway
- Primary DNS Server
- Secondary DNS Server

The event is created when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_ThreadCreateFailed(uint8_t if_num)
\details
The event \b ThreadCreateFailed is generated, if the function \ref netInitialize failed
to create the WiFi interface thread.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SemaphoreCreateFailed(uint8_t if_num)
\details
The event \b SemaphoreCreateFailed is generated, if the function \ref netInitialize could
not create the semaphore for the WiFi interface.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_GetOptionInvalidParameter(uint8_t if_num)
\details
The event \b GetOptionInvalidParameter is created, when invalid input parameter is
provided for the internal \e get_option function. This happens when the function
\ref netIF_GetOption for the WiFi interface or the control function of the driver
\ref netWiFi_GetOption is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetOptionInvalidParameter(uint8_t if_num)
\details
The event \b SetOptionInvalidParameter is created, when invalid input parameter is
provided for the internal \e set_option function. This happens when the function
\ref netIF_SetOption for the WiFi interface  or the control function of the driver
\ref netWiFi_SetOption is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetMacAddress(uint8_t if_num, const uint8_t *mac_addr)
\details
The event \b SetMacAddress is created when the MAC address for the WiFi interface
is set in the driver. This happens when the WiFi interface is initialized or when
the function \ref netIF_SetOption for the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b mac:    MAC address to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp4Address(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b SetIp4Address is created when the static IPv4 address is set for
the WiFi interface. This happens when the function \ref netIF_SetOption for
the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b ip:     static IPv4 address to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp4SubnetMask(uint8_t if_num, const uint8_t *net_mask)
\details
The event \b SetIp4SubnetMask is created when IPv4 subnet mask is set for the WiFi
interface. This happens when the function \ref netIF_SetOption for the WiFi interface
is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b mask:   IPv4 subnet mask to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp4DefaultGateway(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b SetIp4DefaultGateway is created when IPv4 default gateway address is set
for the WiFi interface. This happens when the function \ref netIF_SetOption for
the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b gw:     IPv4 address of default gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp4PrimaryDNS(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b SetIp4PrimaryDNS is created when IPv4 primary DNS server address is set
for the WiFi interface. This happens when the function \ref netIF_SetOption for
the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  WiFi interface number.
  - \b pri_dns: IPv4 address of the primary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp4SecondaryDNS(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b SetIp4SecondaryDNS is created when IPv4 secondary DNS server address is
set for the WiFi interface. This happens when the function \ref netIF_SetOption for
the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  WiFi interface number.
  - \b sec_dns: IPv4 address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp4Mtu(uint8_t if_num, uint16_t mtu)
\details
The event \b SetIp4Mtu is created when the Maximum Transmission Unit is set for
the WiFi interface. This happens when the function \ref netIF_SetOption for
the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b mtu:    IPv4 MTU to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp6Address(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b SetIp6Address is created when the static IPv6 address is set for the
WiFi interface. This happens when the function \ref netIF_SetOption for the WiFi
interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b ip:     static IPv6 address to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp6DefaultGateway(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b SetIp6DefaultGateway is created when IPv6 default gateway address is
set for the WiFi interface. This happens when the function \ref netIF_SetOption for
the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b gw:     IPv6 address of default gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp6PrimaryDNS(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b SetIp6PrimaryDNS is created when IPv6 primary DNS server address is
set for the WiFi interface. This happens when the function \ref netIF_SetOption for
the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  WiFi interface number.
  - \b pri_dns: IPv6 address of the primary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp6SecondaryDNS(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b SetIp6SecondaryDNS is created when IPv6 secondary DNS server address
is set for the WiFi interface. This happens when the function \ref netIF_SetOption
for the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:  WiFi interface number.
  - \b sec_dns: IPv6 address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp6PrefixLength(uint8_t if_num, uint8_t pref_len)
\details
The event \b SetIp6PrefixLength is created when the IPv6 subnet prefix length is
set for the WiFi interface. This happens when the function \ref netIF_SetOption
for the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num:   WiFi interface number.
  - \b pref_len: IPv6 prefix length to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetIp6Mtu(uint8_t if_num, uint16_t mtu)
\details
The event \b SetIp6Mtu is created when the Maximum Transmission Unit is set for the
WiFi interface. This happens when the function \ref netIF_SetOption for
the WiFi interface is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b mtu:    IPv6 MTU to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Scan(uint8_t if_num, uint32_t max_num)
\details
The event \b Scan is created when the function \ref netWiFi_Scan is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b max:    maximum number of wireless networks to scan.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_ScanWrongMode(uint8_t if_num, uint32_t mode)
\details
The event \b ScanWrongMode is created when the function \ref netWiFi_Scan is executed
in WiFi Access Point mode.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b mode:   WiFi interface operating mode (Station, AP).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_ScanInvalidParameter(uint8_t if_num)
\details
The event \b ScanInvalidParameter is created when invalid input parameter is
provided for the \ref netWiFi_Scan function.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_ScanComplete(uint8_t if_num, uint32_t num)
\details
The event \b ScanComplete is created when execution the function \ref netWiFi_Scan
is complete.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b num:    number of available wireless networks found.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_GetOption(uint8_t if_num, uint32_t opt)
\details
The event \b GetOption is created when the function \ref netWiFi_GetOption is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b opt:    option to retrieve from the WiFi driver.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SetOption(uint8_t if_num, uint32_t opt)
\details
The event \b SetOption is created when the function \ref netWiFi_SetOption is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b opt:    option to set in the WiFi driver.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Activate(uint8_t if_num, uint32_t mode)
\details
The event \b Activate is created when the function \ref netWiFi_Activate is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b mode:   WiFi interface operating mode (Station, AP).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_ActivateInvalidParameter(uint8_t if_num)
\details
The event \b ActivateInvalidParameter is created when invalid input parameter is
provided for the \ref netWiFi_Activate function.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Deactivate(uint8_t if_num, uint32_t mode)
\details
The event \b Deactivate is created when the function \ref netWiFi_Deactivate is executed.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b mode:   WiFi interface operating mode (Station, AP).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_DeactivateInvalidParam(uint8_t if_num)
\details
The event \b DeactivateInvalidParam is created when invalid input parameter is
provided for the \ref netWiFi_Deactivate function.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_GetNetInfo(uint8_t if_num)
\details
The event \b GetNetInfo is created when the function \ref netWiFi_GetNetInfo is executed.

\b Value in the Event Recorder shows:
 - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_GetNetInfoWrongMode(uint8_t if_num, uint32_t mode)
\details
The event \b GetNetInfoWrongMode is created when the function \ref netWiFi_GetNetInfo
is executed in WiFi Access Point mode.

\b Value in the Event Recorder shows:
 - \b if_num: WiFi interface number.
 - \b mode:   WiFi interface operating mode (Station, AP).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_GetNetInfoInvalidParam(uint8_t if_num)
\details
The event \b GetNetInfoInvalidParam is created when invalid input parameter is
provided for the \ref netWiFi_GetNetInfo function.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SendFrame(uint8_t if_num, uint32_t length, uint8_t ip_version)
\details
The event \b SendFrame is created when the ethernet frame header is constructed
for the frame and the data is sent to the WiFi driver.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b len:    length of the ethernet frame payload.
  - \b ver:    IP protocol version (IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_NotConnected(uint8_t if_num)
\details
The event \b NotConnected is created when the network library wants to send the frame
on the WiFi interface, but the wireless station is not connected.

\b Value in the Event Recorder shows:
 - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SendDataTooLarge(uint8_t if_num, uint32_t length, uint32_t max_length)
\details
The event \b SendDataTooLarge is created when the length of the data to send is
larger than the WiFi MTU (1500 bytes).

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b len:    length of the data to send in bytes.
  - \b max:    maximum allowed data length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SendIp4Disabled(uint8_t if_num)
\details
The event \b SendIp4Disabled is created when the internal \e send_frame function does
not send the IPv4 frame, because IPv4 is disabled in the interface configuration.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Ip4LocalAddressUndefined(uint8_t if_num)
\details
The event \b Ip4LocalAddressUndefined is created when the internal \e send_frame function
wants to send the unicast frame, but the local IP address is not valid. This usually happens
when the DHCP client does not yet assign the IP address.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b addr:   0.0.0.0 (undefined address).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Ip4MacAddressUnresolved(uint8_t if_num, const uint8_t *ip4_addr)
\details
The event \b Ip4MacAddressUnresolved is created when the internal \e send_frame function
wants to send the frame, but the destination MAC address is not resolved.
This usually happens when the destination IP address is external and the gateway
is not reachable.

\b Value in the Event Recorder shows:
  - \b if_num:   WiFi interface number.
  - \b dst_addr: destination IPv4 address to send to.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_EnqueueFrame(uint8_t if_num, uint32_t ca_entry, uint32_t length)
\details
The event \b EnqueueFrame is created when the internal \e send_frame function wants to send
the frame to the local network, but the destination MAC address is not resolved. The ARP or
NDP address resolver starts and enqueues the frame. When the address resolver completes,
enqueued frames are sent to resolved destination MAC address.

\b Value in the Event Recorder shows:
  - \b if_num:   WiFi interface number.
  - \b ca_entry: ARP/NDP cache entry identifier.
  - \b len:      length of the queued frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_SendIp6Disabled(uint8_t if_num)
\details
The event \b SendIp6Disabled is created when the internal \e send_frame function does
not send the IPv6 frame, because IPv6 is disabled in the interface configuration.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Ip6LocalAddressUndefined(uint8_t if_num)
\details
The event \b Ip6LocalAddressUndefined is created when the internal \e send_frame function
wants to send the unicast frame, but the local IPv6 address is not valid. This usually happens
when the DHCPv6 client does not yet assign the IPv6 address.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b addr:   0:0:0:0:0:0:0:0 (undefined address).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Ip6MacAddressUnresolved(uint8_t if_num, const uint8_t *ip6_addr)
\details
The event \b Ip6MacAddressUnresolved is created when the internal \e send_frame function
wants to send the frame, but the destination MAC address is not resolved.
This happens when the Neighbor Discovery is in progress for the on-link destination
IPv6 address or when the gateway is not reachable for external IPv6 address.

\b Value in the Event Recorder shows:
  - \b if_num:   WiFi interface number.
  - \b dst_addr: destination IPv6 address to send to.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_InvalidIpVersion(uint8_t if_num, uint8_t ip_version)
\details
The event \b InvalidIpVersion is created when the internal \e send_frame function
wants to send the frame, but the requested Internet Protocol version is not recognized.
This might happen when the requested IP protocol version is IPv6, but the Network
Component library that is used supports IPv4 only.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b ver:    requested IP protocol version.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_ShowFrameHeader(const void *eth_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the ethernet header.

\b Value in the Event Recorder shows:
  - \b dst:   destination MAC address.
  - \b src:   source MAC address.
  - \b proto: protocol type (ARP, IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_LinkStateChange(uint8_t if_num, uint32_t state)
\details
The event \b LinkStateChange is created when the network library detects a change
in the state of the WiFi connection that is connected or disconnected.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b state:  connection state (Connected, Disconnected).
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_ReceiveFrame(uint8_t if_num, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the WiFi frame.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b len:    length of the received WiFi frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Ip4Disabled(uint8_t if_num)
\details
The event \b Ip4Disabled is created when the network library receives the WiFi frame
with protocol type ARP or IPv4, but IPv4 protocol is disabled in the WiFi interface
configuration.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_Ip6Disabled(uint8_t if_num)
\details
The event \b Ip6Disabled is created when the network library receives the WiFi frame
with protocol type IPv6, but IPv6 protocol is disabled in the WiFi interface configuration.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_ProtocolUnknown(uint8_t if_num, uint16_t protocol)
\details
The event \b ProtocolUnknown is created when the network library receives a WiFi frame,
but the received ethernet protocol type is not recognized.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b proto:  received ethernet protocol type.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_OutputLowLevel(uint8_t if_num, uint32_t length)
\details
The event \b OutputLowLevel is created when the WiFi interface wants to pass a frame
to the WiFi driver.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
  - \b len:    length of the frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_TxQueueOverflow(uint8_t if_num)
\details
The event \b TxQueueOverflow is created when the network library wants to pass the
frame to the WiFi interface, but the interface transmit queue is filled. Therefore,
the frame is not sent.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_OutputNoMemory(uint8_t if_num)
\details
The event \b OutputNoMemory is created when the network library wants to pass the
frame to the WiFi interface, but the available memory is exhausted. Therefore,
the frame is not sent.

\b Value in the Event Recorder shows:
  - \b if_num: WiFi interface number.
*/

/**
\fn __STATIC_INLINE void EvrNetWiFi_UninitInterface(uint8_t if_num)
\details
The event \b UninitInterface is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b wifi: WiFi interface name.
*/

/**
@}
*/

/**
\defgroup net_evr_ppp_func NetPPP: PPP Interface
\brief Events generated by the Network - PPP Interface functions
\details
The Network PPP Interface functions generate events that inform about events in the
PPP network interface and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_InitInterface(void)
\details
The event \b InitInterface is created when the PPP interface is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b ppp: PPP interface name.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ThreadCreateFailed(void)
\details
The event \b ThreadCreateFailed is generated, if the function \ref netInitialize failed
to create the PPP interface thread.

\b Value in the Event Recorder shows:
  - \b netif: PPP interface name.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_SemaphoreCreateFailed(void)
\details
The event \b SemaphoreCreateFailed is generated, if the function \ref netInitialize could
not create the semaphore for the PPP interface.

\b Value in the Event Recorder shows:
  - \b netif: PPP interface name.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_GetOptionInvalidParameter(void)
\details
The event \b GetOptionInvalidParameter is created, when invalid input parameter is provided
for the internal \e get_option function. This happens when the function \ref netIF_GetOption
for the PPP interface is executed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_SetOptionInvalidParameter(void)
\details
The event \b SetOptionInvalidParameter is created, when invalid input parameter is provided
for the internal \e set_option function. This happens when the function \ref netIF_SetOption
for the PPP interface is executed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_SetIp4Address(const uint8_t *ip4_addr)
\details
The event \b SetIp4Address is created when the static IPv4 address is set for the PPP interface.
This happens when the function \ref netIF_SetOption for the PPP interface is executed.

\b Value in the Event Recorder shows:
  - \b ip: static IPv4 address to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_SetIp4PrimaryDNS(const uint8_t *ip4_addr)
\details
The event \b SetIp4PrimaryDNS is created when IPv4 primary DNS server address is set
for the PPP interface. This happens when the function \ref netIF_SetOption for
the PPP interface is executed.

\b Value in the Event Recorder shows:
  - \b pri_dns: IPv4 address of the primary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_SetIp4SecondaryDNS(const uint8_t *ip4_addr)
\details
The event \b SetIp4SecondaryDNS is created when IPv4 secondary DNS server address is set
for the PPP interface. This happens when the function \ref netIF_SetOption for
the PPP interface is executed.

\b Value in the Event Recorder shows:
  - \b sec_dns: IPv4 address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_SetIp4Mtu(uint16_t mtu)
\details
The event \b SetIp4Mtu is created when the Maximum Transmission Unit is set for the
PPP interface. This happens when the function \ref netIF_SetOption for
the PPP interface is executed.

\b Value in the Event Recorder shows:
  - \b mtu: IPv4 MTU to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ReceiveFrame(uint16_t protocol, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the frame
on the PPP interface.

\b Value in the Event Recorder shows:
  - \b proto: protocol type (LCP, PAP, CHAP, IPCP, IP).
  - \b len:   length of the received PPP frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the frame
on the PPP interface that is too short. The PPP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChecksumFailed(uint32_t length)
\details
The event \b ChecksumFailed is created when the network library has checked the checksum
on the received PPP frame and the verification failed. The PPP frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_CtrlByteInvalid(uint8_t ctrl, uint8_t ctrl_valid)
\details
The event \b CtrlByteInvalid is created when the Control field value in the received
PPP frame is not valid (should be 3).

\b Value in the Event Recorder shows:
  - \b ctrl:  received control byte.
  - \b valid: expected control byte.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_SendFrame(uint16_t protocol, uint32_t length)
\details
The event \b SendFrame is created when the PPP frame header is constructed and
the frame is sent for transmission.

\b Value in the Event Recorder shows:
  - \b proto: protocol type (LCP, PAP, CHAP, IPCP, IP).
  - \b len:   length of the frame to send in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_InvalidIpVersion(uint8_t ip_version)
\details
The event \b InvalidIpVersion is created when the internal \e send_frame function
wants to send the frame, but the requested Internet Protocol version is not recognized.

\b Value in the Event Recorder shows:
  - \b ver: requested IP protocol version.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_NetworkLayerDown(void)
\details
The event \b NetworkLayerDown is created when the internal \e send_frame function
wants to send an IP frame, but the state of the PPP network layer is down. This means
the NCP has not configured the network protocol layer yet. Therefore, the IP frame
is not sent.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_SendDataTooLarge(uint32_t length, uint32_t max_length)
\details
The event \b SendDataTooLarge is created when the length of the data to send is
larger than the PPP MTU (1500 bytes).

\b Value in the Event Recorder shows:
  - \b len: length of the data to send in bytes.
  - \b max: maximum allowed data length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_NoMemoryError(void)
\details
The event \b NoMemoryError is created when the internal \e send_frame function wants
to allocate the memory for the frame to be sent to the PPP interface, but no memory
is available. Therefore, the frame is not sent.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_QueueAddTransmit(void)
\details
The event \b QueueAddTransmit is created when the internal \e send_frame function adds
the frame to be sent to the transmit queue of the PPP interface. The transmit queue is
processed and frames are transmitted in the PPP interface thread.

\b Value in the Event Recorder shows:
  - \b success
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_RejectProtocol(uint16_t protocol)
\details
The event \b RejectProtocol is created when the network library rejects the type
of PPP protocol that is not supported. This event is also generated when the PPP protocol
type is supported, but in the current state of the PPP is not allowed.

\b Value in the Event Recorder shows:
  - \b proto: rejected protocol type.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_RejectCode(uint16_t protocol, uint8_t code)
\details
The event \b RejectCode is created when the network library rejects the control code
that is not supported.

\b Value in the Event Recorder shows:
  - \b code:  rejected control code.
  - \b proto: protocol type for which the control code is rejected (LCP, IPCP).
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_Connect(const char *dial_number, uint32_t length)
\details
The event \b Connect is created when the function \ref netPPP_Connect is executed.

\b Value in the Event Recorder shows:
  - \b dial-number: dial-up number to establish a modem connection.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ConnectInvalidParameter(void)
\details
The event \b ConnectInvalidParameter is created when invalid input parameter is
provided for the \ref netPPP_Connect function.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ConnectWrongState(void)
\details
The event \b ConnectWrongState is created when the function \ref netPPP_Connect
is executed, but the PPP interface is already connected.

\b Value in the Event Recorder shows:
  - \b connected
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_Listen(void)
\details
The event \b Listen is created when the function \ref netPPP_Listen is executed.

\b Value in the Event Recorder shows:
  - \b start
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ListenInvalidParameter(void)
\details
The event \b ListenInvalidParameter is created when invalid input parameter is
provided for the \ref netPPP_Listen function.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ListenWrongState(void)
\details
The event \b ListenWrongState is created when the function \ref netPPP_Listen
is executed, but the PPP interface is already connected.

\b Value in the Event Recorder shows:
  - \b connected
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_Close(void)
\details
The event \b Close is created when the function \ref netPPP_Close is executed.

\b Value in the Event Recorder shows:
  - \b stop
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ShowUsername(const char *username, uint32_t length)
\details
The event \b ShowUsername is created when the network library wants to display
the user name that is used in the \ref netPPP_Connect and \ref netPPP_Listen to
authenticate user.

\b Value in the Event Recorder shows:
  - \b username: user name for the PPP access.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ShowPassword(const char *password, uint32_t length)
\details
The event \b ShowPassword is created when the network library wants to display
the password that is used in the \ref netPPP_Connect and \ref netPPP_Listen to
authenticate user.

\b Value in the Event Recorder shows:
  - \b password: password for the PPP access.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ModemOffline(void)
\details
The event \b ModemOffline is created when the network library detects a change
in the state of the modem connection that is interrupted.

\b Value in the Event Recorder shows:
  - \b off-line
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_DataLinkDown(void)
\details
The event \b DataLinkDown is created when the network library detects that the
PPP data-link connection is not established. This means the LCP protocol is not in
open state and all IPCP frames are thus discarded.

\b Value in the Event Recorder shows:
  - \b discard
*/

/**
\fn  __STATIC_INLINE void EvrNetPPP_UninitInterface(void)
\details
The event \b UninitInterface is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ppp: PPP interface name.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpInit(void)
\details
The event \b LcpInit is created when the PPP interface is initialized or when
the network library wants to shut down or restart the PPP interface. This event indicates
that the LCP protocol is initialized.

\b Value in the Event Recorder shows:
  - \b ppp-lcp
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendConfigRequest(void)
\details
The event \b LcpSendConfigRequest is created when the network library sends a request
to configure the LCP in the LCP negotiation process. This event can be repeated several
times before the LCP negotiation ends and the LCP goes into the open state.

The options that are negotiated are:
- Async control character map (ASYNC)
- Protocol field compression (PFC)
- Address and Control field compression (ACFC)
- Magic number
- Authentication protocol (PAP or CHAP)

\b Value in the Event Recorder shows:
  - \b send
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpNoRetriesLeft(void)
\details
The event \b LcpNoRetriesLeft is created when all retries are used in the
LCP negotiation process. After this event, the PPP interface shuts down.

\b Value in the Event Recorder shows:
  - \b retries: 0
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionCharMap(uint32_t char_map)
\details
The event \b LcpOptionCharMap is created when the network library wants to display
detailed information about the character mapping option that is negotiating.

\b Value in the Event Recorder shows:
  - \b char_map: character mapping in hexadecimal form.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionPfc(void)
\details
The event \b LcpOptionPfc is created when the network library wants to inform
that the Protocol Field Compression option is being negotiated.

\b Value in the Event Recorder shows:
  - \b enable
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionAcfc(void)
\details
The event \b LcpOptionAcfc is created when the network library wants to inform
that the Address and Control Field Compression option is being negotiated.

\b Value in the Event Recorder shows:
  - \b enable
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionMagicNumber(uint32_t magic_number)
\details
The event \b LcpOptionCharMap is created when the network library wants to display
detailed information about the magic number option that is negotiating.

\b Value in the Event Recorder shows:
  - \b magic_num: 32-bit magic number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionAuthPap(void)
\details
The event \b LcpOptionAuthPap is created when the network library wants to inform
that the PAP authentication option is being negotiated.

\b Value in the Event Recorder shows:
  - \b enable
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionAuthChapMd5(void)
\details
The event \b LcpOptionAuthChapMd5 is created when the network library wants to inform
that the CHAP-MD5 authentication option is being negotiated.

\b Value in the Event Recorder shows:
  - \b enable
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendEchoRequest(uint32_t magic_number)
\details
The event \b LcpSendEchoRequest is created when the network library wants to verify
if the remote peer is still connected. This is done by sending the LCP echo request to
the remote peer.

\b Value in the Event Recorder shows:
  - \b magic_num: local magic number built into the echo request.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendTerminateRequest(void)
\details
The event \b LcpSendTerminateRequest is created when the network library wants to close
the data-link connection. This is done by sending the LCP terminate request to the remote peer.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendFrame(const void *lcp_header)
\details
The event \b LcpSendFrame is created when the network library sends the LCP frame
on the PPP interface. This event displays detailed information about the LCP protocol header.

\b Value in the Event Recorder shows:
  - \b code: Code (CONF_RQ/ACK/NAK/REJ, TERM_RQ/ACK, CODE_REJ, PROT_REJ, ECHO_RQ/REP, DISC_RQ).
  - \b id:   Identification number.
  - \b len:  Length of the frame including LCP header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpReceiveFrame(const void *lcp_header)
\details
The event \b LcpReceiveFrame is created when the network library receives the LCP frame
on the PPP interface. This event displays detailed information about the LCP protocol header.

\b Value in the Event Recorder shows:
  - \b code: Code (CONF_RQ/ACK/NAK/REJ, TERM_RQ/ACK, CODE_REJ, PROT_REJ, ECHO_RQ/REP, DISC_RQ).
  - \b id:   Identification number.
  - \b len:  Length of the frame including LCP header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpDataLinkUp(void)
\details
The event \b LcpDataLinkUp is created when the network library detects that the
PPP data-link connection is established in server mode and needs to be restarted.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionMru(uint16_t mru_size)
\details
The event \b LcpOptionMru is created when the network library received the maximum
receive unit (MRU) option. This is just an advice for optimum performance. Nevertheless,
the interface should accept frames up to 1500 bytes.

\b Value in the Event Recorder shows:
  - \b mru: maximum receive unit.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionAuth(uint16_t auth_type)
\details
The event \b LcpOptionAuth is created when the network library wants to inform about
the type of PPP authentication being negotiated.

\b Value in the Event Recorder shows:
  - \b auth_type: authentication type (PAP, CHAP-MD5).
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionAuthChapNotMd5(void)
\details
The event \b LcpOptionAuthChapNotMd5 is created when the remote peer requires
a CHAP authentication that is not based on MD5 encryption.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpOptionUnknown(uint8_t lcp_option)
\details
The event \b LcpOptionUnknown is created when the LCP configuration option that is
not supported is received. This option is rejected.

\b Value in the Event Recorder shows:
  - \b opt: unknown LCP option.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendReject(void)
\details
The event \b LcpSendReject is created when the network library wants to reject the
configuration option. This is done by sending a LCP reject frame to the remote peer.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendNak(void)
\details
The event \b LcpSendNak is created when the network library wants to not acknowledge
the configuration option. This is done by sending a LCP not acknowledge frame to
the remote peer.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendAck(void)
\details
The event \b LcpSendAck is created when the network library wants to acknowledge the
configuration option. This is done by sending a LCP acknowledge frame to the remote peer.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpWrongAckReceived(uint8_t id, uint8_t id_valid)
\details
The event \b LcpWrongAckReceived is created when the network library receives the
configuration acknowledge, but the LCP identification value is not identical to the
identification value of our LCP request. The configuration ack is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpWrongNakReceived(uint8_t id, uint8_t id_valid)
\details
The event \b LcpWrongNakReceived is created when the network library receives the
configuration not acknowledge, but the LCP identification value is not identical to the
identification value of our LCP request.  The configuration nak is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpConfigAuthFailed(void)
\details
The event \b LcpConfigAuthFailed is created when the network library has not
negotiated the type of authentication. This is a critical error, and the network library
terminates the connection.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpWrongRejectReceived(uint8_t id, uint8_t id_valid)
\details
The event \b LcpWrongRejectReceived is created when the network library receives the
configuration reject, but the LCP identification value is not identical to the
identification value of our LCP request.  The configuration reject is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpEchoMagicNumber(uint32_t magic_number)
\details
The event \b LcpEchoMagicNumber is created when the network library wants to display
detailed information about the received magic number in the LCP echo request.

\b Value in the Event Recorder shows:
  - \b magic_num: peer magic number received in the echo request.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpWrongPeerMagicNumber(uint32_t magic, uint32_t magic_valid)
\details
The event \b LcpWrongPeerMagicNumber is created when the network library receives
the LCP echo request, but received magic number is not the same magic number from
the LCP negotiation. The LCP echo request is therefore ignored.

\b Value in the Event Recorder shows:
  - \b magic_num: received peer magic number.
  - \b valid:     expected peer magic number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendEchoReply(void)
\details
The event \b LcpSendEchoReply is created when the network library receives
the LCP echo request, and wants to send the LCP echo reply.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpWrongEchoReplyReceived(uint8_t id, uint8_t id_valid)
\details
The event \b LcpWrongEchoReplyReceived is created when the network library receives
the LCP echo reply, but the LCP identification value or LCP magic number are not
identical to ours. The echo reply is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpSendTerminateAck(void)
\details
The event \b LcpSendTerminateAck is created when the network library receives
the LCP terminate request, and wants to send the LCP terminate acknowledge.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_LcpUninit(void)
\details
The event \b LcpUninit is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ppp-lcp
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapInit(void)
\details
The event \b PapInit is created when the PPP interface is initialized or when the
network library wants to shut down or restart the PPP interface. This event indicates
that the PAP authentication protocol is initialized.

\b Value in the Event Recorder shows:
  - \b ppp-pap
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapSendAuthRequest(const char *peer_id, uint32_t length)
\details
The event \b PapSendAuthRequest is created when the network library wants to send the
PAP authentication request in client mode. The username is provided when the functions
\ref netPPP_Connect or \ref netPPP_Listen are executed.

\b Value in the Event Recorder shows:
  - \b peer_id: peer identification value.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapShowPassword(const char *password, uint32_t length)
\details
The event \b PapShowPassword is created when the network library wants to display
the password that is used in PAP authentication request. The password is provided when
the functions \ref netPPP_Connect or \ref netPPP_Listen are executed.

\b Value in the Event Recorder shows:
  - \b password: password for the PAP authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapSendFrame(const void *pap_header)
\details
The event \b PapSendFrame is created when the network library sends the PAP frame
on the PPP interface. This event displays detailed information about the PAP protocol header.

\b Value in the Event Recorder shows:
  - \b code: Code (AUTH_RQ, AUTH_ACK, AUTH_NAK).
  - \b id:   Identification number.
  - \b len:  Length of the frame including PAP header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapReceiveFrame(const void *pap_header)
\details
The event \b PapReceiveFrame is created when the network library receives the PAP frame
on the PPP interface. This event displays detailed information about the PAP protocol header.

\b Value in the Event Recorder shows:
  - \b code: Code (AUTH_RQ, AUTH_ACK, AUTH_NAK).
  - \b id:   Identification number.
  - \b len:  Length of the frame including PAP header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapLoginSuccess(void)
\details
The event \b PapLoginSuccess is created when the user is successfully authenticated
using the PAP protocol.

\b Value in the Event Recorder shows:
  - \b succes
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapLoginFailed(void)
\details
The event \b PapLoginFailed is created when the user authentication failed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapWrongAckReceived(uint8_t id, uint8_t id_valid)
\details
The event \b PapWrongAckReceived is created when the network library receives the
authentication acknowledge, but the PAP identification value is not identical to the
identification value of our PAP request. The authentication ack is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapWrongNakReceived(uint8_t id, , uint8_t id_valid)
\details
The event \b PapWrongNakReceived is created when the network library receives the
authentication not acknowledge, but the PAP identification value is not identical to the
identification value of our PAP request.  The authentication nak is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_PapUninit(void)
\details
The event \b PapUninit is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ppp-pap
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapInit(void)
\details
The event \b ChapInit is created when the PPP interface is initialized or when
the network library wants to shut down or restart the PPP interface. This event indicates
that the CHAP authentication protocol is initialized.

\b Value in the Event Recorder shows:
  - \b ppp-chap
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapSendChallenge(const char *name, uint32_t length)
\details
The event \b ChapSendChallenge is created when the network library sends the CHAP challenge frame
on the PPP interface in server mode.

\b Value in the Event Recorder shows:
  - \b name: host name built into CHAP challenge.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapSendFrame(const void *chap_header)
\details
The event \b ChapSendFrame is created when the network library sends the CHAP frame
on the PPP interface. This event displays detailed information about the CHAP protocol header.

\b Value in the Event Recorder shows:
  - \b code: Code (CHALLENGE, RESPONSE, SUCCESS, FAILED).
  - \b id:   Identification number.
  - \b len:  Length of the frame including CHAP header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapReceiveFrame(const void *chap_header)
\details
The event \b ChapReceiveFrame is created when the network library receives the CHAP frame
on the PPP interface. This event displays detailed information about the CHAP protocol header.

\b Value in the Event Recorder shows:
  - \b code: Code (CHALLENGE, RESPONSE, SUCCESS, FAILED).
  - \b id:   Identification number.
  - \b len:  Length of the frame including CHAP header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapWrongResponseReceived(uint8_t id, uint8_t id_valid)
\details
The event \b ChapWrongResponseReceived is created when the network library receives the
CHAP authentication response, but the CHAP identification value is not identical to the
identification value of our CHAP challenge. The authentication response is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapWrongSuccessReceived(uint8_t id, uint8_t id_valid)
\details
The event \b ChapWrongSuccessReceived is created when the network library receives the
CHAP authentication success, but the CHAP identification value is not identical to the
identification value of our CHAP challenge. The authentication success is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapWrongFailureReceived(uint8_t id, uint8_t id_valid)
\details
The event \b ChapWrongFailureReceived is created when the network library receives the
CHAP authentication failure, but the CHAP identification value is not identical to the
identification value of our CHAP challenge. The authentication failure is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapLoginSuccess(void)
\details
The event \b ChapLoginSuccess is created when the user is successfully authenticated
using the CHAP-MD5 protocol.

\b Value in the Event Recorder shows:
  - \b succes
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapLoginFailed(void)
\details
The event \b ChapLoginFailed is created when the user authentication failed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_ChapUninit(void)
\details
The event \b ChapUninit is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ppp-chap
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpInit(void)
\details
The event \b IpcpInit is created when the PPP interface is initialized or when
the network library wants to shut down or restart the PPP interface. This event indicates
that the IPCP protocol is initialized.

\b Value in the Event Recorder shows:
  - \b ppp-ipcp
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpIp4ConfigError(void)
\details
The event \b IpcpIp4ConfigError is created when an error is found in IPv4 configuration for
the PPP interface.

The error is in one of the following configurations:
- IP Address
- Primary DNS Server
- Secondary DNS Server

The event is created when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b ip4
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpSendConfigRequest(void)
\details
The event \b IpcpSendConfigRequest is created when the network library sends a request
to configure the internet protocol in the IPCP negotiation process.

The options that are negotiated are:
- Local IP address
- Primary DNS server
- Secondary DNS server

\b Value in the Event Recorder shows:
  - \b send
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpOptionIpAddress(const uint8_t *ip4_addr)
\details
The event \b IpcpOptionIpAddress is created when the network library wants to display
detailed information about the IP address option that is negotiating.

\b Value in the Event Recorder shows:
  - \b ip: IPv4 address value.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpOptionPrimaryDns(const uint8_t *ip4_addr)
\details
The event \b IpcpOptionPrimaryDns is created when the network library wants to display
detailed information about the primary DNS server option that is negotiating.

\b Value in the Event Recorder shows:
  - \b pri_dns: IPv4 address of the primary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpOptionSecondaryDns(const uint8_t *ip4_addr)
\details
The event \b IpcpOptionSecondaryDns is created when the network library wants to display
detailed information about the secondary DNS server option that is negotiating.

\b Value in the Event Recorder shows:
  - \b sec_dns: IPv4 address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpSendFrame(const void *ipcp_header)
\details
The event \b IpcpSendFrame is created when the network library sends the IPCP frame
on the PPP interface. This event displays detailed information about the IPCP protocol header.

\b Value in the Event Recorder shows:
  - \b code: Code (CONF_RQ/ACK/NAK/REJ, TERM_RQ/ACK, CODE_REJ).
  - \b id:   Identification number.
  - \b len:  Length of the frame including IPCP header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpReceiveFrame(const void *ipcp_header)
\details
The event \b IpcpReceiveFrame is created when the network library receives the IPCP frame
on the PPP interface. This event displays detailed information about the IPCP protocol header.

\b Value in the Event Recorder shows:
  - \b code: Code (CONF_RQ/ACK/NAK/REJ, TERM_RQ/ACK, CODE_REJ).
  - \b id:   Identification number.
  - \b len:  Length of the frame including IPCP header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpOptionUnknown(uint8_t ipcp_option)
\details
The event \b IpcpOptionUnknown is created when the IPCP configuration option that is
not supported is received. This option is rejected.

\b Value in the Event Recorder shows:
  - \b opt: unknown IPCP option.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpSendReject(void)
\details
The event \b IpcpSendReject is created when the network library wants to reject the
configuration option. This is done by sending an IPCP reject frame to the remote peer.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpSendNak(void)
\details
The event \b IpcpSendNak is created when the network library wants to not acknowledge
the configuration option. This is done by sending an IPCP not acknowledge frame to
the remote peer.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpSendAck(void)
\details
The event \b IpcpSendAck is created when the network library wants to acknowledge the
configuration option. This is done by sending an IPCP acknowledge frame to the remote peer.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpWrongAckReceived(uint8_t id, uint8_t id_valid)
\details
The event \b IpcpWrongAckReceived is created when the network library receives the
configuration acknowledge, but the IPCP identification value is not identical to the
identification value of our IPCP request. The configuration ack is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpNetworkLayerUp(void)
\details
The event \b IpcpNetworkLayerUp is created when the network protocol layer is configured.
At this point, IPCP negotiations have been completed and we can exchange IP frames.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpWrongNakReceived(uint8_t id, uint8_t id_valid)
\details
The event \b IpcpWrongNakReceived is created when the network library receives the
configuration not acknowledge, but the IPCP identification value is not identical to the
identification value of our IPCP request.  The configuration nak is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpWrongRejectReceived(uint8_t id, uint8_t id_valid)
\details
The event \b IpcpWrongRejectReceived is created when the network library receives the
configuration reject, but the IPCP identification value is not identical to the
identification value of our IPCP request.  The configuration reject is therefore ignored.

\b Value in the Event Recorder shows:
  - \b id:    received identification number.
  - \b valid: expected identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpWrongSubnet(const uint8_t *ip4_addr)
\details
The event \b IpcpWrongSubnet is created when the remote peer advertised the IP address
which is not in our subnet. This is a critical error and the data-link is terminated.

\b Value in the Event Recorder shows:
  - \b ip: advertised IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpPrimaryDnsRejected(void)
\details
The event \b IpcpPrimaryDnsRejected is created when the remote peer has rejected
the configuration of the primary DNS server. Therefore, primary DNS server will
not be configured in IPCP negotiation.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpSecondaryDnsRejected(void)
\details
The event \b IpcpSecondaryDnsRejected is created when the remote peer has rejected
the configuration of the secondary DNS server. Therefore, secondary DNS server will
not be configured in IPCP negotiation.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpIpAddressRejected(void)
\details
The event \b IpcpIpAddressRejected is created when the remote peer has rejected
the configuration of the local IP address. This is a critical error and the data-link
is terminated.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpNotRequestedOption(uint8_t ipcp_option)
\details
The event \b IpcpNotRequestedOption is created when the remote peer responds to a
configuration option that we did not request. This is a critical error and the data-link
is terminated.

\b Value in the Event Recorder shows:
  - \b opt: received IPCP configuration option.
*/

/**
\fn __STATIC_INLINE void EvrNetPPP_IpcpUninit(void)
\details
The event \b IpcpUninit is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ppp-ipcp
*/

/**
@}
*/

/**
\defgroup net_evr_slip_func NetSLIP: SLIP Interface
\brief Events generated by the Network - SLIP Interface functions
\details
The Network SLIP Interface functions generate events that inform about events in the
SLIP network interface and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_InitInterface(void)
\details
The event \b InitInterface is created when the SLIP interface is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b slip: SLIP interface name.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_Ip4ConfigError(void)
\details
The event \b Ip4ConfigError is created when an error is found in IPv4 configuration for
the SLIP interface.

The error is in one of the following configurations:
- IP Address
- Primary DNS Server
- Secondary DNS Server

The event is created when the function \ref netInitialize is executed and is a critical failure.

\b Value in the Event Recorder shows:
  - \b ip4
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_ThreadCreateFailed(void)
\details
The event \b ThreadCreateFailed is generated, if the function \ref netInitialize failed
to create the SLIP interface thread.

\b Value in the Event Recorder shows:
  - \b netif: SLIP interface name.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_SemaphoreCreateFailed(void)
\details
The event \b SemaphoreCreateFailed is generated, if the function \ref netInitialize could
not create the semaphore for the SLIP interface.

\b Value in the Event Recorder shows:
  - \b netif: SLIP interface name.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_GetOptionInvalidParameter(void)
\details
The event \b GetOptionInvalidParameter is created, when invalid input parameter is provided
for the internal \e get_option function. This happens when the function \ref netIF_GetOption
for the SLIP interface is executed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_SetOptionInvalidParameter(void)
\details
The event \b SetOptionInvalidParameter is created, when invalid input parameter is provided
for the internal \e set_option function. This happens when the function \ref netIF_SetOption
for the SLIP interface is executed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_SetIp4Address(const uint8_t *ip4_addr)
\details
The event \b SetIp4Address is created when the static IPv4 address is set for the SLIP interface.
This happens when the function \ref netIF_SetOption for the SLIP interface is executed.

\b Value in the Event Recorder shows:
  - \b ip: static IPv4 address to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_SetIp4PrimaryDNS(const uint8_t *ip4_addr)
\details
The event \b SetIp4PrimaryDNS is created when IPv4 primary DNS server address is set
for the SLIP interface. This happens when the function \ref netIF_SetOption for
the SLIP interface is executed.

\b Value in the Event Recorder shows:
  - \b pri_dns: IPv4 address of the primary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_SetIp4SecondaryDNS(const uint8_t *ip4_addr)
\details
The event \b SetIp4SecondaryDNS is created when IPv4 secondary DNS server address is set
for the SLIP interface. This happens when the function \ref netIF_SetOption for
the SLIP interface is executed.

\b Value in the Event Recorder shows:
  - \b sec_dns: IPv4 address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_SetIp4Mtu(uint16_t mtu)
\details
The event \b SetIp4Mtu is created when the Maximum Transmission Unit is set for the
SLIP interface. This happens when the function \ref netIF_SetOption for
the SLIP interface is executed.

\b Value in the Event Recorder shows:
  - \b mtu: IPv4 MTU to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_Connect(const char *dial_number, uint32_t length)
\details
The event \b Connect is created when the function \ref netSLIP_Connect is executed.

\b Value in the Event Recorder shows:
  - \b dial-number: dial-up number to establish a modem connection.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_ConnectInvalidParameter(void)
\details
The event \b ConnectInvalidParameter is created when invalid input parameter is
provided for the \ref netSLIP_Connect function.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_ConnectWrongState(void)
\details
The event \b ConnectWrongState is created when the function \ref netSLIP_Connect
is executed, but the SLIP interface is already connected.

\b Value in the Event Recorder shows:
  - \b connected
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_Listen(void)
\details
The event \b Listen is created when the function \ref netSLIP_Listen is executed.

\b Value in the Event Recorder shows:
  - \b start
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_ListenWrongState(void)
\details
The event \b ListenWrongState is created when the function \ref netSLIP_Listen
is executed, but the SLIP interface is already connected.

\b Value in the Event Recorder shows:
  - \b connected
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_Close(void)
\details
The event \b Close is created when the function \ref netSLIP_Close is executed.

\b Value in the Event Recorder shows:
  - \b stop
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_SendFrame(uint32_t length, uint8_t ip_version)
\details
The event \b SendFrame is created when the frame is sent to the SLIP interface.

\b Value in the Event Recorder shows:
  - \b len: length of the frame to send in bytes.
  - \b ver: IP protocol version (IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_InvalidIpVersion(uint8_t ip_version)
\details
The event \b InvalidIpVersion is created when the internal \e send_frame function
wants to send the frame, but the requested Internet Protocol version is not recognized.

\b Value in the Event Recorder shows:
  - \b ver: requested IP protocol version.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_SendDataTooLarge(uint32_t length, uint32_t max_length)
\details
The event \b SendDataTooLarge is created when the length of the data to send is
larger than the SLIP MTU (1500 bytes).

\b Value in the Event Recorder shows:
  - \b len: length of the data to send in bytes.
  - \b max: maximum allowed data length in bytes.
*/
/**
\fn __STATIC_INLINE void EvrNetSLIP_NoMemoryError(void)
\details
The event \b NoMemoryError is created when the internal \e send_frame function wants
to allocate the memory for the frame to be sent to the SLIP interface, but no memory
is available. Therefore, the frame is not sent.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_QueueAddTransmit(void)
\details
The event \b QueueAddTransmit is created when the internal \e send_frame function adds
the frame to be sent to the transmit queue of the SLIP interface. The transmit queue is
processed and frames are transmitted in the SLIP interface thread.

\b Value in the Event Recorder shows:
  - \b success
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_ModemOffline(void)
\details
The event \b ModemOffline is created when the network library detects a change
in the state of the modem connection that is interrupted.

\b Value in the Event Recorder shows:
  - \b off-line
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_ReceiveFrame(uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the frame
on the SLIP interface.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetSLIP_UninitInterface(void)
\details
The event \b UninitInterface is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b slip: SLIP interface name.
*/

/**
@}
*/

/**
\defgroup net_evr_loop_func NetLOOP: Loopback Interface
\brief Events generated by the Network - Loopback Interface functions
\details
The Network Loopback Interface functions generate events that inform about events in the
loopback network interface and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetLOOP_InitInterface(void)
\details
The event \b InitInterface is created when the loopback interface is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b loopback: loopback interface name.
*/

/**
\fn __STATIC_INLINE void EvrNetLOOP_SendFrame(uint32_t length, uint8_t ip_version)
\details
The event \b SendFrame is created when the frame is sent to the loopback interface.

\b Value in the Event Recorder shows:
  - \b len: length of the frame to send in bytes.
  - \b ver: IP protocol version (IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetLOOP_NoMemoryError(void)
\details
The event \b NoMemoryError is created when the internal \e send_frame function wants
to allocate the memory for the frame to be sent to the loopback interface, but no memory
is available. Therefore, the frame is not sent.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetLOOP_ReceiveFrame(uint32_t length, uint8_t ip_version)
\details
The event \b ReceiveFrame is created when the network library receives the frame
on the loopback interface.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b ver: IP protocol version (IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetLOOP_UninitInterface(void)
\details
The event \b UninitInterface is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b loopback: loopback interface name.
*/

/**
@}
*/

/**
\defgroup net_evr_ip4_func NetIP4: IP4 Core
\brief Events generated by the Network - IPv4 Core functions
\details
The Network IPv4 Core functions generate events that report events in the network core
of Internet Protocol version 4 and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_InitCore(uint16_t if_id)
\details
The event \b InitCore is created when the IPv4 core is initialized, that is,
when the function \ref netInitialize is executed. It also informs you of the default
network interface assigned to access the Internet.

\b Value in the Event Recorder shows:
  - \b default: default network interface for internet access.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_ReceiveFrame(uint16_t if_id, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the IPv4 frame.
The frame can come from any interface.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received IPv4 frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the IPv4 frame
that is too short. The received length reported by the interface driver is shorter
than the length encoded in the IPv4 frame header. The physical length of the frame
must be at least equal to the length encoded in IPv4 frame header. Since this is not
true, the frame is discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_InvalidIpVersion(uint16_t if_id, uint8_t ip_version)
\details
The event \b InvalidIpVersion is created when the network library receives an IPv4 frame
that has an unrecognized IP version encoded in the IPv4 header. The IP version should be 4,
all other values are invalid. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ver:   received IP protocol version.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_ShowFrameHeader(const void *ip4_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the IPv4 header.

\b Value in the Event Recorder shows:
  - \b dst:   destination IP address.
  - \b src:   source IP address.
  - \b proto: protocol type (ICMP, IGMP, TCP, UDP).
  - \b id:    identification number.
  - \b frag:  IP flags and fragment offset.
  - \b len:   length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_SourceIpAddressInvalid(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b SourceIpAddressInvalid is created when the network library receives
an IPv4 frame that has an invalid source address. The IP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    received source IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_WrongMulticastProtocol(uint16_t if_id, uint8_t ip4_protocol)
\details
The event \b WrongMulticastProtocol is created when the network library receives
an IPv4 multicast frame that has an invalid protocol type. The IP frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b proto: received protocol type (ICMP, TCP).
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_WrongBroadcastProtocol(uint16_t if_id, uint8_t ip4_protocol)
\details
The event \b WrongBroadcastProtocol is created when the network library receives
an IPv4 directed broadcast frame that has an invalid protocol type. The IP frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b proto: received protocol type (IGMP, ICMP, TCP).
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_WrongDestinationAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b WrongDestinationAddress is created when the network library receives
an IPv4 frame that has an invalid destination address. The IP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    received destination IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_ChecksumFailed(uint16_t if_id, uint32_t length)
\details
The event \b ChecksumFailed is created when the network library has checked the checksum
on the received IPv4 frame header and the verification failed. The IP frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the IPv4 frame header in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_FragmentDfFlagSet(uint16_t if_id, uint16_t frag)
\details
The event \b FragmentDfFlagSet is created when the network library has checked the IP
flags and fragment offset and found the inconsistency. The IP flag Dont Fragment was set
in the frame fragment. The IP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b flags:     IP flags.
  - \b frag_offs: fragment offset.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_FragmentationDisabled(uint16_t if_id)
\details
The event \b FragmentationDisabled is created when the network library receives the
IP frame fragment, but the IP fragmentation is disabled in the network configuration.
The IP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_SendFrame(uint16_t if_id, uint8_t ip4_protocol, uint32_t length)
\details
The event \b SendFrame is created when the internal \e send_frame function wants to
send the IPv4 frame. The IP header is constructed and the frame is sent to the
transfer interface.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b proto: IP protocol type (ICMP, IGMP, TCP, UDP).
  - \b len:   length of the IPv4 frame payload.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_ProtocolUnknown(uint16_t if_id, uint8_t ip4_protocol)
\details
The event \b ProtocolUnknown is created when the network library wants to send
the IPv4 frame, but the provided IPv4 protocol type is not supported. The frame is
therefore not sent.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b proto: unknown protocol type.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_DestinationAddressNull(uint16_t if_id)
\details
The event \b DestinationAddressNull is created when the internal \e send_frame function
wants to send the IPv4 frame and finds out, that the destination address is not
specified. The IP header can not be created and therefore the frame is not sent.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn  __STATIC_INLINE void EvrNetIP4_SetDefaultInterface(uint16_t if_id)
\details
The event \b SetDefaultInterface is created when the system wants to change the
network interface used to access the internet. This usually happens when the
\ref netIF_SetDefault function is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIP4_UninitCore(void)
\details
The event \b UninitCore is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ip4
*/

/**
@}
*/

/**
\defgroup net_evr_icmp_func NetICMP: ICMP Control
\brief Events generated by the Network - ICMP Control functions
\details
The Network ICMP Control functions generate events that report events in the Internet
Control Message Protocol version 4 and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_ReceiveFrame(uint16_t if_id, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the ICMP frame.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_ShowFrameHeader(const void *icmp_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the ICMP header.

\b Value in the Event Recorder shows:
  - \b type:  Type of message (ECHO_REQUEST, ECHO_REPLY, DEST_UNREACH, TIME_EXCEEDED, TRACE_ROUTE).
  - \b code:  Message code byte.
  - \b cksum: Checksum of ICMP frame.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the ICMP frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_ChecksumFailed(uint16_t if_id, uint32_t length)
\details
The event \b ChecksumFailed is created when the network library has checked the checksum
on the received ICMP frame and the verification failed. The ICMP frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the ICMP frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoRequestWrongCode(uint16_t if_id, uint8_t code, uint8_t code_valid)
\details
The event \b EchoRequestWrongCode is created when the network library receives the
ICMP echo request, but the code byte is invalid. The ICMP frame is therefore  discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b code:  received ICMP code.
  - \b valid: expected ICMP code.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoRequestReceived(uint16_t if_id, uint32_t data_length)
\details
The event \b EchoRequestReceived is created when the network library receives
a valid ICMP echo request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the echo request payload in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoReplyDisabled(uint16_t if_id)
\details
The event \b EchoReplyDisabled is created when the network library receives an ECHO request,
but the ECHO response is disabled in the interface configuration for IPv4. This configuration
option is rarely enabled, usually for security reasons only.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_SendEchoReply(uint16_t if_id)
\details
The event \b SendEchoReply is created when the network library wants to send an
ICMP echo reply.

\b Value in the Event Recorder shows:
   - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoReplyReceived(uint16_t if_id, uint32_t data_length)
\details
The event \b EchoReplyReceived is created when the network library receives
a valid ICMP echo reply.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the echo reply payload in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoReplyWrongState(uint16_t if_id)
\details
The event \b EchoReplyWrongState is created when the network library receives
an ICMP echo reply, but the ping process is idle. This means that the network library
does not wait for the echo reply. The echo reply is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoReplyWrongCode(uint16_t if_id, uint8_t code, uint8_t code_valid)
\details
The event \b EchoReplyWrongCode is created when the network library receives the
ICMP echo reply, but the code byte is invalid. The ICMP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b code:  received ICMP code.
  - \b valid: expected ICMP code.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoReplyWrongIpAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b EchoReplyWrongIpAddress is created when the network library receives
an echo reply that came from another IPv4 address instead of the address to which
the echo request was sent. The echo reply is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv4 address of the host that responded.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoReplyWrongId(uint16_t if_id, uint16_t eid, uint16_t eid_valid)
\details
The event \b EchoReplyWrongId is created when the network library receives the
ICMP echo reply, but the echo identifier is not identical to the identifier that was
sent in echo request. The ICMP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b eid:   received echo identifier.
  - \b valid: expected echo identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_EchoReplyWrongPayload(uint16_t if_id)
\details
The event \b EchoReplyWrongPayload is created when the network library receives the
ICMP echo reply, but the data on the payload is not identical to the data that was
sent in echo request. The ICMP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_MessageTypeUnknown(uint16_t if_id, uint8_t icmp_type)
\details
The event \b MessageTypeUnknown is created when the network library receives the
ICMP frame, but the type of message is not supported. The ICMP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  unknown ICMP message type.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_SendEchoRequest(uint16_t if_id)
\details
The event \b SendEchoRequest is created when the network library wants to send an
ICMP echo request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingInit(void)
\details
The event \b PingInit is created when the ping process is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b ping
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingEcho(const uint8_t *ip4_addr)
\details
The event \b PingEcho is created when the functions \ref netPing_Echo or \ref
netPing_EchoX are executed.

\b Value in the Event Recorder shows:
  - \b ip: target IPv4 address.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingTargetNotValid(void)
\details
The event \b PingTargetNotValid is created when the function \ref netPing_EchoX
is executed, and the target name is invalid and can not be resolved.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingDnsError(void)
\details
The event \b PingDnsError is created when the function \ref netPing_EchoX
is executed, and the internal DNS resolver failed. To resolve this error, call the
function again after a short delay.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingInvalidParameter(void)
\details
The event \b PingInvalidParameter is created when the function \ref netPing_Echo
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingClientBusy(void)
\details
The event \b PingClientBusy is created when the function \ref netPing_Echo
is executed, and the internal ping process is still busy.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingSendRequest(uint16_t if_id)
\details
The event \b PingSendRequest is created when the network library wants to send
an ICMP echo request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingRetransmitRequest(uint16_t if_id)
\details
The event \b PingRetransmitRequest is created when the network library wants to
retransmit an ICMP echo request because the target host is not responding.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingTimeout(uint16_t if_id)
\details
The event \b PingTimeout is created when the network library has left the internal
ping process because the target host is not responding.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP_PingUninit(void)
\details
The event \b PingUninit is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ping
*/

/**
@}
*/

/**
\defgroup net_evr_igmp_func NetIGMP: IGMP Management
\brief Events generated by the Network - IGMP Group Management functions
\details
The Network IGMP Group Management functions generate events that report events in
the Internet Group Management Protocol and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_InitManager(uint16_t if_id, uint32_t num_entries)
\details
The event \b InitManager is created when the IGMP group manager is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b groups: number of available groups.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_Join(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b Join is created when the function \ref netIGMP_Join is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of a group to join to.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_AlreadyInGroup(uint16_t if_id, uint8_t group_id)
\details
The event \b AlreadyInGroup is created when the function \ref netIGMP_Join is executed,
and the host is already a member of the group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b id:    membership group table identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_NoFreeEntries(uint16_t if_id, uint8_t num_used)
\details
The event \b NoFreeEntries is created when the function \ref netIGMP_Join is executed,
and no free membership table entries are available.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b used:  number of used membership table entries.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_SendReport(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b SendReport is created when the function \ref netIGMP_Join is executed,
and the network library wants to send a report message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the group to join.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_Leave(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b Leave is created when the function \ref netIGMP_Leave is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the group to leave.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_NotInGroup(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b NotInGroup is created when the function \ref netIGMP_Leave is executed,
and the requested IP address of the group is not a member of any group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the group to leave.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_SendLeave(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b SendLeave is created when the function \ref netIGMP_Leave is executed,
and the network library wants to send a leave message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the group to leave.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_ReceiveFrame(uint16_t if_id, uint8_t message_type, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the IGMP frame.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  type of received message (QUERY, REPORT_V1, REPORT_V2, LEAVE_V2, REPORT_V3).
  - \b len:   length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the IGMP frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_ChecksumFailed(uint16_t if_id, uint32_t length)
\details
The event \b ChecksumFailed is created when the network library has checked the checksum
on the received IGMP frame and the verification failed. The IGMP frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the IGMP frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_GroupSpecificQuery(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b GroupSpecificQuery is created when the network library receives the
IGMPv2 group specific query.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the query group.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_DestAddressWrong(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b DestAddressWrong is created when the network library receives the
IGMP group query, but the destination IP address is wrong.

For the general IGMP query (group 0.0.0.0) the destination IP address must be
the IP address of all hosts (244.0.0.1).

For IGMPv2 group specific query the destination IP address must be the same as
the IP address of the query group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  destination IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_DelayedReportScheduled(uint16_t if_id, uint8_t max_time)
\details
The event \b DelayedReportScheduled is created when the network library receives the
IGMPv2 group specific query.

\b Value in the Event Recorder shows:
  - \b netif:    network interface identifier.
  - \b max_time: maximum allowed time before sending the report in milliseconds.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_GeneralQuery(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b GeneralQuery is created when the network library receives the
IGMP general query.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the query group.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_StartModeIGMPv1(uint16_t if_id)
\details
The event \b StartModeIGMPv1 is created when the network library starts the IGMPv1 mode.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_MaxTimeForReport(uint16_t if_id, uint8_t max_time)
\details
The event \b MaxTimeForReport is created when the network library receives the
IGMPv2 general query.

\b Value in the Event Recorder shows:
  - \b netif:    network interface identifier.
  - \b max_time: maximum allowed time before sending the report in milliseconds.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_GroupReportsScheduled(uint16_t if_id, uint32_t n_reports)
\details
The event \b GroupReportsScheduled is created when the network library receives
the IGMP general query and generates reports for all active groups.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b num:   number of group reports to be sent.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_NoReportScheduled(uint16_t if_id)
\details
The event \b NoReportReportScheduled is created when the network library receives
the IGMP general query and does not generate a report because there is no active group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_ReportReceived(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ReportReceived is created when the network library receives
a group report from another host.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the reported group.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_OwnReportCanceled(uint16_t if_id, uint8_t group_id)
\details
The event \b OwnReportCanceled is created when the network library receives
a report for the group we are a member of. Therefore, our group report can be
cancelled because the router is already aware of this group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b id:    membership group table identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_StartModeIGMPv2(uint16_t if_id)
\details
The event \b StartModeIGMPv2 is created when the network library starts the IGMPv2 mode.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_SendDelayedReport(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b SendDelayedReport is created when the network library wants to
send a delayed group membership report.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the group membership report.
*/

/**
\fn __STATIC_INLINE void EvrNetIGMP_UninitManager(uint16_t if_id)
\details
The event \b UninitManager is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
@}
*/

/**
\defgroup net_evr_nbns_func NetNBNS: NBNS Client
\brief Events generated by the Network - NetBIOS Name Service Client functions
\details
The Network NBNS Client functions generate events that report events in
the NetBIOS name service and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_InitService(uint16_t if_id)
\details
The event \b InitService is created when the NetBIOS name service is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the NetBIOS name service is initialized,
that is, when the function \ref netInitialize is executed, and the service could not
assign the UDP socket. To resolve this error, you must increase the number of available
UDP sockets in the UDP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ReceiveFrame(uint16_t if_id, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the NBNS frame.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_WrongRemotePort(uint16_t if_id, uint16_t port, uint16_t port_valid)
\details
The event \b WrongRemotePort is created when the network library receives the NBNS frame,
and the remote UDP port is not a standard NBNS port.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b port:  received remote UDP port.
  - \b valid: expected remote UDP port.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the NBNS frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_NetBiosDisabled(uint16_t if_id)
\details
The event \b NetBiosDisabled is created when the network library receives the NBNS frame,
but NetBIOS protocol is disabled in the interface configuration.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_NameQueryRequest(const char *q_name, uint32_t length)
\details
The event \b NameQueryRequest is created when the network library receives a request
for the host name to be resolved.

\b Value in the Event Recorder shows:
  - \b name: name of the host to resolve.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_QueryFromAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b QueryFromAddress is created when the network library wants to
display the IP address of the sender of the name query request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IP address of the sender.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_NameQueryResponse(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b NameQueryResponse is created when the network library responds
to name query request with a local IP address. This happens when the requested
name is the same as the name of the local host.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  local IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_WrongTransactionId(uint16_t if_id, uint16_t tid, uint16_t tid_valid)
\details
The event \b WrongTransactionId is created when the network library receives
the NBNS response frame, but the received transaction identifier (TID) is not identical
to the transaction identifier of our NBNS name query request. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b tid:   received transaction identifier.
  - \b valid: expected transaction identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ResolveInvalidParameter(uint16_t if_id)
\details
The event \b ResolveInvalidParameter is created when the function \ref netNBNS_Resolve
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ResolveNetBiosDisabled(uint16_t if_id)
\details
The event \b ResolveNetBiosDisabled is created when when the function \ref netNBNS_Resolve
is executed, but NetBIOS protocol is disabled for this interface.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ResolveClientBusy(uint16_t if_id)
\details
The event \b ResolveClientBusy is created when the function \ref netNBNS_Resolve
is executed, and the internal resolve process is still in progress. For example,
another instance of \ref netNBNS_Resolve is still running and has not yet completed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_Resolve(const char *host_name, uint32_t length)
\details
The event \b Resolve is created when the NBNS host name resolver starts, that is,
when the function \ref netNBNS_Resolve is executed.

\b Value in the Event Recorder shows:
  - \b name: name of the host to resolve.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ResolvedFromCache(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ResolvedFromCache is created when the NBNS client has resolved the requested
host name internally from the NBNS name cache.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  resolved IP address of the host.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ResolveTimeoutExpired(uint16_t if_id)
\details
The event \b ResolveTimeoutExpired is created when the network library has left the name
resolving procedure, since no host responded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ResolvedAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ResolvedAddress is created when an NBNS client successfully resolves a requested
host on the local network.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  resolved IP address of the host.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ClearCacheInvalidParam(uint16_t if_id)
\details
The event \b ClearCacheInvalidParam is created when the function \ref netNBNS_ClearCache
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ResolveRetransmit(uint16_t if_id)
\details
The event \b ResolveRetransmit is created when the network library resends the NBNS name
query request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ClrCacheNetBiosDisabled(uint16_t if_id)
\details
The event \b ClrCacheNetBiosDisabled is created when when the function \ref netNBNS_ClearCache
is executed, but NetBIOS protocol is disabled for this interface.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ClearCacheClientBusy(uint16_t if_id)
\details
The event \b ClearCacheClientBusy is created when the function \ref netNBNS_ClearCache
is executed, and the internal resolve process is still in progress. For example,
another instance of \ref netNBNS_Resolve is still running and has not yet completed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_ClearCache(uint16_t if_id, uint32_t deleted, uint32_t available)
\details
The event \b ClearCache is created when the function \ref netNBNS_ClearCache is executed.

\b Value in the Event Recorder shows:
  - \b netif:   network interface identifier.
  - \b deleted: number of deleted cache entries.
  - \b max:     maximum number of NBNS cache entries.
*/

/**
\fn __STATIC_INLINE void EvrNetNBNS_UninitService(uint16_t if_id)
\details
The event \b UninitService is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
@}
*/

/**
\defgroup net_evr_dhcp_func NetDHCP: DHCP Client
\brief Events generated by the Network - Dynamic Host Configuration Client functions
\details
The Network DHCP Client functions generate events that report events in
the Dynamic Host Configuration Protocol client and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_InitClient(uint16_t if_id, uint8_t bootfile,
                                               uint8_t ntp_servers, uint8_t vcid)
\details
The event \b InitClient is created when the DHCP client service is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b opt:   extended DHCP options enabled.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the DHCP client service is initialized,
that is, when the function \ref netInitialize is executed, and the service could not
assign the UDP socket. To resolve this error, you must increase the number of available
UDP sockets in the UDP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_StartClient(uint16_t if_id)
\details
The event \b StartClient is created when the DHCP client service is started.
This happens when the functions \ref netInitialize or \ref netDHCP_Enable
are executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_StopClient(uint16_t if_id)
\details
The event \b StopClient is created when the DHCP client service is stopped, that is
when the function \ref netDHCP_Disable is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ClientState(uint16_t if_id, uint8_t state)
\details
The event \b ClientState is created when the network library displays the current
state of the DHCP client.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCP client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_NextState(uint16_t if_id, uint8_t state)
\details
The event \b NextState is created when the network library displays the next state
in which the DHCP client will transit.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b next:  next state of the DHCP client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_StateRetransmit(uint16_t if_id, uint8_t state)
\details
The event \b StateRetransmit is created when the network library wants to resend
the DHCP message. This happens if the DHCP server does not respond to client request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCP client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ChangeStateOnTimeout(uint16_t if_id, uint8_t current, uint8_t next)
\details
The event \b ChangeStateOnTimeout is created when the timeout expired and the
DHCP client needs to change the state.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCP client.
  - \b next:  next state of the DHCP client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_AutoIpAddressProbe(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b AutoIpAddressProbe is created when the network library wants to
test the selected automatic IP address if the address is already in use.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address to test.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_AutoIpSuccess(uint16_t if_id, const uint8_t *auto_lm)
\details
The event \b AutoIpSuccess is created when the network library assigns an automated
IP address to an ethernet or WiFi interface.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    assigned automatic IP address.
  - \b mask:  assigned network mask.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_T2Expired(uint16_t if_id, uint8_t state)
\details
The event \b T2Expired is created when the lease time of the assigned IP address
has expired and the lease must be renewed. The network library starts renewing
the assigned IP address.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCP client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_LeaseExpired(uint16_t if_id, uint8_t state)
\details
The event \b LeaseExpired is created when the assigned IP address is no longer
valid and the system must stop using it. The network library reinitializes the
DHCP client process to obtain a new IP address.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCP client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_SendDhcpMessage(uint16_t if_id, uint8_t msg_type, uint8_t broadcast)
\details
The event \b SendDhcpMessage is created when a network library sends a DHCP message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  type of DHCP message (REQUEST, DISCOVER).
  - \b bcast: message is broadcast (1= yes, 0= no)
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ReceiveFrame(uint16_t if_id, const uint8_t *ip4_addr, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the DHCP frame.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b server: IP address of a DHCP server.
  - \b len:    length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_WrongServerPort(uint16_t if_id, uint16_t port, uint16_t port_valid)
\details
The event \b WrongPort is created when the network library receives the DHCP response
frame, and the UDP server port is not a standard DHCP server port. The frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b port:  received server UDP port.
  - \b valid: expected server UDP port.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the DHCP
response frame that is too short. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_MisformedReply(uint16_t if_id)
\details
The event \b MisformedReply is created when the network library receives the DHCP
response frame, checks the BOOTP header and finds errors in it. The frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_WrongTransactionId(uint16_t if_id, uint32_t xid, uint32_t xid_valid)
\details
The event \b WrongTransactionId is created when the network library receives
the DHCP response frame, but the received transaction identifier (XID) is not identical
to the transaction identifier of our DHCP request. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b xid:   received transaction identifier.
  - \b valid: expected transaction identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_WrongClientHwAddress(uint16_t if_id, const uint8_t *chaddr)
\details
The event \b WrongClientHwAddress is created when the network library receives
the DHCP response frame, but the received client hardware address in the BOOTP header
is not the same as our MAC address. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b chaddr: received client hardware address value.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_WrongMagicCookie(uint16_t if_id, uint32_t cookie, uint32_t cookie_valid)
\details
The event \b WrongMagicCookie is created when the network library receives
the DHCP response frame, but the received BOOTP magic cookie is not valid. The frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b cookie: received BOOTP magic cookie.
  - \b valid:  expected BOOTP magic cookie.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_InvalidMessageType(uint16_t if_id, uint8_t msg_type, uint8_t msg_valid)
\details
The event \b InvalidMessageType is created when the network library receives the
DHCP frame, but the type of message is not valid in current state. The DHCP frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCP message type.
  - \b valid: expected DHCP message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewMessage(uint16_t if_id, uint8_t msg_type)
\details
The event \b ViewMessage is created when the network library receives the DHCP
message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCP message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_FileOverloadOptions(uint16_t if_id, uint8_t msg_type)
\details
The event \b FileOverloadOptions is created when the network library receives
the DHCP response frame, and the DHCP options are returned in the "Boot file name"
section of the BOOTP header. The size of the field "file" is 128 bytes.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCP message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_SnameOverloadOptions(uint16_t if_id, uint8_t msg_type)
\details
The event \b SnameOverloadOptions is created when the network library receives
the DHCP response frame, and the DHCP options are returned in the "Server host name"
section of the BOOTP header. The size of the field "sname" is 64 bytes.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCP message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_MissingServerId(uint16_t if_id, uint8_t msg_type)
\details
The event \b MissingServerId is created when the network library receives the DHCP
message, but the mandatory server ID is missing. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCP message type (DHCP_OFFER).
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ForwardedMessage(uint16_t if_id, uint8_t msg_type)
\details
The event \b ForwardedMessage is created when the network library checks the IP address
of the sender and detects that the DHCP message was transmitted via a relay agent.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCP message type (DHCP_OFFER).
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_OfferedAddressInvalid(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b OfferedAddressInvalid is created when the network library checks the offered
IP address and finds it invalid. The frame is therefore discarded. This usually happens
in network attacks.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    offered IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewRelayAgentAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ViewRelayAgentAddress is created when the network library wants to display
the IP address of the relay agent, when DHCP messages are forwarded from another
network.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b relay: IP address of the relay agent.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewOfferedAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ViewOfferedAddress is created when the network library wants to display
the IP address offered by the DHCP server.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    offered IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ServerAddressNotSelected(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ServerAddressNotSelected is created when the network library receives
a DHCP message from a different DHCP server that is not selected. The network library
selects one DHCP server if multiple servers respond to the DHCP_DISCOVER message in
the SELECTING state. Therefore, the frame from the non-selected server is discarded.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b server: IP address of the server that sends the message.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_AssignedAddrNotRequested(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b AssignedAddrNotRequested is created when the network library receives
a DHCP_ACK message, but the assigned IP address is not identical to the offered
IP address. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b server: assigned IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewAssignedAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ViewAssignedAddress is created when the network library wants to display
the assigned IP address.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    assigned IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewServerId(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ViewServerId is created when the network library wants to display
the server identifier received in the SELECTING state. The server ID is in fact
the IP address of the DHCP server.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b server_id: DHCP server identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewNetMask(uint16_t if_id, const uint8_t *net_mask)
\details
The event \b ViewNetMask is created when the network library wants to display
the network mask.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mask:  network mask.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewGatewayAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ViewGatewayAddress is created when the network library wants to display
the IP address of a gateway.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b gw:    IP address of a gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewDnsServers(uint16_t if_id, const uint8_t *dns_list)
\details
The event \b ViewDnsServers is created when the network library wants to display
the IP addresses of the primary and secondary DNS server.

\b Value in the Event Recorder shows:
  - \b netif:   network interface identifier.
  - \b pri_dns: IP address of the primary DNS server.
  - \b sec_dns: IP address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewLeaseTime(uint16_t if_id, uint32_t lease_time)
\details
The event \b ViewLeaseTime is created when the network library wants to display
the lease time for the assigned IP address.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b time:  lease time in seconds.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewTimeT1(uint16_t if_id, uint32_t t1_time)
\details
The event \b ViewTimeT1 is created when the network library wants to display
the lease renewal time for the assigned IP address.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b t1:    lease renewal time in seconds.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewTimeT2(uint16_t if_id, uint32_t t2_time)
\details
The event \b ViewTimeT2 is created when the network library wants to display
the lease rebinding time for the assigned IP address.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b t2:    lease rebinding time in seconds.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewBootfileName(const uint8_t *bootfile, uint32_t length)
\details
The event \b ViewBootfileName is created when the network library wants to display
the name of the boot file that was requested in DHCP options.

\b Value in the Event Recorder shows:
  - \b bootfile: name of the boot file.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_ViewNtpServerList(uint16_t if_id, const uint8_t *ntp_list, uint32_t length)
\details
The event \b ViewNtpServerList is created when the network library wants to display
the NTP servers required in the DHCP options.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ntp:   list of NTP server IP addresses.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_SetOptionInvalidParam(uint16_t if_id)
\details
The event \b SetOptionInvalidParam is created, when the \ref netDHCP_SetOption
function is given an invalid parameter.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_SetOptionInvalidState(uint16_t if_id, uint8_t state)
\details
The event \b SetOptionInvalidState is created if the \ref netDHCP_SetOption
function is executed when the DHCP client process is active. First, you need to
disable the DHCP client with \ref netDHCP_Disable.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCP client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_SetOptionClientIdDefault(uint16_t if_id, uint8_t type)
\details
The event \b SetOptionClientIdDefault is created if the \ref netDHCP_SetOption
function is executed but the custom client identifier option is not provided.
Therefore, the network library starts using the default client identifier.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  client identifier type to used by the DHCP client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_SetOptionClientId(uint16_t if_id, uint8_t type, uint32_t length)
\details
The event \b SetOptionClientId is created if the \ref netDHCP_SetOption function
is executed and the DHCP client identifier is set to a new value.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  client identifier type to used by the DHCP client.
  - \b len:   length of the client identifier option.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP_UninitClient(uint16_t if_id)
\details
The event \b UninitClient is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
@}
*/

/**
\defgroup net_evr_arp_func NetARP: ARP Address Resolution
\brief Events generated by the Network - Ethernet Address Resolution functions
\details
The Network ARP Address Resolution functions generate events that report events in
the ARP address resolver and ARP cache and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetARP_InitCache(uint16_t if_id, uint32_t num_entries)
\details
The event \b InitCache is created when the ARP service is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif:   network interface identifier.
  - \b entries: number of entries available in ARP cache table.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ReceiveFrame(uint16_t if_id, uint16_t opcode, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the ARP frame.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b opcode: operation code (ARP_REQUEST, ARP_REPLY, RARP_REQUEST, RARP_REPLY, InARP_REQUEST, InARP_RESPONSE).
  - \b len:    length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the ARP frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_FrameCorrupted(uint16_t if_id)
\details
The event \b FrameCorrupted is created when the network library receives the ARP frame,
checks the ARP header and finds errors in it. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ShowFrameHeader(const void *arp_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the ARP header.

\b Value in the Event Recorder shows:
  - \b op:  operation code (ARP_REQUEST, ARP_REPLY, RARP_REQUEST, RARP_REPLY, InARP_REQUEST, InARP_RESPONSE).
  - \b spa: sender protocol IP address.
  - \b tpa: target protocol IP address.
  - \b sha: sender hardware MAC address.
  - \b tha: target hardware MAC address.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_SenderAddressInvalid(uint16_t if_id)
\details
The event \b SenderAddressInvalid is created when the network library receives the ARP frame,
checks the protocol and hardware address of the sender and finds that they are invalid.
The frame is therefore discarded. This usually happens in network attacks.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheEntryUpdate(uint16_t if_id, uint32_t entry)
\details
The event \b CacheEntryUpdate is created when the network library receives the
gratuitous ARP request and update the local cache entry.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ProbeResponseReceived(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ProbeResponseReceived is created when the network library receives the
response to our ARP probe request. This is an indication that the tested IP address
is already in use.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the responding host.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_WrongIpAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b WrongIpAddress is created when the network library receives the ARP frame,
but the target IP address is not the same as our local IP address. The frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    received target IP address.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_WrongMacAddress(uint16_t if_id, const uint8_t *mac_addr)
\details
The event \b WrongMacAddress is created when the network library receives Inverse ARP frame,
but the target MAC address is not the same as our local MAC address. The frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mac:   received target MAC address.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_OpcodeUnknown(uint16_t if_id, uint16_t opcode)
\details
The event \b OpcodeUnknown is created when the network library receives the ARP frame
with unknown operation code. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b opcode: received ARP operation code.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_SendReply(uint16_t if_id, uint16_t opcode)
\details
The event \b SendReply is created when the network library wants to send an ARP reply
message.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b opcode: operation code (ARP_REPLY, InARP_RESPONSE).
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheEntryRefreshed(uint16_t if_id, uint32_t entry)
\details
The event \b CacheEntryRefreshed is created when the network library receives the
ARP reply or inverse ARP response, and refresh the entry in the local cache.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_WrongResponse(uint16_t if_id)
\details
The event \b WrongResponse is created when the network library receives a valid ARP
response, but the ARP service waits for none. The received ARP frame is therefore
discarded. This usually happens in network attacks.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_SendRequest(uint16_t if_id, uint16_t opcode)
\details
The event \b SendRequest is created when the network library wants to send an ARP
request message.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b opcode: operation code (ARP_REQUEST, InARP_REQUEST).
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheAllocFailed(uint16_t if_id)
\details
The event \b CacheAllocFailed is created when the network library wants to add new host
to the ARP cache table, but it fails. Therefore, the new host is not cached. In order
to get rid of such events, you must increase the size of the ARP cache table in the
ethernet interface configuration.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheIpRefreshed(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b CacheIpRefreshed is created when the network library wants to add a new host
to the ARP cache table, but finds it already cached. Therefore, the new host is only
refreshed in the cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host to be added to the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheAdd(uint16_t if_id, const uint8_t *ip4_addr, const uint8_t *mac_addr)
\details
The event \b CacheAdd is created when the network library wants to add a new host
to the ARP cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host to be added to the cache.
  - \b mac:   MAC address of the host to be added to the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_GatewayUnknown(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b GatewayUnknown is created when the network library wants to add a new
non-local host to the ARP cache table. The network library uses the gateway to access
the host, but finds that the gateway address is not specified.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b gw:    IP address of the default gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheEntryAdded(uint16_t if_id, uint32_t entry)
\details
The event \b CacheEntryAdded is created when the network library successfully added
the new host to the ARP cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: assigned cache entry identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheEarly(uint16_t if_id, const uint8_t *ip4_addr, const uint8_t *mac_addr)
\details
The event \b CacheEarly is created when the network library wants to add a new host
to the ARP cache table, when it receives a valid unicast IP frame. This method is
called early caching and is used to improve the functioning of the network library.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host to be added to the cache.
  - \b mac:   MAC address of the host to be added to the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheFind(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b CacheFind is created when the network library wants to find the host
in the ARP cache table to resolve its MAC address. If the host is not in the ARP cache,
the network library creates a new entry in the table and starts the resolution process.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host being searched in the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_UsingGateway(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b UsingGateway is created when the network library wants to find the
non-local host in the ARP cache table. The network library uses the gateway to access
the host.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b gw:    IP address of the default gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_UnresolvedMacAddress(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b UnresolvedMacAddress is created when the network library wants to find
the host in the ARP cache table to resolve its MAC address, but the host is in the process
of resolving. MAC address is not yet valid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host being searched in the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_EntryFound(uint16_t if_id, uint32_t entry)
\details
The event \b EntryFound is created when the network library wants to notify that
it has found the host in the ARP cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheIp(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b CacheIp is created when the function \ref netARP_CacheIP is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheIpInvalidParameter(uint16_t if_id)
\details
The event \b CacheIpInvalidParameter is created when the function \ref netARP_CacheIP
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheMac(uint16_t if_id, const uint8_t *mac_addr)
\details
The event \b CacheMac is created when the function \ref netARP_CacheMAC is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mac:   MAC address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheMacInvalidParameter(uint16_t if_id)
\details
The event \b CacheMacInvalidParameter is created when the function \ref netARP_CacheMAC
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_UnresolvedIpAddress(uint16_t if_id, const uint8_t *mac_addr)
\details
The event \b UnresolvedIpAddress is created when the network library wants to find
the host in the ARP cache table to resolve its IP address, but the host is in the
process of resolving. IP address is not yet valid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mac:   MAC address of the host being searched in the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_GetIp(uint16_t if_id, const uint8_t *mac_addr, const uint8_t *ip4_addr)
\details
The event \b GetIp is created when the function \ref netARP_GetIP is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    returned IP address of the host.
  - \b mac:   MAC address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_GetIpInvalidParameter(uint16_t if_id)
\details
The event \b GetIpInvalidParameter is created when the function \ref netARP_GetIP
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_GetIpEntryNotFound(uint16_t if_id, const uint8_t *mac_addr)
\details
The event \b GetIpEntryNotFound is created when the function \ref netARP_GetIP
is executed, but the requested MAC address of the host in the cache is missing.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mac:   MAC address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_GetMac(uint16_t if_id, const uint8_t *ip4_addr, const uint8_t *mac_addr)
\details
The event \b GetMac is created when the function \ref netARP_GetMAC is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mac:   returned MAC address of the host.
  - \b ip:    IP address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_GetMacInvalidParameter(uint16_t if_id)
\details
The event \b GetMacInvalidParameter is created when the function \ref netARP_GetMAC
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_GetMacEntryNotFound(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b GetMacEntryNotFound is created when the function \ref netARP_GetMAC
is executed, but the requested IP address of the host in the cache is missing.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_Probe(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b Probe is created when the function \ref netARP_Probe is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host being tested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ProbeInvalidParameter(uint16_t if_id)
\details
The event \b ProbeInvalidParameter is created when the function \ref netARP_Probe
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ProbeBusy(uint16_t if_id)
\details
The event \b ProbeBusy is created when the function \ref netARP_Probe is executed,
and the internal probe process is still busy.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ProbeRetransmit(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ProbeRetransmit is created when the network library resends the request
for testing the IP address, if it is in use.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host being tested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ProbeTimeout(uint16_t if_id, const uint8_t *ip4_addr)
\details
The event \b ProbeTimeout is created when the network library has left the IP address
test procedure, since no host responded. The tested IP address is considered to be free.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host being tested.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_AddCache(uint16_t if_id, const uint8_t *ip4_addr, const uint8_t *mac_addr)
\details
The event \b AddCache is created when the function \ref netARP_AddCache is executed.
This function adds a static entry to the ARP cache.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IP address of the host to be added to the cache.
  - \b mac:   MAC address of the host to be added to the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_AddCacheInvalidParam(uint16_t if_id)
\details
The event \b AddCacheInvalidParam is created when the function \ref netARP_AddCache
is executed and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_AddCacheInvalidIpAddress(uint16_t if_id)
\details
The event \b AddCacheInvalidIpAddress is created when the function \ref netARP_AddCache
is executed and the IP address parameter of the function is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_AddCacheInvalidMacAddress(uint16_t if_id)
\details
The event \b AddCacheInvalidMacAddress is created when the function \ref netARP_AddCache
is executed and the MAC address parameter of the function is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ClearCache(uint16_t if_id, uint32_t deleted, uint32_t available)
\details
The event \b ClearCache is created when the function \ref netARP_ClearCache is executed.

\b Value in the Event Recorder shows:
  - \b netif:   network interface identifier.
  - \b deleted: number of deleted cache entries.
  - \b max:     maximum number of ARP cache entries.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ClearCacheInvalidParam(uint16_t if_id)
\details
The event \b ClearCacheInvalidParam is created when the function \ref netARP_ClearCache
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ClearCacheClientBusy(uint16_t if_id)
\details
The event \b ClearCacheClientBusy is created when the function \ref netARP_ClearCache
is executed, and the internal cache process is still in progress. For example,
\ref netARP_Probe is still running and not yet complete.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_CacheEntryTimeout(uint16_t if_id, uint32_t entry,
                      const uint8_t *ip4_addr, const uint8_t *mac_addr, uint32_t type)
\details
The event \b CacheEntryTimeout is created when the validity of the ARP cached host
has expired. The host will be refreshed or removed from the cache.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
  - \b type:  type of host cache entry (FixIP, TempIP, InuseIP).
  - \b ip:    IP address of the host cache entry.
  - \b mac:   MAC address of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_EntryReleased(uint16_t if_id, uint32_t entry)
\details
The event \b EntryReleased is created when the cached host entry is released from
the ARP cache.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_ResolveEntry(uint16_t if_id, uint32_t entry)
\details
The event \b ResolveEntry is created when the network library wants to resolve the
required ARP entry in the cache. This usually happens when the ARP entry is created,
but it is not yet resolved or has expired.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_RefreshEntry(uint16_t if_id, uint32_t entry)
\details
The event \b RefreshEntry is created when the network library wants to refresh the
required ARP entry in the cache. This happens when the ARP entry expires, and the
type of entry is Fixed-IP or Inuse-IP.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetARP_UninitCache(uint16_t if_id)
\details
The event \b UninitCache is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
@}
*/

/**
\defgroup net_evr_ip6_func NetIP6: IP6 Core
\brief Events generated by the Network - IPv6 Core functions
\details
The Network IPv6 Core functions generate events that report events in the network core
of Internet Protocol version 6 and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_InitCore(uint16_t if_id)
\details
The event \b InitCore is created when the IPv6 core is initialized, that is,
when the function \ref netInitialize is executed. It also informs you of the default
network interface assigned to access the Internet.

\b Value in the Event Recorder shows:
  - \b default: default network interface for internet access.
 */

/**
\fn __STATIC_INLINE void EvrNetIP6_ReceiveFrame(uint16_t if_id, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the IPv6 frame.
The frame can come from any interface.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received IPv6 frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the IPv6 frame
that is too short. The received length reported by the interface driver is shorter
than the length encoded in the IPv6 frame header. The physical length of the frame
must be at least equal to the length encoded in IPv6 frame header. Since this is not
true, the frame is discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_InvalidIpVersion(uint16_t if_id, uint8_t ip_version)
\details
The event \b InvalidIpVersion is created when the network library receives an IPv6 frame
that has an unrecognized IP version encoded in the IPv6 header. The IP version should be 6,
all other values are invalid. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ver:   received IPv6 protocol version.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_ShowFrameHeader(const void *ip6_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the IPv6 header.

\b Value in the Event Recorder shows:
  - \b dst:   destination IPv6 address.
  - \b src:   source IPv6 address.
  - \b proto: protocol type (TCP, UDP, ICMPv6).
  - \b hops:  hop limit.
  - \b len:   length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_WrongDestinationAddress(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b WrongDestinationAddress is created when the network library receives
an IPv6 frame that has an invalid destination address. The IPv6 frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    received destination IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_InterfaceNotSupported(uint16_t if_id)
\details
The event \b InterfaceNotSupported is created when the network library receives
an IPv6 frame on the network interface that does not support the IPv6. The IPv6 frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_WrongMulticastProtocol(uint16_t if_id, uint8_t ip6_protocol)
\details
The event \b WrongMulticastProtocol is created when the network library receives
an IPv6 multicast frame that has an invalid protocol type. The IPv6 frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b proto: received protocol type (TCP, ICMPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_FragmentationDisabled(uint16_t if_id)
\details
The event \b FragmentationDisabled is created when the network library receives the
IPv6 frame fragment, but the IPv6 fragmentation is disabled in the network configuration.
The IPv6 frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_SendFrame(uint16_t if_id, uint8_t ip6_protocol, uint32_t length)
\details
The event \b SendFrame is created when the internal \e send_frame function wants to
send the IPv6 frame. The IPv6 header is constructed and the frame is sent to the
transfer interface.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b proto: IPv6 protocol type (TCP, UDP, ICMPv6).
  - \b len:   length of the IPv6 frame payload.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_ProtocolUnknown(uint16_t if_id, uint8_t ip6_protocol)
\details
The event \b ProtocolUnknown is created when the network library wants to send
the IPv6 frame, but the provided IPv6 protocol type is not supported. The frame is
therefore not sent.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b proto: unknown protocol type.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_SourceAddressNull(uint16_t if_id)
\details
The event \b SourceAddressNull is created when the internal \e send_frame function
wants to send the IPv6 frame and finds out, that the local address is not specified.
The IPv6 header can not be created and therefore the frame is not sent.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_DestinationAddressNull(uint16_t if_id)
\details
The event \b DestinationAddressNull is created when the internal \e send_frame function
wants to send the IPv6 frame and finds out, that the destination address is not
specified. The IPv6 header can not be created and therefore the frame is not sent.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn  __STATIC_INLINE void EvrNetIP6_SetDefaultInterface(uint16_t if_id)
\details
The event \b SetDefaultInterface is created when the system wants to change the
network interface used to access the internet. This usually happens when the
\ref netIF_SetDefault function is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetIP6_UninitCore(void)
\details
The event \b UninitCore is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ip6
*/

/**
@}
*/

/**
\defgroup net_evr_icmp6_func NetICMP6: ICMP6 Control
\brief Events generated by the Network - ICMPv6 Control functions
\details
The Network ICMPv6 Control functions generate events that report events in the Internet
Control Message Protocol version 6 and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_ReceiveFrame(uint16_t if_id, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the ICMPv6 frame.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_ShowFrameHeader(const void *icmp6_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the ICMPv6 header.

\b Value in the Event Recorder shows:
  - \b type:  Type of message (ECHO_REQUEST, ECHO_REPLY, MCAST_QUERY, MCAST_REPORT, MCAST_DONE,
              ROUTER_SOL, ROUTER_ADVER, NEIGHB_SOL, NEIGHB_ADVER, InvNEIGHB_SOL, InvNEIGHB_ADVER).
  - \b code:  Message code byte.
  - \b cksum: Checksum of ICMPv6 frame.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the ICMPv6 frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_ChecksumFailed(uint16_t if_id, uint32_t length)
\details
The event \b ChecksumFailed is created when the network library has checked the checksum
on the received ICMPv6 frame and the verification failed. The ICMPv6 frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the ICMPv6 frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoRequestWrongCode(uint16_t if_id, uint8_t code, uint8_t code_valid)
\details
The event \b EchoRequestWrongCode is created when the network library receives the
ICMPv6 echo request, but the code byte is invalid. The ICMPv6 frame is therefore  discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b code:  received ICMPv6 code.
  - \b valid: expected ICMPv6 code.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoRequestReceived(uint16_t if_id, uint32_t data_length)
\details
The event \b EchoRequestReceived is created when the network library receives
a valid ICMPv6 echo request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the echo request payload in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoReplyDisabled(uint16_t if_id)
\details
The event \b EchoReplyDisabled is created when the network library receives an ECHO request,
but the ECHO response is disabled in the interface configuration for IPv6. This configuration
option is rarely enabled, usually for security reasons only.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_SendEchoReply(uint16_t if_id)
\details
The event \b SendEchoReply is created when the network library wants to send an
ICMPv6 echo reply.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoReplyReceived(uint16_t if_id, uint32_t data_length)
\details
The event \b EchoReplyReceived is created when the network library receives
a valid ICMPv6 echo reply.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the echo reply payload in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoReplyWrongState(uint16_t if_id)
\details
The event \b EchoReplyWrongState is created when the network library receives
an ICMPv6 echo reply, but the ping process is idle. This means that the network library
does not wait for the echo reply. The echo reply is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoReplyWrongCode(uint16_t if_id, uint8_t code, uint8_t code_valid)
\details
The event \b EchoReplyWrongCode is created when the network library receives the
ICMPv6 echo reply, but the code byte is invalid. The ICMPv6 frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b code:  received ICMPv6 code.
  - \b valid: expected ICMPv6 code.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoReplyWrongIpAddress(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b EchoReplyWrongIpAddress is created when the network library receives
an echo reply that came from another IPv6 address instead of the address to which
the echo request was sent. The echo reply is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host that responded.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoReplyWrongId(uint16_t if_id, uint16_t eid, uint16_t eid_valid)
\details
The event \b EchoReplyWrongId is created when the network library receives the
ICMPv6 echo reply, but the echo identifier is not identical to the identifier that was
sent in echo request. The ICMPv6 frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b eid:   received echo identifier.
  - \b valid: expected echo identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_EchoReplyWrongPayload(uint16_t if_id)
\details
The event \b EchoReplyWrongPayload is created when the network library receives the
ICMPv6 echo reply, but the data on the payload is not identical to the data that was
sent in echo request. The ICMPv6 frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_MessageDiscarded(uint16_t if_id, uint8_t type)
\details
The event \b MessageDiscarded is created when the network library receives the
ICMPv6 frame with a message type, that must silently be discarded. For example
IPv6 hosts must silently discard Router Solicitation messages.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  ICMPv6 message type (ROUTER_SOL).
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_WrongHopLimit(uint16_t if_id, uint8_t hop_limit, uint8_t hop_valid)
\details
The event \b WrongHopLimit is created when the network library receives the ICMPv6
discovery frame, but the IPv6 hop limit is invalid. The ICMPv6 frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b hop_limit: received IPv6 hop limit.
  - \b valid:     expected IPv6 hop limit.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_WrongCode(uint16_t if_id, uint8_t code, uint8_t code_valid)
\details
The event \b WrongCode is created when the network library receives the ICMPv6
discovery frame, but the code byte is invalid. The ICMPv6 frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b code:  received ICMPv6 code.
  - \b valid: expected ICMPv6 code.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_MessageTypeUnknown(uint16_t if_id, uint8_t type)
\details
The event \b MessageTypeUnknown is created when the network library receives the
ICMPv6 frame, but the type of message is not supported. The ICMPv6 frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_SendFrame(uint16_t if_id, uint32_t length)
\details
The event \b SendFrame is created when the network library wants to send an ICMPv6 frame.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_PingEcho(const uint8_t *ip6_addr)
\details
The event \b PingEcho is created when the functions \ref netPing_Echo or \ref
netPing_EchoX are executed.

\b Value in the Event Recorder shows:
  - \b ip: target IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_PingTargetNotValid(void)
\details
The event \b PingTargetNotValid is created when the function \ref netPing_EchoX
is executed, and the target name is invalid and can not be resolved.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_PingDnsError(void)
\details
The event \b PingDnsError is created when the function \ref netPing_EchoX
is executed, and the internal DNS resolver failed. To resolve this error, call the
function again after a short delay.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_PingInvalidParameter(void)
\details
The event \b PingInvalidParameter is created when the function \ref netPing_Echo
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_PingClientBusy(void)
\details
The event \b PingClientBusy is created when the function \ref netPing_Echo
is executed, and the internal ping process is still busy.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_PingSendRequest(uint16_t if_id)
\details
The event \b PingSendRequest is created when the network library wants to send
an ICMPv6 echo request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_PingRetransmitRequest(uint16_t if_id)
\details
The event \b PingRetransmitRequest is created when the network library wants to
retransmit an ICMPv6 echo request because the target host is not responding.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetICMP6_PingTimeout(uint16_t if_id)
\details
The event \b PingTimeout is created when the network library has left the internal
ping process because the target host is not responding.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
@}
*/

/**
\defgroup net_evr_dhcp6_func NetDHCP6: DHCP6 Client
\brief Events generated by the Network - Dynamic Host Configuration Client for IPv6 functions
\details
The Network DHCPv6 Client functions generate events that report events in
the Dynamic Host Configuration Protocol version 6 client and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_InitClient(uint16_t if_id, uint8_t vclass)
\details
The event \b InitClient is created when the DHCPv6 client service is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b opt:   extended DHCP6 options enabled.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the DHCPv6 client service is initialized,
that is, when the function \ref netInitialize is executed, and the service could not
assign the UDP socket. To resolve this error, you must increase the number of available
UDP sockets in the UDP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_StartClient(uint16_t if_id, uint32_t mode)
\details
The event \b StartClient is created when the DHCPv6 client service is started.
This happens when the functions \ref netInitialize or \ref netDHCP6_Enable
are executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mode:  client mode of operation (Stateless, Stateful).
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_StopClient(uint16_t if_id)
\details
The event \b StopClient is created when the DHCPv6 client service is stopped, that is
when the function \ref netDHCP6_Disable is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_ClientState(uint16_t if_id, uint8_t state)
\details
The event \b ClientState is created when the network library displays the current
state of the DHCPv6 client.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_NextState(uint16_t if_id, uint8_t state)
\details
The event \b NextState is created when the network library displays the next state
in which the DHCPv6 client will transit.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b next:  next state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_NextStateDelay(uint16_t if_id, uint8_t state, uint16_t delay)
\details
The event \b NextStateDelay is created when the network library displays the next
state in which the DHCPv6 client will transit after the expiration of the delay.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b next:  next state of the DHCPv6 client.
  - \b delay: delay before the transition in milliseconds.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_ChangeStateLinkDown(uint16_t if_id, uint8_t state)
\details
The event \b ChangeStateLinkDown is created when the network library displays the next
state in which the DHCPv6 client will transit because the link-down is detected.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b next:  next state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_NoAddressAvailable(uint16_t if_id, uint8_t state)
\details
The event \b NoAddressAvailable is created when the network library can not assign
the IPv6 address, because the DHCPv6 server responded with a "No Address Available"
status message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_StateRetransmit(uint16_t if_id, uint8_t state)
\details
The event \b StateRetransmit is created when the network library wants to resend
the DHCPv6 message. This happens if the DHCPv6 server does not respond to client request.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_StateTimeout(uint16_t if_id, uint8_t state)
\details
The event \b StateTimeout is created when the discover timeout has expired and
at least one DHCPv6 server responds to the discover messages.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_ChangeStateOnTimeout(uint16_t if_id, uint8_t current, uint8_t next)
\details
The event \b ChangeStateOnTimeout is created when the timeout expired and the
DHCPv6 client needs to change the state.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCPv6 client.
  - \b next:  next state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_T1Expired(uint16_t if_id, uint8_t state)
\details
The event \b T1Expired is created when the lease time of the assigned IPv6 address
has expired and the lease must be renewed. The network library starts renewing
the assigned IPv6 address.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_T2Expired(uint16_t if_id, uint8_t state)
\details
The event \b T2Expired is created when the lease time of the assigned IPv6 address
has expired and the address renewal has failed. This is because the DHCPv6 server
that assigned the IPv6 address is not accessible. The network library starts
discovering DHCPv6 servers again.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b state: current state of the DHCPv6 client.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_SendDhcpMessage(uint16_t if_id, uint8_t msg_type, uint32_t xid)
\details
The event \b SendDhcpMessage is created when a network library sends a DHCPv6 message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  type of DHCPv6 message.
  - \b xid:   transaction identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_ReceiveFrame(uint16_t if_id, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the DHCPv6 frame.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the DHCPv6
response frame that is too short. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_WrongTransactionId(uint16_t if_id, uint32_t xid, uint32_t xid_valid)
\details
The event \b WrongTransactionId is created when the network library receives
the DHCPv6 response frame, but the received transaction identifier (XID) is not identical
to the transaction identifier of our DHCPv6 request. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b xid:   received transaction identifier.
  - \b valid: expected transaction identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_MessageTypeUnknown(uint16_t if_id, uint8_t msg_type)
\details
The event \b MessageTypeUnknown is created when the network library receives the
DHCPv6 frame, but the type of message is not supported. The DHCPv6 frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  unknown DHCPv6 message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_ViewMessage(uint16_t if_id, uint8_t msg_type, uint32_t xid)
\details
The event \b ViewMessage is created when the network library receives the DHCPv6
message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCPv6 message type.
  - \b xid:   received transaction identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_InvalidMessageType(uint16_t if_id, uint8_t msg_type, uint8_t msg_valid)
\details
The event \b InvalidMessageType is created when the network library receives the
DHCPv6 frame, but the type of message is not valid in current state. The DHCPv6
frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCPv6 message type.
  - \b valid: expected DHCPv6 message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_WrongClientId(uint16_t if_id, uint8_t msg_type)
\details
The event \b WrongClientId is created when the network library receives the DHCPv6
response frame, but the received client identifier is not identical to the client
identifier sent in the DHCPv6 request. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCPv6 message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_ServerNotChosen(uint16_t if_id, uint8_t msg_type)
\details
The event \b ServerNotChosen is created when the network library receives the DHCPv6
response frame in DISCOVER or REBIND state, but the DHCPv6 server is not selected.
This happens if the server preference is lower than the preference of the already
selected server, or the server identifier option is missing in the response.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCPv6 message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_StatusCode(uint16_t if_id, uint16_t status)
\details
The event \b StatusCode is created when the network library finds the status code
in a DHCPv6 frame and wants to display its value.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b status: status code (Success, UnspecFail, NoAddrAvail, NoBinding, NotOnLink, UseMulticast).
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_WrongServerId(uint16_t if_id, uint8_t msg_type)
\details
The event \b WrongServerId is created when the network library receives the DHCPv6
response frame, but the received server identifier is not identical to the server
identifier sent in the DHCPv6 request. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCPv6 message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_ViewDnsServers(uint16_t if_id, const uint8_t *dns_list)
\details
The event \b ViewwDnsServers is created when the network library wants to display
the IPv6 addresses of the primary and secondary DNS server.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b pri:   IPv6 address of the primary DNS server.
  - \b sec:   IPv6 address of the secondary DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_MissingServerId(uint16_t if_id, uint8_t msg_type)
\details
The event \b MissingServerId is created when the network library receives the DHCPv6
response frame, but the server identifier option is missing. The frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received DHCPv6 message type.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_WrongIaid(uint32_t iaid, uint32_t iaid_valid)
\details
The event \b WrongIaid is created when the network library receives the DHCPv6 frame,
but the Identity Association Identifier (IAID) is not valid. The DHCPv6 frame is
therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b iaid:  received IAID value.
  - \b valid: expected IAID value.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_ViewIanaOffer(const void *iana_offer)
\details
The event \b ViewIanaOffer is created when the network library wants to display
detailed information about the IANA offer that was received. It contains the
offered IPv6 address and the time limits of this address.

\b Value in the Event Recorder shows:
  - \b addr:   offered IPv6 address.
  - \b valid:  valid address lifetime in seconds.
  - \b prefrd: preferred address lifetime in seconds.
  - \b t1:     renew timeout in seconds.
  - \b t2:     rebind timeout in seconds.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_OfferTimerCheckFailed(uint16_t if_id)
\details
The event \b OfferTimerCheckFailed is created when the network library receives
the DHCPv6 offer message, but finds inconsistency in specified timeouts. The DHCPv6
frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDHCP6_UninitClient(uint16_t if_id)
\details
The event \b UninitClient is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
@}
*/

/**
\defgroup net_evr_ndp_func NetNDP: NDP Neighbor Discovery
\brief Events generated by the Network - Neighbor Discovery for IPv6 functions
\details
The Network Neighbor Discovery functions generate events that report events in
the NDP address resolver and NDP cache and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_InitCache(uint16_t if_id, uint32_t num_entries)
\details
The event \b InitCache is created when the NDP service is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif:   network interface identifier.
  - \b entries: number of entries available in NDP cache table.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_FrameCheckFailed(uint16_t if_id, uint8_t msg_type)
\details
The event \b FrameCheckFailed is created when the network library has checked the
received NDP discovery frame and found the inconsistency. The frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received discovery message type.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_AddressNotLinkLocal(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b AddressNotLinkLocal is created when the network library receives the
router advertisement message, but the source IPv6 address is not link-local. The frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:    network interface identifier.
  - \b src_addr: source IPv6 address of received RA message.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_RouterAdvertisement(uint16_t if_id,
                           uint8_t hop_limit, uint8_t flags, uint16_t lifetime)
\details
The event \b RouterAdvertisement is created when the network library receives a valid
router advertisement message.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b hop_limit: current hop limit.
  - \b flags:     advertised configuration M and O flags.
  - \b lifetime:  advertised router lifetime in seconds.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_OptionMtu(uint16_t if_id, uint32_t mtu)
\details
The event \b OptionMtu is created when the network library receives the router
advertisement, and finds the MTU option in the message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mtu:   advertised IPv6 MTU in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_OptionSourceMacAddress(uint16_t if_id, const uint8_t *src_addr)
\details
The event \b OptionSourceMacAddress is created when the network library receives
the neighbor solicitation or router advertisement, and finds the source MAC address
option in the message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  source link-layer address (MAC).
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_OptionPrefixInfo(const uint8_t *opt_prefix)
\details
The event \b OptionPrefixInfo is created when the network library receives
the router advertisement, and finds the prefix information options in the message.

\b Value in the Event Recorder shows:
  - \b prefix: prefix address and prefix length.
  - \b valid:  prefix valid time in seconds.
  - \b prefrd: prefix preferred time in seconds.
  - \b flags:  prefix flags.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_PrefixInfoNotValid(uint16_t if_id)
\details
The event \b PrefixInfoNotValid is created when the network library receives the
router advertisement message, validates the prefix information and finds errors
in it. Therefore, the advertised prefix information is ignored.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_WrongTargetAddress(uint16_t if_id, const uint8_t *targ_addr)
\details
The event \b WrongTargetAddress is created when the network library receives the
neighbor solicitation message, but the target IPv6 address is not ours. The message
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b targ_addr: received target IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_NeighborSolicitation(uint16_t if_id, const uint8_t *targ_addr)
\details
The event \b NeighborSolicitation is created when the network library receives a
valid neighbor solicitation message.

\b Value in the Event Recorder shows:
  - \b netif    : network interface identifier.
  - \b targ_addr: received target IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ProbeRequest(uint16_t if_id)
\details
The event \b ProbeRequest is created when the network library receives a valid
neighbor solicitation message, which is identified as the address probe request.
This usually happens when the host checks if the requested IPv6 address is already
in use.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_NeighborAdvertisement(uint16_t if_id, const uint8_t *targ_addr)
\details
The event \b NeighborAdvertisement is created when the network library receives a
valid neighbor advertisement message.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b targ_addr: received target IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ProbeResponse(uint16_t if_id)
\details
The event \b ProbeResponse is created when the network library receives the response
to address probe request that was sent. This usually happens when the requested
IPv6 address is already in use.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_WrongDestinationAddress(uint16_t if_id, const uint8_t *dst_addr)
\details
The event \b WrongDestinationAddress is created when the network library receives
the neighbor advertisement message, but the destination address is not ours.
The message is therefore discarded.

\b Value in the Event Recorder shows:
  - \b netif:    network interface identifier.
  - \b dst_addr: received destination IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_SendReply(uint16_t if_id, const uint8_t *targ_addr)
\details
The event \b SendReply is created when the network library wants to send a reply
to the received neighbor solicitation message.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b targ_addr: destination IPv6 address for replying.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ViewFlags(uint16_t if_id, uint32_t flags)
\details
The event \b ViewFlags is created when the network library wants to display
the flags for the neighbor advertisement reply.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b flags: advertisement flags for the message.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_SendRequest(uint16_t if_id, uint32_t type)
\details
The event \b SendRequest is created when the network library wants to send a
solicitation message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  message type to send (ROUTER_SOL, NEIGHB_SOL).
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ViewTargetAddress(uint16_t if_id, const uint8_t *targ_addr)
\details
The event \b ViewTargetAddress is created when the network library wants to display
the target address for the solicitation message being generated.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b targ_addr: target IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_OptionTargetMacAddress(uint16_t if_id, const uint8_t *targ_addr)
\details
The event \b OptionTargetMacAddress is created when the network library wants to display
the target MAC address option found in the received neighbor advertisement message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  received target link-layer address (MAC).
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheEntryUpdate(uint16_t if_id, uint32_t entry)
\details
The event \b CacheEntryUpdate is created when the network library receives the
network advertisement response and updates the local cached entry.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_WrongResponse(uint16_t if_id, uint8_t msg_type)
\details
The event \b WrongResponse is created when the network library receives the network
advertisement response, but the library does not wait for it, or the mandatory options
in the message are missing.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b type:  received message type (NEIGHB_ADVER).
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_MakeLinkLocalAddress(uint16_t if_id, const uint8_t *local_addr)
\details
The event \b MakeLinkLocalAddress is created when the network library generates
the link-local IPv6 address. The address is generated from the interface's MAC
address using the EUI-64 format.

\b Value in the Event Recorder shows:
  - \b netif:      network interface identifier.
  - \b local_addr: generated link-local IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_MakeTempAddress(uint16_t if_id, const uint8_t *temp_addr)
\details
The event \b MakeLinkLocalAddress is created when the network library generates
the temporary IPv6 address. The address is generated from the interface's MAC
address using the EUI-64 format and received prefix information from the router.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b temp_addr: generated temporary IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheIpRefreshed(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b CacheIpRefreshed is created when the network library wants to add a new host
to the NDP cache table, but finds it already cached. Therefore, the new host is only
refreshed in the cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host to be added to the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheAdd(uint16_t if_id, const uint8_t *ip6_addr, const uint8_t *mac_addr, uint8_t type)
\details
The event \b CacheAdd is created when the network library wants to add a new host
to the NDP cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host to be added to the cache.
  - \b mac:   MAC address of the host to be added to the cache.
  - \b type:  cache entry type to be added (Host, Router).
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_RouterListFull(uint16_t if_id, uint32_t max_count)
\details
The event \b RouterListFull is created when the network library wants to add a new router
to the NDP cache table, but all router cache entries are used.

\b Value in the Event Recorder shows:
  - \b netif:     network interface identifier.
  - \b max_count: maximum number of router cache entries.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheAllocFailed(uint16_t if_id)
\details
The event \b CacheAllocFailed is created when the network library wants to add new host
to the NDP cache table, but it fails. Therefore, the new host is not cached. In order
to get rid of such events, you must increase the size of the NDP cache table in the
ethernet interface configuration.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheEntryAdded(uint16_t if_id, uint32_t entry, uint32_t timeout)
\details
The event \b CacheEntryAdded is created when the network library successfully added
the new host to the NDP cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: assigned cache entry identifier.
  - \b tout:  cache entry timeout in seconds.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheEntryDeleted(uint16_t if_id,
                           uint32_t entry, const uint8_t *ip6_addr, uint8_t type)
\details
The event \b CacheEntryDeleted is created when the network library successfully deleted
the router entry from the NDP cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: cache entry identifier.
  - \b ip:    IPv6 address of the router.
  - \b type:  cache entry type (Router).
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheEntryRefreshed(uint16_t if_id, uint32_t entry, const uint8_t *ip6_addr)
\details
The event \b CacheEntryRefreshed is created when the network library receives the
unicast IPv6 frame, and refresh the entry in the local cache.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: cache entry identifier.
  - \b ip:    IPv6 address of the cached entry.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheFind(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b CacheFind is created when the network library wants to find the host
in the NDP cache table to resolve its MAC address. If the host is not in the NDP cache,
the network library creates a new entry in the table and starts the resolution process.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host being searched in the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_GatewayUnknown(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b GatewayUnknown is created when the network library wants to find the
non-local host in the NDP cache table. The network library uses the gateway to access
the host, but finds that the gateway address is not specified.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b gw:    IPv6 address of the default gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_UsingGateway(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b UsingGateway is created when the network library wants to find the
non-local host in the NDP cache table. The network library uses the gateway to access
the host.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b gw:    IPv6 address of the default gateway.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_UnresolvedMacAddress(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b UnresolvedMacAddress is created when the network library wants to find
the host in the NDP cache table to resolve its MAC address, but the host is in the
process of resolving. MAC address is not yet valid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host being searched in the cache.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_EntryFound(uint16_t if_id, uint32_t entry)
\details
The event \b EntryFound is created when the network library wants to notify that
it has found the host in the NDP cache table.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheIp(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b CacheIp is created when the function \ref netNDP_CacheIP is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheIpInvalidParameter(uint16_t if_id)
\details
The event \b CacheIpInvalidParameter is created when the function \ref netNDP_CacheIP
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_GetIp(uint16_t if_id, const uint8_t *mac_addr, const uint8_t *ip6_addr)
\details
The event \b GetIp is created when the function \ref netNDP_GetIP is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    returned IPv6 address of the host.
  - \b mac:   MAC address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_GetIpInvalidParameter(uint16_t if_id)
\details
The event \b GetIpInvalidParameter is created when the function \ref netNDP_GetIP
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_GetIpEntryNotFound(uint16_t if_id, const uint8_t *mac_addr)
\details
The event \b GetIpEntryNotFound is created when the function \ref netNDP_GetIP
is executed, but the requested MAC address of the host in the cache is missing.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mac:   MAC address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_GetMac(uint16_t if_id, const uint8_t *ip6_addr, const uint8_t *mac_addr)
\details
The event \b GetMac is created when the function \ref netNDP_GetMAC is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b mac:   returned MAC address of the host.
  - \b ip:    IPv6 address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_GetMacInvalidParameter(uint16_t if_id)
\details
The event \b GetMacInvalidParameter is created when the function \ref netNDP_GetMAC
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_GetMacEntryNotFound(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b GetMacEntryNotFound is created when the function \ref netNDP_GetMAC
is executed, but the requested IPv6 address of the host in the cache is missing.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host being requested.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_Probe(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b Probe is created when the function \ref netNDP_Probe is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host being tested.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ProbeInvalidParameter(uint16_t if_id)
\details
The event \b ProbeInvalidParameter is created when the function \ref netNDP_Probe
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ProbeBusy(uint16_t if_id)
\details
The event \b ProbeBusy is created when the function \ref netNDP_Probe is executed,
and the internal probe process is still busy.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ProbeRetransmit(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b ProbeRetransmit is created when the network library resends the request
for testing the IPv6 address, if it is in use.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host being tested.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ProbeTimeout(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b ProbeTimeout is created when the network library has left the IPv6 address
test procedure, since no host responded. The tested IPv6 address is considered to be free.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b ip:    IPv6 address of the host being tested.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ClearCache(uint16_t if_id, uint32_t deleted, uint32_t available)
\details
The event \b ClearCache is created when the function \ref netNDP_ClearCache is executed.

\b Value in the Event Recorder shows:
  - \b netif:   network interface identifier.
  - \b deleted: number of deleted cache entries.
  - \b max:     maximum number of NDP cache entries.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ClearCacheInvalidParam(uint16_t if_id)
\details
The event \b ClearCacheInvalidParam is created when the function \ref netNDP_ClearCache
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ClearCacheClientBusy(uint16_t if_id)
\details
The event \b ClearCacheClientBusy is created when the function \ref netNDP_ClearCache
is executed, and the internal cache process is still in progress. For example,
\ref netNDP_Probe is still running and not yet complete.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_CacheEntryTimeout(uint16_t if_id, uint32_t entry,
                      const uint8_t *ip6_addr, const uint8_t *mac_addr, uint32_t type)
\details
The event \b CacheEntryTimeout is created when the validity of the NDP cached host
has expired. The host will be refreshed or removed from the cache.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
  - \b type:  type of host cache entry (Host, Router).
  - \b ip:    IPv6 address of the host cache entry.
  - \b mac:   MAC address of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_EntryReleased(uint16_t if_id, uint32_t entry)
\details
The event \b EntryReleased is created when the cached host entry is released from
the NDP cache.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_ResolveEntry(uint16_t if_id, uint32_t entry)
\details
The event \b ResolveEntry is created when the network library wants to resolve the
required NDP entry in the cache. This usually happens when the NDP entry is created,
but it is not yet resolved or has expired.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_RefreshEntry(uint16_t if_id, uint32_t entry)
\details
The event \b RefreshEntry is created when the network library wants to refresh the
required NDP entry in the cache. This happens when the NDP entry expires, and the
type of entry is Inuse-IP.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b entry: identifier of the host cache entry.
*/

/**
\fn __STATIC_INLINE void EvrNetNDP_UninitCache(uint16_t if_id)
\details
The event \b UninitCache is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif:   network interface identifier.
*/

/**
@}
*/

/**
\defgroup net_evr_mld_func NetMLD: MLD Multicast Listener Discovery
\brief Events generated by the Network - MLD Group Management functions
\details
The Network MLD Group Management functions generate events that report events
in the Multicast Listener Discovery Protocol and help in troubleshooting.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_InitNode(uint16_t if_id, uint32_t num_entries)
\details
The event \b InitNode is created when the MLD group manager is initialized,
that is, when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif:  network interface identifier.
  - \b groups: number of available groups.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_Join(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b Join is created when the function \ref netMLD_Join is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of a group to join to.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_AlreadyInGroup(uint16_t if_id, uint8_t group_id)
\details
The event \b AlreadyInGroup is created when the function \ref netMLD_Join is executed,
and the host is already a member of the group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b id:    membership group table identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_NoFreeEntries(uint16_t if_id, uint8_t num_used)
\details
The event \b NoFreeEntries is created when the function \ref netMLD_Join is executed,
and no free membership table entries are available.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b used:  number of used membership table entries.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_SendReport(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b SendReport is created when the function \ref netMLD_Join is executed,
and the network library wants to send a report message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of the group to join.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_Leave(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b Leave is created when the function \ref netMLD_Leave is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of the group to leave.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_NotInGroup(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b NotInGroup is created when the function \ref netMLD_Leave is executed,
and the requested IPv6 address of the group is not a member of any group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of the group to leave.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_SendLeave(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b SendLeave is created when the function \ref netMLD_Leave is executed,
and the network library wants to send a leave message.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of the group to leave.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_FrameTooShort(uint16_t if_id, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the MLD frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b len:   length of the received frame in bytes.
  - \b min:   minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_AddressSpecificQuery(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b AddressSpecificQuery is created when the network library receives the
MLD address specific query.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of the query group.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_DestAddressWrong(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b DestAddressWrong is created when the network library receives the
MLD address specific query, but the destination IPv6 address is wrong.

For the general MLD query (address 0:0:0:0:0:0:0:0) the destination IPv6 address must be
the IPv6 address of all nodes (FF02::2).

For MLD address specific query the destination IPv6 address must be the same as
the IPv6 address of the query group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  destination IPv6 address.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_DelayedReportScheduled(uint16_t if_id, uint16_t max_time)
\details
The event \b DelayedReportScheduled is created when the network library receives the
MLD address specific query.

\b Value in the Event Recorder shows:
  - \b netif:    network interface identifier.
  - \b max_time: maximum allowed delay before sending the report in milliseconds.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_GeneralQuery(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b GeneralQuery is created when the network library receives the
MLD general query.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of the query group.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_MaxTimeForReport(uint16_t if_id, uint16_t max_time)
\details
The event \b MaxTimeForReport is created when the network library receives the
MLD general query.

\b Value in the Event Recorder shows:
  - \b netif:    network interface identifier.
  - \b max_time: maximum allowed delay before sending the report in milliseconds.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_GroupReportsScheduled(uint16_t if_id, uint32_t n_reports)
\details
The event \b GroupReportsScheduled is created when the network library receives
the MLD general query and generates reports for all active groups.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b num:   number of group reports to be sent.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_NoReportScheduled(uint16_t if_id)
\details
The event \b NoReportScheduled is created when the network library receives
the MLD general query and does not generate a report because there is no active group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b num:   number of group reports to be sent.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_ReportReceived(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b ReportReceived is created when the network library receives
a group report from another host.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of the reported group.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_OwnReportCanceled(uint16_t if_id, uint8_t group_id)
\details
The event \b OwnReportCanceled is created when the network library receives
a report for the group we are a member of. Therefore, our group report can be
cancelled because the router is already aware of this group.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b id:    membership group table identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetMLD_SendDelayedReport(uint16_t if_id, const uint8_t *ip6_addr)
\details
The event \b SendDelayedReport is created when the network library wants to
send a delayed group membership report.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
  - \b addr:  IPv6 address of the group membership report.
*/

/**
\fn _STATIC_INLINE void EvrNetMLD_UninitNode(uint16_t if_id)
\details
The event \b UninitNode is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b netif: network interface identifier.
*/

/**
@}
*/

/**
\defgroup net_evr_udp_func NetUDP: UDP Socket
\brief Events generated by the Network - UDP Socket functions
\details
The UDP socket functions generate events that make it easier to troubleshoot errors,
and allow the user to understand the way UDP sockets work.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_InitSockets(uint32_t num_sockets)
\details
The event \b InitSockets is created when the UDP sockets are initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b sockets: number of UDP sockets available.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_GetSocket(int32_t socket, uint32_t num_socks)
\details
The event \b GetSocket is created when the UDP socket is assigned, that is,
when the function \ref netUDP_GetSocket is executed.

\b Value in the Event Recorder shows:
  - \b socket: allocated UDP socket handle.
  - \b max:    the highest possible value of the socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_GetSocketInvalidParameter(void)
\details
The event \b GetSocketInvalidParameter is created, when an invalid input parameter
is provided for the \e udp_get_socket internal function. This usually happens when
the \ref netUDP_GetSocket function is executed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_NoSocketAvailable(uint32_t num_socks)
\details
The event \b NoSocketAvailable is created, when the internal function \e udp_get_socket
can not assign a free UDP socket. This usually happens when the \ref netUDP_GetSocket
function is executed.

\b Value in the Event Recorder shows:
  - \b used: number of already used sockets.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_ReleaseSocket(int32_t socket)
\details
The event \b ReleaseSocket is created when the UDP socket is released, that is,
when the function \ref netUDP_ReleaseSocket is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for release.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_ReleaseSocketNotValid(int32_t socket)
\details
The event \b ReleaseSocketNotValid is created, when the internal function \e udp_release_socket
can not release the UDP socket because the provided socket handle is not valid.
This usually happens when the \ref netUDP_ReleaseSocket function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for release.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_ReleaseSocketWrongState(int32_t socket, uint8_t state)
\details
The event \b ReleaseSocketWrongState is created, when the internal function \e udp_release_socket
can not release the UDP socket because the socket is still open. This usually happens
when the \ref netUDP_ReleaseSocket function is executed. You must first close the socket
before releasing it.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for release.
  - \b state:  state of the UDP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_OpenSocket(int32_t socket, uint16_t port)
\details
The event \b OpenSocket is created when the UDP socket is opened for communication,
that is, when the function \ref netUDP_Open is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for opening.
  - \b port:   local UDP port number.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_OpenSocketNotValid(int32_t socket)
\details
The event \b OpenSocketNotValid is created, when the internal function \e udp_open
can not open the UDP socket because the provided socket handle is invalid.
This usually happens when the \ref netUDP_Open function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for opening.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_OpenSocketWrongState(int32_t socket, uint8_t state)
\details
The event \b OpenSocketWrongState is created, when the internal function \e udp_open
can not open the UDP socket because the socket is not closed. This usually happens
when the \ref netUDP_Open function is executed. Before you open it, you must first
allocate the socket. It is also not possible to open an already open socket.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for opening.
  - \b state:  state of the UDP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_AssignLocalPort(int32_t socket, uint16_t local_port)
\details
The event \b AssignLocalPort is created, when the internal function \e udp_open attempts
to open the UDP socket, but the local port is undefined, which means that it has
a value of 0. The system then assigns a free local port and opens it for communication.
This usually happens when the \ref netUDP_Open function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for opening.
  - \b port:   auto-assigned local UDP port.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_OpenLocalPortInUse(int32_t socket, uint16_t port)
\details
The event \b OpenLocalPortInUse is created, when the internal function \e udp_open
can not open the UDP socket because the local port is already used in another UDP socket.
This usually happens when the \ref netUDP_Open function is executed.

\b Value in the Event Recorder shows:
  - \b socket:   UDP socket handle for opening.
  - \b loc_port: local UDP port that is already used.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_CloseSocket(int32_t socket)
\details
The event \b CloseSocket is created when the UDP socket is closed for communication,
that is, when the function \ref netUDP_Close is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_CloseSocketNotValid(int32_t socket)
\details
The event \b CloseSocketNotValid is created, when the internal function \e udp_close
can not close the UDP socket because the provided socket handle is invalid.
This usually happens when the \ref netUDP_Close function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionSocket(int32_t socket, int32_t option, uint32_t val)
\details
The event \b SetOptionSocket is created, when the internal function \e udp_set_option sets
the operating option for the UDP socket. This usually happens when the \ref netUDP_SetOption
function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b opt:    option to be set.
  - \b val:    value for the setting option.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionSocketNotValid(int32_t socket)
\details
The event \b SetOptionSocketNotValid is created, when the internal function \e udp_set_option
can not set the UDP socket option because the provided socket handle is invalid.
This usually happens when the \ref netUDP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionSocketWrongState(int32_t socket, uint8_t state)
\details
The event \b SetOptionSocketWrongState is created, when the internal function \e udp_set_option
can not set the UDP socket option because the socket is not created. This usually happens
when the \ref netUDP_SetOption function is executed. Before you set the socket option,
you must first allocate the socket.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b state:  state of the UDP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionTos(int32_t socket, uint8_t ip4_tos)
\details
The event \b SetOptionTos is created, when the internal function \e udp_set_option
sets the TOS (IPv4 Type of Service) for the socket. This usually happens when
the \ref netUDP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b tos:    value for TOS option.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionTtl(int32_t socket, uint8_t ip4_ttl)
\details
The event \b SetOptionTtl is created, when the internal function \e udp_set_option
sets the TTL option (IPv4 Time to Live) for the socket. This usually happens when
the \ref netUDP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b ttl:    value for TTL option.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionTclass(int32_t socket, uint8_t ip6_tclass)
\details
The event \b SetOptionTclass is created, when the internal function \e udp_set_option
sets the TClass (IPv6 Traffic Class) for the socket. This usually happens when
the \ref netUDP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b tclass: value for TClass option.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionHopLimit(int32_t socket, uint8_t ip6_hoplimit)
\details
The event \b SetOptionHopLimit is created, when the internal function \e udp_set_option
sets the HopLimit option (IPv6 Hop Limit) for the socket. This usually happens when
the \ref netUDP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket:    UDP socket handle for setting the option.
  - \b hop_limit: value for HopLimit option.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionChecksum(int32_t socket, uint32_t checksum)
\details
The event \b SetOptionChecksum is created, when the internal function \e udp_set_option
sets the checksum generation and checksum verification options for the socket.
This usually happens when the \ref netUDP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b send:   send checksum generation (On, Off).
  - \b verify: receive checksum verification (On, Off).
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionInterface(int32_t socket, uint16_t if_id)
\details
The event \b SetOptionInterface is created, when the internal function \e udp_set_option
sets the network interface for the socket that is used when the \ref netUDP_Send sends data
to a broadcast or a multicast address. This usually happens when the \ref netUDP_SetOption
function is executed.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b netif:  network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionWrongOption(int32_t socket, int32_t udp_option)
\details
The event \b SetOptionWrongOption is created, when the internal function \e udp_set_option
can not set the UDP socket option because the requested option is not supported. This
can happen when attempting to set the IPv6 option in IPv4-Only Network library.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b opt:    requested option to set.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SetOptionWrongValue(int32_t socket, uint32_t opt_value)
\details
The event \b SetOptionWrongValue is created, when the internal function \e udp_set_option
can not set the UDP socket option because the option value is invalid. This usually
happens when the option value is out of range.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle for setting the option.
  - \b value:  option value that is invalid.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_GetBufferFailed(uint16_t mem_size)
\details
The event \b GetBufferFailed is created, when the network library can not allocate
the memory for the UDP socket send buffer. This happens when there is no free memory
in the memory pool.

\b Value in the Event Recorder shows:
  - \b size: requested memory size.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SendFrame(int32_t socket, uint32_t length)
\details
The event \b SendFrame is created when the UDP frame header is constructed and
the frame is sent to IP layer for further processing and transmit.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
  - \b len:    length of the UDP frame payload.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SendBufferInvalid(int32_t socket)
\details
The event \b SendBufferInvalid is created, when the internal function \e udp_send can
not send the UDP frame, because the send buffer is invalid. This happens when the
sending buffer is not allocated from \ref netUDP_GetBuffer function.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SendSocketNotValid(int32_t socket)
\details
The event \b SendSocketNotValid is created, when the internal function \e udp_send
can not send the UDP frame because the provided socket handle is invalid.
This usually happens when the \ref netUDP_Send function is executed and the sending
frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SendAddressUnspecified(int32_t socket)
\details
The event \b SendAddressUnspecified is created, when the internal function \e udp_send
can not send the UDP frame because the provided destination IP address is unspecified.
This usually happens when the \ref netUDP_Send function is executed and the sending
frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SendPortUndefined(int32_t socket)
\details
The event \b SendPortUndefined is created, when the internal function \e udp_send
can not send the UDP frame because the provided destination port is undefined.
This usually happens when the \ref netUDP_Send function is executed and the sending
frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SendSocketNotOpen(int32_t socket)
\details
The event \b SendSocketNotOpen is created, when the internal function \e udp_send
can not send the UDP frame because the UDP socket is not open for communication.
You should open the UDP socket first and then send the frame. This usually happens
when the \ref netUDP_Send function is executed and the sending frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SendZeroLengthFrame(int32_t socket)
\details
The event \b SendZeroLengthFrame is created, when the internal function \e udp_send
can not send the UDP frame because the length of the data is zero. This usually
happens when the \ref netUDP_Send function is executed and the sending frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_SendSizeTruncated(int32_t socket, uint32_t new_length)
\details
The event \b SendSizeTruncated is created, when the internal function \e udp_send
truncates the data, because the length of the data is too large. This happens when
the \ref netUDP_Send function is executed.

\b Value in the Event Recorder shows:
  - \b socket:  UDP socket handle.
  - \b new_len: shortened data length.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_ShowFrameHeader(const void *udp_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the UDP header.

\b Value in the Event Recorder shows:
  - \b dst_port: destination UDP port.
  - \b src_port: source UDP port.
  - \b cksum:    frame checksum.
  - \b len:      length of the frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_ReceiveFrame(uint32_t length, uint8_t ip_version)
\details
The event \b ReceiveFrame is created when the network library receives the UDP frame.
The frame can come from any interface.

\b Value in the Event Recorder shows:
  - \b len: length of the received UDP frame in bytes.
  - \b ver: IP protocol version of the received frame (IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the UDP frame
that is too short. The UDP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_MapFrameToSocket(int32_t socket)
\details
The event \b MapFrameToSocket is created when the network library receives the UDP frame
and maps the frame to an open UDP socket.

\b Value in the Event Recorder shows:
  - \b socket: mapped UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_FrameNotMapped(uint32_t length)
\details
The event \b FrameNotMapped is created when the network library receives the UDP frame
and can not map the frame to any open UDP socket. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_LinkLayerAddressed(int32_t socket)
\details
The event \b LinkLayerAddressed is created when the network library receives the UDP frame
that is link-layer addressed (by MAC address), but the socket is not set to receive
the link-layer addressed frames. The UDP frame is therefore discarded.

Usually, the Link-layer addressed UDP frames are used in the DHCP protocol.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_ChecksumFailed(int32_t socket)
\details
The event \b ChecksumFailed is created when the network library has checked the checksum
on the received UDP frame and the verification failed. The UDP frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b socket: UDP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetUDP_UninitSockets(void)
\details
The event \b UninitSockets is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b udp
*/

/**
@}
*/

/**
\defgroup net_evr_tcp_func NetTCP: TCP Socket
\brief Events generated by the Network - TCP Socket functions
\details
The TCP socket functions generate events that make it easier to troubleshoot errors,
and allow the user to understand the way TCP sockets work.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_InitSockets(uint32_t num_sockets, uint16_t max_segsize)
\details
The event \b InitSockets is created when the TCP sockets are initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b sockets: number of TCP sockets available.
  - \b mss:     maximum segment size in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_GetSocket(int32_t socket, uint32_t num_socks)
\details
The event \b GetSocket is created when the TCP socket is assigned, that is,
when the function \ref netTCP_GetSocket is executed.

\b Value in the Event Recorder shows:
  - \b socket: allocated TCP socket handle.
  - \b max:    the highest possible value of the socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_GetSocketInvalidParameter(void)
\details
The event \b GetSocketInvalidParameter is created, when an invalid input parameter
is provided for the \e tcp_get_socket internal function. This usually happens when
the \ref netTCP_GetSocket function is executed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_NoSocketAvailable(uint32_t num_socks)
\details
The event \b NoSocketAvailable is created, when the internal function \e tcp_get_socket
can not assign a free TCP socket. This usually happens when the \ref netTCP_GetSocket
function is executed.

\b Value in the Event Recorder shows:
  - \b used: number of already used sockets.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ReleaseSocket(int32_t socket)
\details
The event \b ReleaseSocket is created when the TCP socket is released, that is,
when the function \ref netTCP_ReleaseSocket is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for release.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ReleaseSocketNotValid(int32_t socket)
\details
The event \b ReleaseSocketNotValid is created, when the internal function \e tcp_release_socket
can not release the TCP socket because the provided socket handle is not valid.
This usually happens when the \ref netTCP_ReleaseSocket function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for release.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ReleaseSocketWrongState(int32_t socket, int32_t state)
\details
The event \b ReleaseSocketWrongState is created, when the internal function \e tcp_release_socket
can not release the TCP socket because the socket is not closed. This usually happens
when the \ref netTCP_ReleaseSocket function is executed. You must first close the socket
before releasing it.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for release.
  - \b state:  state of the TCP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ListenSocket(int32_t socket, uint16_t port)
\details
The event \b ListenSocket is created, when the socket is set to the listening mode,
that is, when the function \ref netTCP_Listen is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for listening.
  - \b port:   assigned local TCP port.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ListenSocketNotValid(int32_t socket)
\details
The event \b ListenSocketNotValid is created, when the internal function \e tcp_listen
can not set the TCP socket to listening mode because the provided socket handle is not valid.
This usually happens when the \ref netTCP_Listen function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ListenPortUndefined(int32_t socket)
\details
The event \b ListenPortUndefined is created, when the internal function \e tcp_listen
can not set the TCP socket to listening mode because the provided port number is undefined,
which means that it has a value of 0. This usually happens when the \ref netTCP_Listen function
is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ListenSocketWrongState(int32_t socket, int32_t state)
\details
The event \b ListenSocketWrongState is created, when the internal function \e tcp_listen
can not set the TCP socket to listening mode because the socket is not closed.
This usually happens when the \ref netTCP_Listen function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for listening.
  - \b state:  state of the TCP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ConnectSocket(int32_t socket, uint16_t local_port)
\details
The event \b ConnectSocket is created, when a socket starts a connection to a remote server,
that is, when the function \ref netTCP_Connect is executed.

\b Value in the Event Recorder shows:
  - \b socket:   TCP socket handle for connection.
  - \b loc_port: assigned local TCP port.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ConnectSocketNotValid(int32_t socket)
\details
The event \b ConnectSocketNotValid is created, when the internal function \e tcp_connect
can not start connection because the provided socket handle is not valid.
This usually happens when the \ref netTCP_Connect function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ConnectAddressUnspecified(int32_t socket)
\details
The event \b ConnectAddressUnspecified is created, when the internal function \e tcp_connect
can not start connection because the provided destination IP address is unspecified.
This usually happens when the \ref netTCP_Connect function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ConnectPortUndefined(int32_t socket)
\details
The event \b ConnectPortUndefined is created, when the internal function \e tcp_connect
can not start connection because the provided remote port number is undefined,
which means that it has a value of 0. This usually happens when the \ref netTCP_Connect
function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ShowNetAddress(const void *net_addr)
\details
The event \b ShowNetAddress is created when the network library wants to display
the contents of the network address structure, that is, the IP address and
the port number.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address.
  - \b port: port number.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ConnectLocalPortInvalid(int32_t socket, uint16_t local_port)
\details
The event \b ConnectLocalPortInvalid is created, when the internal function \e tcp_connect
can not start connection because the local port number is invalid, meaning that it has
a value of 0 or equal to the listening local port. This happens when the \ref netTCP_Connect
function is executed for the listening socket.

\b Value in the Event Recorder shows:
  - \b socket:   TCP socket handle for connection.
  - \b loc_port: local port number.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_AssignLocalPort(int32_t socket, uint16_t local_port)
\details
The event \b AssignLocalPort is created, when the internal function \e tcp_connect
attempts to connect, but the local port is not defined, which means that it has
a value of 0. The socket then automatically allocates a free local port and uses
it to connect. This happens when the \ref netTCP_Connect function is executed.

\b Value in the Event Recorder shows:
  - \b socket:   TCP socket handle for connection.
  - \b loc_port: assigned local port number.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ConnectSocketWrongState(int32_t socket, int32_t state)
\details
The event \b ConnectSocketWrongState is created, when the internal function \e tcp_connect
can not start connection because the the socket is not closed or not listening.
This usually happens when the \ref netTCP_Connect function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b state:  state of the TCP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ShowRttVariables(int32_t socket, int16_t sa, int16_t sv)
\details
The event \b ShowRttVariables is created when the network library wants to display
the round trip time estimation variables, that are used to avoid congestion. The variables
are from Van Jacobson's Congestion Avoidance and Control.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b rto:    calculated retransmit timeout interval in ms.
  - \b sa:     RTT average estimator.
  - \b sv:     RTT deviation estimator.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_GetBufferFailed(uint16_t mem_size)
\details
The event \b GetBufferFailed is created, when the network library can not allocate
the memory for the TCP socket send buffer. This happens when there is no free memory
in the memory pool.

\b Value in the Event Recorder shows:
  - \b size: requested memory size.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendFrame(int32_t socket, uint32_t length)
\details
The event \b SendFrame is created when the TCP frame header is constructed and
the frame is sent to IP layer for further processing and transmit.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
  - \b len:    length of the TCP frame payload.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendBufferInvalid(int32_t socket)
\details
The event \b SendBufferInvalid is created, when the internal function \e tcp_send can
not send the TCP frame, because the send buffer is invalid. This happens when the
sending buffer is not allocated from \ref netTCP_GetBuffer function.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendSocketNotValid(int32_t socket)
\details
The event \b SendSocketNotValid is created, when the internal function \e tcp_send
can not send the TCP frame because the provided socket handle is invalid.
This usually happens when the \ref netTCP_Send function is executed and the sending
frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendSocketNotConnected(int32_t socket)
\details
The event \b SendSocketNotConnected is created, when the internal function \e tcp_send
can not send the TCP frame because the socket is not connected. This usually happens
when the \ref netTCP_Send function is executed and the sending frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendSocketClosing(int32_t socket)
\details
The event \b SendSocketClosing is created, when the internal function \e tcp_send
can not send the TCP frame because the socket is currently closing. This usually
happens when the \ref netTCP_Send function is executed and the sending frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendReenteredCall(int32_t socket)
\details
The event \b SendReenteredCall is created, when the internal function \e tcp_send
can not send the TCP frame because it is called from an illegal context, that is,
from a socket callback function. This usually happens when the \ref netTCP_Send function
is executed from the callback function of the same socket and the sending frame
is discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendDataUnacked(int32_t socket)
\details
The event \b SendDataUnacked is created, when the internal function \e tcp_send
can not send the TCP frame because data is already waiting for acknowledge and there
is no room for adding more data. This usually happens when the \ref netTCP_Send function
is executed and the sending frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendMssExceeded(int32_t socket)
\details
The event \b SendMssExceeded is created, when the internal function \e tcp_send
can not send the TCP frame because length of the data is too large. This occurs when
the \ref netTCP_Send function is executed for a length that is above the maximum length
obtained by \ref netTCP_GetMaxSegmentSize function and the sending frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendZeroLengthFrame(int32_t socket)
\details
The event \b SendZeroLengthFrame is created, when the internal function \e tcp_send
can not send the TCP frame because the length of the data is zero. This usually happens
when the \ref netTCP_Send function is executed and the sending frame is discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_CloseSocket(int32_t socket)
\details
The event \b CloseSocket is created when the TCP socket is closed for communication,
that is, when the function \ref netTCP_Close is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_CloseSocketNotValid(int32_t socket)
\details
The event \b CloseSocketNotValid is created, when the internal function \e tcp_close
can not close the TCP socket because the provided socket handle is invalid.
This usually happens when the \ref netTCP_Close function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_CloseDataUnacked(int32_t socket, uint32_t unack_length)
\details
The event \b CloseDataUnacked is created, when the internal function \e tcp_close
can not close the TCP socket because some transmitted data is still pending confirmation.
This usually happens when the \ref netTCP_Close function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for closing.
  - \b len:    length of the unacknowledged data.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_CloseSocketWrongState(int32_t socket, int32_t state)
\details
The event \b CloseSocketWrongState is created, when the internal function \e tcp_close
can not close the TCP socket because the the socket is not created.
This usually happens when the \ref netTCP_Close function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for closing.
  - \b state:  state of the TCP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_AbortSocket(int32_t socket)
\details
The event \b AbortSocket is created when the TCP socket is interrupted for communication,
that is, closed instantly. This happens when the function \ref netTCP_Abort is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for aborting.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_AbortSocketNotValid(int32_t socket)
\details
The event \b AbortSocketNotValid is created, when the internal function \e tcp_abort
can not abort the TCP socket because the provided socket handle is invalid.
This usually happens when the \ref netTCP_Abort function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for aborting.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_AbortSocketWrongState(int32_t socket, int32_t state)
\details
The event \b AbortSocketWrongState is created, when the internal function \e tcp_abort
can not abort the TCP socket because the the socket is not created.
This usually happens when the \ref netTCP_Abort function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for aborting.
  - \b state:  state of the TCP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendReadySocketNotValid(int32_t socket)
\details
The event \b SendReadySocketNotValid is created, when the socket status query
fails because the provided socket handle is invalid. This happens when the
\ref netTCP_SendReady function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for query.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendReadyReenteredCall(int32_t socket)
\details
The event \b SendReadyReenteredCall is created, when the socket status query fails
because it is called from an illegal context, that is, from a socket callback function.
This happens when the \ref netTCP_SendReady function is executed from the callback function
of the same socket.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for query.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ResetWindowSocketNotValid(int32_t socket)
\details
The event \b ResetWindowSocketNotValid is created, when the internal function
\e tcp_reset_window can not reset the full size window because the provided socket
handle is invalid. This happens when the \ref netTCP_ResetReceiveWindow function
is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for receive window update.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ResetWindowNotConnected(int32_t socket)
\details
The event \b ResetWindowNotConnected is created, when the internal function
\e tcp_reset_window can not reset the full size window because the socket is not connected.
This happens when the \ref netTCP_ResetReceiveWindow function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for receive window update.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ResetWindowNoFlowControl(int32_t socket)
\details
The event \b ResetWindowNoFlowControl is created, when the internal function
\e tcp_reset_window can not reset the full size window because the TCP flow-control
is not enabled for the socket. This happens when the \ref netTCP_ResetReceiveWindow
function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for receive window update.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ResetWindowUpdate(int32_t socket, uint16_t window_size)
\details
The event \b ResetWindowUpdate is created, when the internal function \e tcp_reset_window
sends a TCP Window update frame. This happens when the \ref netTCP_ResetReceiveWindow
function is executed and the receive window is reduced.

\b Value in the Event Recorder shows:
  - \b socket:      TCP socket handle for receive window update.
  - \b window_size: updated window size for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionSocket(int32_t socket, int32_t option, uint32_t val)
\details
The event \b SetOptionSocket is created, when the internal function \e tcp_set_option sets
the operating option for the TCP socket. This usually happens when the \ref netTCP_SetOption
function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b opt:    option to be set.
  - \b val:    value for the setting option.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionSocketNotValid(int32_t socket)
\details
The event \b SetOptionSocketNotValid is created, when the internal function \e tcp_set_option
can not set the TCP socket option because the provided socket handle is invalid.
This usually happens when the \ref netTCP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionSocketWrongState(int32_t socket, int32_t state)
\details
The event \b SetOptionSocketWrongState is created, when the internal function \e tcp_set_option
can not set the TCP socket option because the socket is not created. This usually happens
when the \ref netTCP_SetOption function is executed. Before you set the socket option,
you must first allocate the socket.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b state:  state of the TCP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionTos(int32_t socket, uint8_t ip4_tos)
\details
The event \b SetOptionTos is created, when the internal function \e tcp_set_option
sets the TOS (IPv4 Type of Service) for the socket. This usually happens when
the \ref netTCP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b tos:    value for TOS option.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionTclass(int32_t socket, uint8_t ip6_tclass)
\details
The event \b SetOptionTclass is created, when the internal function \e tcp_set_option
sets the TClass (IPv6 Traffic Class) for the socket. This usually happens when
the \ref netTCP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b tclass: value for TClass option.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionTimeout(int32_t socket, uint16_t timeout)
\details
The event \b SetOptionTimeout is created, when the internal function \e tcp_set_option
sets the connection timeout or keepalive interval for the socket. This usually happens
when the \ref netTCP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b tout:   value for connection timeout or keepalive interval.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionKeepAlive(int32_t socket, uint32_t enable)
\details
The event \b SetOptionKeepAlive is created, when the internal function \e tcp_set_option
enables or disables the keepalive mode for the socket. This usually happens
when the \ref netTCP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b enable: controlling the keepalive mode (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionFlowControl(int32_t socket, uint32_t enable)
\details
The event \b SetOptionFlowControl is created, when the internal function \e tcp_set_option
enables or disables the TCP flow control mode for the socket. This usually happens
when the \ref netTCP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b enable: controlling the TCP flow control mode (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionDelayedAck(int32_t socket, uint32_t enable)
\details
The event \b SetOptionDelayedAck is created, when the internal function \e tcp_set_option
enables or disables the delayed acknowledgement for the socket. This usually happens
when the \ref netTCP_SetOption function is executed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b enable: controlling the delayed acknowledgement (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionWrongOption(int32_t socket, int32_t tcp_option)
\details
The event \b SetOptionWrongOption is created, when the internal function \e tcp_set_option
can not set the TCP socket option because the requested option is not supported. This
can happen when attempting to set the IPv6 option in IPv4-Only Network library.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b opt:    requested option to set.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SetOptionWrongValue(int32_t socket, uint32_t opt_value)
\details
The event \b SetOptionWrongValue is created, when the internal function \e tcp_set_option
can not set the TCP socket option because the option value is invalid. This usually
happens when the option value is out of range.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for setting the option.
  - \b value:  option value that is invalid.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendDelayedAck(int32_t socket)
\details
The event \b SendDelayedAck is created, when the delay timer expires,
the acknowledge request is pending and the delayed acknowledgement is active.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendKeepAliveProbe(int32_t socket)
\details
The event \b SendKeepAliveProbe is created, when the keepalive timer expires,
and the keepalive mode is enabled for the socket. The network library sends the keepalive
probe to retain the connection.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_KeepAliveTimeoutClosing(int32_t socket)
\details
The event \b KeepAliveTimeoutClosing is created, when the keepalive timer expires,
but the keepalive mode is not enabled for the socket. The socket is then closed.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_CallbackEventAck(int32_t socket)
\details
The event \b CallbackEventAck is created, when the network library sends an acknowledge
notification to the user application. The notification shall be sent if certain conditions
are met. This means that the TCP sending window allows you to send more data and
there is enough free memory to store new transmit packets.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ResendOnTimeout(int32_t socket, uint32_t length)
\details
The event \b ResendOnTimeout is created, when the acknowledge timer expires, and
the network library must retransmit the undelivered data.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b len:    length of the undelivered data.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ShowCongestionVariables(int32_t socket, uint16_t cwnd, uint16_t ssth)
\details
The event \b ShowCongestionVariables is created when the network library wants to display
the variables, that are used to prevent congestion. Variables control the slow-start
and congestion avoidance algorithms for the TCP connection.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b cwnd: congestion window.
  - \b ssth: slow start threshold.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_TimeoutInState(int32_t socket, int32_t state)
\details
The event \b TimeoutInState is created, when the retry timer expires, and
the network library must resend the control packet.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b state:  current state of the TCP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_TwaitTimeoutClosing(int32_t socket)
\details
The event \b TwaitTimeoutClosing is created, when the retry timer expires in the
time-wait state of the TCP socket. The socket is then closed in client mode, or
listening is reactivated in server mode.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ClosingTimeout(int32_t socket)
\details
The event \b ClosingTimeout is created, when the retry timer expires and the socket
is closing. If retries are available, the socket sends the control packet again.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_NoRetriesLeft(int32_t socket)
\details
The event \b NoRetriesLeft is created, when the retry timer expires and the socket
is closing. Because no retries are left, the socket arbitrarily closes the connection
by sending the reset packet.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ReceiveFrame(uint32_t length, uint8_t ip_version)
\details
The event \b ReceiveFrame is created when the network library receives the TCP frame.
The frame can come from any interface.

\b Value in the Event Recorder shows:
  - \b len: length of the received TCP frame in bytes.
  - \b ver: IP protocol version of the received frame (IPv4, IPv6).
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the TCP frame
that is too short. The TCP frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_FrameNotMapped(uint32_t length)
\details
The event \b FrameNotMapped is created when the network library receives the TCP frame
and can not map the frame to any open TCP socket. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_MapFrameToSocket(int32_t socket, int32_t state)
\details
The event \b MapFrameToSocket is created when the network library receives the TCP frame
and maps the frame to an open TCP socket.

\b Value in the Event Recorder shows:
  - \b socket: mapped TCP socket handle.
  - \b state:  state of the TCP socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ChecksumFailed(int32_t socket)
\details
The event \b ChecksumFailed is created when the network library has checked the checksum
on the received TCP frame and the verification failed. The TCP frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ShowFrameHeader(const void *tcp_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the TCP header.

\b Value in the Event Recorder shows:
  - \b dport: destination TCP port.
  - \b sport: source TCP port.
  - \b seq:   send sequence number.
  - \b ack:   acknowledge sequence number.
  - \b flags: TCP frame flags.
  - \b win:   receive window size.
  - \b cksum: frame checksum.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_RstInWindow(int32_t socket)
\details
The event \b RstInWindow is created when the connected socket receives the TCP frame
with the RST flag set and the sequence is within the current receive window. The
socket then sends a challenge ACK frame.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_RstNotValid(int32_t socket)
\details
The event \b RstNotValid is created when the connected socket receives the TCP frame
with the RST flag set and the sequence is outside the current receive window.
The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_RepeatedSynAck(int32_t socket)
\details
The event \b RepeatedSynAck is created when the connected socket receives the TCP frame
with the SYN and ACK flags again, but the socket is already connected. This usually
happens when our acknowledgement is lost. The frame is therefore acknowledged again.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_AckNotSet(int32_t socket)
\details
The event \b AckNotSet is created when the connected socket receives the TCP frame
with the ACK flag not set. The frame is therefore discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ShowSendWindow(int32_t socket, uint16_t send_window)
\details
The event \b ShowSendWindow is created when the connected socket wants to display
the current size of the send window.

\b Value in the Event Recorder shows:
  - \b socket:   TCP socket handle for connection.
  - \b send_win: current send window.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_KeepAliveSegment(int32_t socket)
\details
The event \b KeepAliveSegment is created when the connected socket receives the TCP frame
with no data that is recognized as a keepalive packet. The keepalive timer then restarts.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_RetransmittedSegment(int32_t socket)
\details
The event \b RetransmittedSegment is created when the connected socket receives the
TCP frame with data that is recognized as a retransmitted packet. This happens when
our acknowledgement is lost. The frame is therefore acknowledged again.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_OutOfRangeSegment(int32_t socket)
\details
The event \b OutOfRangeSegment is created when the connected socket receives the
TCP frame with sequence number that is out of range. This happens when an error
occured while processing the sequence number on the peer side. The frame is then
discarded and the last valid sequence number is acknowledged again.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ZeroWindowProbe(int32_t socket)
\details
The event \b ZeroWindowProbe is created when the connected socket receives the
TCP frame with data that is recognized as a zero window probe packet. This happens
when our receive window is closed, and remote peer wants to check this. The frame
is then discarded and the last valid sequence number is acknowledged again.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_RemotePeerClosing(int32_t socket)
\details
The event \b RemotePeerClosing is created when the connected socket receives the
TCP frame with the FIN flag set. This happens when the remote peer wants to close
the connection. The socket sends all unacknowledged data, if any, and confirms
closing of the socket.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ShowReceiveWindow(int32_t socket, uint16_t rec_window)
\details
The event \b ShowReceiveWindo is created when the connected socket wants to display
the current size of the receive window.

\b Value in the Event Recorder shows:
  - \b socket:  TCP socket handle for connection.
  - \b rec_win: current receive window.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_InvalidAck(int32_t socket)
\details
The event \b InvalidAck is created when the listening socket receives the TCP frame
with the ACK flag set. This might happen, if the remote peer has a phantom socket
still open. The socket then sends a reset frame to the remote peer.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SynNotSet(int32_t socket)
\details
The event \b SynNotSet is created when the listening socket receives the TCP frame
with the SYN flag not set. This might happen, if the remote peer has a phantom socket
still open. The socket then sends a reset frame to the remote peer.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_UserConnectionReject(int32_t socket)
\details
The event \b UserConnectionReject is created when the listening socket receives
the TCP frame with the SYN flag set, but the user application has rejected this
incoming connection from the callback function. The socket sends a reset frame
to the remote peer.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_NextState(int32_t socket, int32_t state)
\details
The event \b NextState is created when the socket state changes to a new state.
The state transition usually changes some internal variables and restarts some
of the socket timers.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
  - \b next:   next state of the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_WrongSynAck(int32_t socket)
\details
The event \b WrongSynAck is created when the socket receives the TCP frame
with the SYN and ACK flags set, but the sequence number is not correct. The frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_WrongAckNumber(int32_t socket)
\details
The event \b WrongAckNumber is created when the socket receives the TCP frame
with the ACK flags set, but the acknowledge number is not correct. The frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_WrongSeqNumber(int32_t socket)
\details
The event \b WrongSeqNumber is created when the socket receives the TCP frame
with the ACK flag set, but the sequence number is not correct. The frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_RepeatedSyn(int32_t socket)
\details
The event \b RepeatedSyn is created when the socket receives the TCP frame
with the SYN flag set again. If this happens when the socket is connected, then
the the last valid sequence number is acknowledged again, otherwise the frame is
discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_FrameUnrecognised(int32_t socket)
\details
The event \b FrameUnrecognised is created when the socket receives the TCP frame
with a set of invalid flags. The socket sends a reset frame to the remote peer.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SimultOpenNextState(int32_t socket, int32_t state)
\details
The event \b SimultOpenNextState is created when the socket receives the TCP frame
with the SYN flag set and identifies it as being simultaneously opened from both sides.
The socket sends acknowledge and proceeds to establish a connection.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b next:   next state of the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_WrongFinAck(int32_t socket)
\details
The event \b WrongFinAck is created when the socket receives the TCP frame
with the FIN and ACK flags set, but the acknowledge number is not correct. The frame
is therefore discarded.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_FinAckNextState(int32_t socket, int32_t state)
\details
The event \b FinAckNextState is created when the socket receives the TCP frame
with the FIN and ACK flags set and identifies it as being simultaneously closed on
both sides. The socket then sends acknowledge and the state changes to the next state.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b next:   next state of the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SimultCloseNextState(int32_t socket, int32_t state)
\details
The event \b SimultCloseNextState is created when the socket receives the TCP frame
with the FIN flag set and identifies it as the simultaneous closing on both sides.
The socket sends an acknowledgement and the state changes to the next state.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b next:   next state of the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_AckNextState(int32_t socket, int32_t state)
\details
The event \b AckNextState is created when the socket receives the TCP frame
with the ACK flag set while closing. The socket state changes to the next state.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b next:   next state of the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_FinNextState(int32_t socket, int32_t state)
\details
The event \b FinNextState is created when the socket receives the TCP frame
with the FIN flag set while closing. The socket state changes to the next state.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b next:   next state of the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_PshAckInHalfClosed(int32_t socket)
\details
The event \b PshAckInHalfClosed is created when the socket receives the TCP frame
with the PSH and ACK flags set on closing. The remote peer is still open. The socket
is in a half-closed state. The received data is delivered to the application.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_RepeatedFin(int32_t socket)
\details
The event \b RepeatedFin is created when the socket again receives the TCP frame
with the FIN flag set during closing. The socket then sends an acknowledgement.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_LastAckNextState(int32_t socket, int32_t state)
\details
The event \b LastAckNextState is created when the socket receives the last
acknowledgement during closing. The socket state changes to the next state.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b next:   next state of the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_RstReceived(int32_t socket)
\details
The event \b RstReceived is created when the socket receives the TCP frame
with the RST flag set. The socket is then closed in client mode, or listening is
reactivated in server mode.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_InvalidState(int32_t socket)
\details
The event \b InvalidState is created when the socket receives the TCP frame in
an invalid state. This notification is a sign of serious problems in the network
library or user application, and it would usually never happen.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendData(int32_t socket, uint16_t length)
\details
The event \b SendData is created when the TCP frame header is constructed and
the frame with data is sent to IP layer for further processing and transmit.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
  - \b len:    length of the TCP frame payload.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendControl(int32_t socket)
\details
The event \b SendControl is created when the TCP frame header is constructed and
the frame with no data is sent to IP layer for further processing and transmit.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_SendReset(void)
\details
The event \b SendReset is created when the TCP frame with RST flag set is constructed
and the frame with no data is sent to IP layer for further processing and transmit.

\b Value in the Event Recorder shows:
  - \b rst
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ParseHeaderOptions(int32_t socket, uint32_t opt_length)
\details
The event \b ParseHeaderOptions is created when the socket receives the TCP frame
with SYN flag set and parses the TCP options, in particular the option maximum segment size.

\b Value in the Event Recorder shows:
  - \b socket:  TCP socket handle for connection.
  - \b opt_len: length of the TCP options.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_OptionMss(int32_t socket, uint32_t mss)
\details
The event \b OptionMss is created when the socket analyzes the options of the received
TCP frame with SYN flag and finds the maximum segment size option.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b mss:    maximum segment size in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_DuplicateAck(int32_t socket, uint32_t dup_acks)
\details
The event \b DuplicateAck is created when the connected socket receives the TCP frame
with ACK flag set that is recognized as a duplicate acknowledgement. This happens when
our transmitted data frame is lost.

\b Value in the Event Recorder shows:
  - \b socket:   TCP socket handle for connection.
  - \b dup_acks: number of duplicate acknowledgements recorded.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_FastRetransmit(int32_t socket, uint32_t data_length)
\details
The event \b FastRetransmit is created when the connected socket receives a third
duplicate acknowledgement. This happens when our transmitted data frame is lost.
The socket then starts the fast retransmission and recovery process and does not
wait for the retransmit timer to expire.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b len:    length of the data to retransmit.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_DataAcked(int32_t socket, uint32_t ack_length)
\details
The event \b DataAcked is created when the connected socket receives the TCP
acknowledgement. When this happens, the acknowledged data stored for possible
retransmission, will be released from the memory.

\b Value in the Event Recorder shows:
  - \b socket:  TCP socket handle for connection.
  - \b ack_len: length of the acknowledged data.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_ResendData(int32_t socket, uint32_t length, uint32_t tout)
\details
The event \b ResendData is created when the connected socket does not receive the
acknowledgement for the data and the retransmit timer expires. This happens when our
transmitted data frame is lost. The socket then resends the data and sets the new
retransmit timeout using the exponential backoff algorithm.

\b Value in the Event Recorder shows:
  - \b socket: TCP socket handle for connection.
  - \b len:    length of the data to resend.
  - \b tout:   new retransmit timeout in ms.
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_MapSocketWrongFlagsSet(void)
\details
The event \b MapSocketWrongFlagsSet is created when the network library receives
the TCP frame with SYN flag set, but other flags like FIN, RST or ACK are also set.
The listening socket can not be assigned, so the received frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_MapSocketSynNotSet(void)
\details
The event \b MapSocketSynNotSet is created when the network library receives
the TCP frame with SYN flag not set. The listening socket can not be assigned,
the established connection also does not exist, so the received frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_MapSocketNoListenSocket(void)
\details
The event \b MapSocketNoListenSocket is created when the network library receives
the TCP frame with SYN flag set, that is recognized as a connection request. The
listening socket at the required port does not exist, so the received frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTCP_UninitSockets(void)
\details
The event \b UninitSockets is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b tcp
*/

/**
@}
*/

/**
\defgroup net_evr_bsd_func NetBSD: BSD Socket
\brief Events generated by the Network - BSD Socket functions
\details
The BSD socket functions generate events that make it easier to troubleshoot errors,
and allow the user to understand the way BSD sockets work.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_InitSockets(uint32_t num_socks)
\details
The event \b InitSockets is created when the BSD sockets are initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b sockets: number of BSD sockets available.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SocketInvalidParameter(void)
\details
The event \b SocketInvalidParameter is created, when an invalid input parameter
is provided for the \e socket function. This happens when the \ref socket function
is executed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SocketCreate(int32_t sock, int32_t type)
\details
The event \b SocketCreate is created when the BSD socket is assigned, that is,
when the function \ref socket is executed.

\b Value in the Event Recorder shows:
  - \b sock: allocated BSD socket descriptor.
  - \b type: type of the socket (stream or datagram).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_NoSocketAvailable(uint32_t num_socks)
\details
The event \b NoSocketAvailable is created, when the function \e socket can not
assign a free BSD socket. This happens when the \ref socket function is executed.

\b Value in the Event Recorder shows:
  - \b used: number of already used sockets.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_BindSocket(int32_t sock)
\details
The event \b BindSocket is created when the BSD socket is bound, that is, when
a local address and port are assigned to an unnamed socket. This happens when the
\ref bind function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for binding.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_BindSocketNotValid(int32_t sock)
\details
The event \b BindSocketNotValid is created when the BSD socket can not bind, because
the provided socket descriptor is invalid. This happens when the \ref bind function
is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for binding.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_BindInvalidParameter(int32_t sock)
\details
The event \b BindInvalidParameter is created when the BSD socket can not bind, because
an invalid input parameter is provided for the function. This happens when the \ref bind
function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for binding.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_BindSocketNotCreated(int32_t sock)
\details
The event \b BindSocketNotCreated is created when the BSD socket can not bind, because
the required socket is not created. This happens when the \ref bind function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for binding.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_BindSocketAlreadyBound(int32_t sock)
\details
The event \b BindSocketAlreadyBound is created when the BSD socket can not bind,
because the required socket is bound already. This happens when the \ref bind function
is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for binding.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_BindSocketConnected(int32_t sock)
\details
The event \b BindSocketConnected is created when the BSD socket can not bind,
because the required socket is already connected. This happens when the \ref bind
function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for binding.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_BindPortInUse(int32_t sock)
\details
The event \b BindPortInUse is created when the BSD socket can not bind,
because the required local port is already used. This happens when the \ref bind
function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for binding.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ViewNetAddress(const void *net_addr)
\details
The event \b ViewNetAddress is created when the network library wants to display
the contents of the network address structure, that is, the IP address and
the port number.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address.
  - \b port: port number.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ListenSocket(int32_t sock, int32_t backlog)
\details
The event \b ListenSocket is created when the BSD socket is set to listening mode.
This happens when the \ref listen function is executed.

\b Value in the Event Recorder shows:
  - \b sock:    BSD socket descriptor for listening.
  - \b backlog: number of connection requests that can be queued.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ListenSocketNotValid(int32_t sock)
\details
The event \b ListenSocketNotValid is created when the BSD socket can not start
listening, because the provided socket descriptor is invalid. This happens when
the \ref listen function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ListenInvalidParameter(int32_t sock)
\details
The event \b ListenInvalidParameter is created when the BSD socket can not start
listening, because an invalid input parameter is provided for the function.
This happens when the \ref listen function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ListenSocketNotCreated(int32_t sock)
\details
The event \b ListenSocketNotCreated is created when the BSD socket can not start
listening, because the required socket is not created. This happens when the
\ref listen function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ListenSocketNotBound(int32_t sock)
\details
The event \b ListenSocketNotBound is created when the BSD socket can not start
listening, because the required socket is not bound. You should bind the socket
first and then start the listening mode. This happens when the \ref listen function
is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ListenSocketNotStreamType(int32_t sock)
\details
The event \b ListenSocketNotStreamType is created when the BSD socket can not start
listening, because the required socket is not a stream socket. This happens when
the \ref listen function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ListenSockAlreadyListens(int32_t sock)
\details
The event \b ListenSockAlreadyListens is created when the BSD socket can not start
listening, because the required socket already listens. This happens when
the \ref listen function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ListenBacklogCreateFailed(int32_t sock)
\details
The event \b ListenBacklogCreateFailed is created when the BSD socket can not start
listening, because the required socket failed to assign native TCP sockets
for the back log. That usually means that the number of TCP sockets in the network
configuration is too low. This happens when the \ref listen function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for listening.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptSocket(int32_t sock)
\details
The event \b AcceptSocket is created when the BSD socket attempts to accept a connection
request from the socket queue in the listening mode. This happens when the \ref accept
function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for accepting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptSocketNotValid(int32_t sock)
\details
The event \b AcceptSocketNotValid is created when the BSD socket can not accept
a connection request, because the provided socket descriptor is invalid. This happens
when the \ref accept function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for accepting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptSocketNotCreated(int32_t sock)
\details
The event \b AcceptSocketNotCreated is created when the BSD socket can not accept
a connection request, because the required socket is not created. This happens when
the \ref accept function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for accepting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptSocketNotListening(int32_t sock)
\details
The event \b AcceptSocketNotListening is created when the BSD socket can not accept
a connection request, because the required socket is not listening. You should set the
socket to listening mode first and then accept a connection. This happens when
the \ref accept function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for accepting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptSocketNotStreamType(int32_t sock)
\details
The event \b AcceptSocketNotStreamType is created when the BSD socket can not accept
a connection request, because the required socket is not a stream socket. This happens
when the \ref accept function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for accepting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptSocketLocked(int32_t sock)
\details
The event \b AcceptSocketLocked is created when the BSD socket can not accept
a connection request, because the required socket is owned by another thread. This
usually means that a blocking accept socket is currently running from another thread.
This happens when the \ref accept function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for accepting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptChildSockConnected(int32_t child_sock)
\details
The event \b AcceptChildSockConnected is created when the BSD socket accepts a connection
request from the socket queue. Then a new child socket is created. This happens when
the \ref accept function is executed.

\b Value in the Event Recorder shows:
  - \b child_sock: BSD socket descriptor created.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptSocketClosed(int32_t sock)
\details
The event \b AcceptSocketClosed is created when the BSD socket can not accept
a connection request, because the connect request was cancelled. This happens when
the \ref accept function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for accepting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_AcceptSocketKilled(int32_t sock)
\details
The event \b AcceptSocketKilled is created when the BSD socket can not accept
a connection request, because the required socket has been locally closed from
another thread. This happens when the \ref accept function is executed  in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for accepting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectSocket(int32_t sock)
\details
The event \b ConnectSocket is created when the BSD socket attempts to connect to
the remote host. This happens when the \ref connect function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectSocketNotValid(int32_t sock)
\details
The event \b ConnectSocketNotValid is created when the BSD socket can not connect to
the remote host, because the provided socket descriptor is invalid. This happens when
the \ref connect function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectInvalidParameter(int32_t sock)
\details
The event \b ConnectInvalidParameter is created when the BSD socket can not connect
to the remote host, because an invalid input parameter is provided for the function.
This happens when the \ref connect function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectSocketLocked(int32_t sock)
\details
The event \b ConnectSocketLocked is created when the BSD socket can not connect
to the remote host, because the required socket is owned by another thread. This
usually means that a blocking connect is currently running from another thread. This
happens when the \ref connect function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectSocketNotCreated(int32_t sock)
\details
The event \b ConnectSocketNotCreated is created when the BSD socket can not connect
to the remote host, because the required socket is not created. This happens when
the \ref connect function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectSocketWrongState(int32_t sock)
\details
The event \b ConnectSocketWrongState is created when the BSD socket can not connect
to the remote host, because the required socket is in server mode or is currently
being closed. This happens when the \ref connect function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectDatagramSuccess(int32_t sock)
\details
The event \b ConnectDatagramSuccess is created when the BSD datagram socket successfully
connects to the remote host. This happens when the \ref connect function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectStreamSuccess(int32_t sock)
\details
The event \b ConnectStreamSuccess is created when the BSD stream socket successfully
connects to the remote host. This happens when the \ref connect function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectStreamTimeout(int32_t sock)
\details
The event \b ConnectStreamTimeout is created when the BSD stream socket can not connect
to the remote host, because it does not respond. This happens when the \ref connect
function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectStreamRefused(int32_t sock)
\details
The event \b ConnectStreamRefused is created when the BSD stream socket can not connect
to the remote host, because it rejects the connection. This happens when the \ref connect
function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_ConnectSocketKilled(int32_t sock)
\details
The event \b ConnectSocketKilled is created when the BSD stream socket can not
connect to the remote host, because the required socket has been locally closed from
another thread. This happens when the \ref connect function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for connecting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendSocket(int32_t sock, uint32_t length)
\details
The event \b SendSocket is created when the BSD socket wants to send the data to
the remote host. This happens when the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
  - \b len:  length of the data to send.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendSocketNotValid(int32_t sock)
\details
The event \b SendSocketNotValid is created when the BSD socket can not send the data
to the remote host, because the provided socket descriptor is invalid. This happens
when the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendInvalidParameter(int32_t sock)
\details
The event \b SendInvalidParameter is created when the BSD socket can not send the data
to the remote host, because an invalid input parameter is provided for the function.
This happens when the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendSocketNotCreated(int32_t sock)
\details
The event \b SendSocketNotCreated is created when the BSD socket can not send the data
to the remote host, because the required socket is not created. This happens when
the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendSocketLocked(int32_t sock)
\details
The event \b SendSocketLocked is created when the BSD socket can not send the data
to the remote host, because the required socket is owned by another thread. This
usually means that a blocking send is currently running from another thread. This
happens when the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendSocketNotConnected(int32_t sock)
\details
The event \b SendSocketNotConnected is created when the BSD socket can not send the data
to the remote host, because the required socket is not connected. This happens when
the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendSocketWrongState(int32_t sock)
\details
The event \b SendSocketWrongState is created when the BSD socket can not send the data
to the remote host, because the required socket is in server mode. This happens when
the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendSocketClosed(int32_t sock)
\details
The event \b SendSocketClosed is created when the BSD socket can not send the data
to the remote host, because the required socket has been closed. This happens when
the \ref send function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendCompleteNonBlocking(int32_t sock, uint32_t num, uint32_t length)
\details
The event \b SendCompleteNonBlocking is created when the BSD socket successfully sends
the data to the remote host. This happens when the \ref send function is executed
in nonblocking mode.

\b Value in the Event Recorder shows:
  - \b sock:     BSD socket descriptor for sending.
  - \b num_sent: number of bytes that was successfully sent.
  - \b len:      required length of the data to send.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendSocketKilled(int32_t sock)
\details
The event \b SendSocketKilled is created when the BSD socket can not send the data
to the remote host, because the required socket has been locally closed from another
thread. This happens when the \ref send function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendStreamError(int32_t sock)
\details
The event \b SendStreamError is created when the BSD stream socket can not send the data
to the remote host, because an error has been detected in the associated TCP socket.
This happens when the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendtoInvalidParameter(int32_t sock)
\details
The event \b SendtoInvalidParameter is created when the BSD datagram socket can not
send the data to the remote host, because an invalid input parameter is provided for
the function, which means that the address parameter is invalid. This happens when
the \ref sendto function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendDestAddressUndefined(int32_t sock)
\details
The event \b SendDestAddressUndefined is created when the BSD datagram socket can not
send the data to the remote host, because the destination address is not defined.
You should connect the datagram socket first and then send the data. This happens when
the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendtoMsgTooLarge(int32_t sock, uint32_t length)
\details
The event \b SendtoMsgTooLarge is created when the BSD datagram socket can not send
the entire message at once because the message length is too large. This only applies
to datagram sockets. 

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
  - \b len:  required length of the data to send.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendtoNoMemory(int32_t sock, uint32_t length)
\details
The event \b SendtoNoMemory is created when the BSD socket can not send the message
to the endpoint node, because there is currently no memory available for the sending
buffer. This happens when the \ref sendto function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
  - \b len:  length of the message to send.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendDatagramError(int32_t sock)
\details
The event \b SendDatagramError is created when the BSD datagram socket can not send
the data to the remote host, because an error has been detected in the associated UDP socket.
A possible reason for this event is that the ARP or NDP module could not resolve the
ethernet MAC address. This happens when the \ref send function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendCompleteBlocking(int32_t sock, uint32_t num)
\details
The event \b SendCompleteBlocking is created when the BSD socket successfully sends
the data to the remote host. This happens when the \ref send function is executed
in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock:     BSD socket descriptor for sending.
  - \b num_sent: number of bytes that was sent.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendTimeoutBlocking(int32_t sock, uint32_t num, uint32_t length)
\details
The event \b SendTimeoutBlocking is created when the BSD socket can not send all
the required data, because the timeout for sending has expired. This happens when
the \ref send function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock:     BSD socket descriptor for sending.
  - \b num_sent: number of bytes that was successfully sent.
  - \b len:      required length of the data to send.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendNoMemory(int32_t sock, uint32_t num, uint32_t length)
\details
The event \b SendNoMemory is created when the BSD socket can not send all the required
data, because there is currently no memory available for the sending buffer. This happens
when the \ref send function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock:     BSD socket descriptor for sending.
  - \b num_sent: number of bytes that was successfully sent.
  - \b len:      required length of the data to send.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgSocket(int32_t sock)
\details
The event \b SendmsgSocket is created when the BSD socket wants to send the message to
the endpoint node. This happens when the \ref sendmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgSocketNotValid(int32_t sock)
\details
The event \b SendmsgSocketNotValid is created when the BSD socket can not send the message
to the endpoint node, because the provided socket descriptor is invalid. This happens
when the \ref sendmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgInvalidParameter(int32_t sock)
\details
The event \b SendmsgInvalidParameter is created when the BSD socket can not send
the message to the endpoint node, because an invalid input parameter is provided
for the function. This happens when the \ref sendmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgSocketNotCreated(int32_t sock)
\details
The event \b SendmsgSocketNotCreated is created when the BSD socket can not send
the message to the endpoint node, because the required socket is not created. This
happens when the \ref sendmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgSocketLocked(int32_t sock)
\details
The event \b SendmsgSocketLocked is created when the BSD socket can not send
the message to the endpoint node, because the required socket is owned by another
thread. This usually means that a blocking send is currently running from another
thread. This happens when the \ref sendmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgDestAddrUndefined(int32_t sock)
\details
The event \b SendmsgDestAddrUndefined is created when the BSD datagram socket can not
send the message to the endpoint node, because the destination address is not defined.
You should connect the datagram socket first and then send the message or provide the
destination address in the message header structure. This happens when the \ref sendmsg
function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgMsgTooLarge(int32_t sock, uint32_t length)
\details
The event \b SendmsgMsgTooLarge is created when the BSD datagram socket can not send
the entire message at once because the message length is too large. This only applies
to datagram sockets. 

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
  - \b len:  required length of the data to send.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgNoMemory(int32_t sock, uint32_t length)
\details
The event \b SendmsgNoMemory is created when the BSD socket can not send the message
to the endpoint node, because there is currently no memory available for the sending
buffer. This happens when the \ref sendmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
  - \b len:  length of the message to send.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgDatagramError(int32_t sock)
\details
The event \b SendmsgDatagramError is created when the BSD datagram socket can not send
the message to the endpoint node, because an error has been detected in the associated
UDP socket. A possible reason for this event is that the ARP or NDP module could not
resolve the ethernet MAC address. This happens when the \ref sendmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgSocketKilled(int32_t sock)
\details
The event \b SendmsgSocketKilled is created when the BSD socket can not send the message
to the endpoint node, because the required socket has been locally closed from another
thread. This happens when the \ref sendmsg function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for sending.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SendmsgComplete(int32_t sock, uint32_t num)
\details
The event \b SendmsgComplete is created when the BSD datagram socket successfully sends
the message to the endpoint node. This happens when the \ref sendmsg function is executed
in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock:     BSD socket descriptor for sending.
  - \b num_sent: number of bytes that was sent.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvSocket(int32_t sock, uint32_t length)
\details
The event \b RecvSocket is created when the BSD socket wants to receive the data from
the remote host. This happens when the \ref recv function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
  - \b len:  length of the data to receive.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvSocketNotValid(int32_t sock)
\details
The event \b RecvSocketNotValid is created when the BSD socket can not receive the
data from the remote host, because the provided socket descriptor is invalid. This
happens when the \ref recv function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvInvalidParameter(int32_t sock)
\details
The event \b RecvInvalidParameter is created when the BSD socket can not receive the
data from the remote host, because an invalid input parameter is provided for the function.
This happens when the \ref recv function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvSocketNotCreated(int32_t sock)
\details
The event \b RecvSocketNotCreated is created when the BSD socket can not receive the
data from the remote host, because the required socket is not created. This happens
when the \ref recv function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvSocketNotConnected(int32_t sock)
\details
The event \b RecvSocketNotConnected is created when the BSD socket can not receive the
data from the remote host, because the required socket is not connected. This happens
when the \ref recv function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvSocketWrongState(int32_t sock)
\details
The event \b RecvSocketWrongState is created when the BSD socket can not receive the
data from the remote host, because the required socket is in server mode or is currently
being closed. This happens when the \ref recv function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvSocketLocked(int32_t sock)
\details
The event \b RecvSocketLocked is created when the BSD socket can not receive the
data from the remote host, because the required socket is owned by another thread.
This usually means that a blocking receive is currently running from another thread.
This happens when the \ref recv function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvSocketClosed(int32_t sock)
\details
The event \b RecvSocketClosed is created when the BSD socket can not receive the
data from the remote host, because the required socket has been closed. This happens
when the \ref recv function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvTimeout(int32_t sock)
\details
The event \b RecvTimeout is created when the BSD socket can not receive the data,
because the timeout for receiving has expired and the data has not been received.
This happens when the \ref recv function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvSocketKilled(int32_t sock)
\details
The event \b RecvSocketKilled is created when the BSD socket can not receive the data,
because the required socket has been locally closed from another thread. This happens
when the \ref recv function is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvQueueFree(int32_t sock, uint32_t length)
\details
The event \b RecvQueueFree is created when the BSD socket releases the data memory
from the queue after copying the received data into the application's buffer.
This happens when the \ref recv or \ref recvfrom functions are executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor.
  - \b len:  length of the relese data buffers.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvComplete(int32_t sock, uint32_t length)
\details
The event \b RecvComplete is created when the BSD socket successfully receives
the data from the remote host. This happens when the \ref recv or \ref recvfrom
functions are executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
  - \b len:  number of bytes that was received.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgSocket(int32_t sock)
\details
The event \b RecvmsgSocket is created when the BSD datagram socket wants to receive
the message from the endpoint node. This happens when the \ref recvmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgSocketNotValid(int32_t sock)
\details
The event \b RecvmsgSocketNotValid is created when the BSD socket can not receive
the message from the endpoint node, because the provided socket descriptor is invalid.
This happens when the \ref recvmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgInvalidParameter(int32_t sock)
\details
The event \b RecvmsgInvalidParameter is created when the BSD socket can not receive
the message from the endpoint node, because an invalid input parameter is provided
for the function. This happens when the \ref recvmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgSocketNotCreated(int32_t sock)
\details
The event \b RecvmsgSocketNotCreated is created when the BSD socket can not receive
the message from the endpoint node, because the required socket is not created. This
happens when the \ref recvmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgSocketLocked(int32_t sock)
\details
The event \b RecvmsgSocketLocked is created when the BSD socket can not receive the
message from the endpoint node, because the required socket is owned by another thread.
This usually means that a blocking receive is currently running from another thread.
This happens when the \ref recvmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgSocketWrongState(int32_t sock)
\details
The event \b RecvmsgSocketWrongState is created when the BSD socket can not receive
the message from the endpoint node, because the required socket is in server mode or
is currently being closed. This happens when the \ref recvmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgTimeout(int32_t sock)
\details
The event \b RecvmsgTimeout is created when the BSD datagram socket can not receive
the message from the endpoint node, because the timeout for receiving has expired and
the message has not been received. This happens when the \ref recvmsg function is executed
in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgSocketKilled(int32_t sock)
\details
The event \b RecvmsgSocketKilled is created when the BSD datagram socket can not receive
the message from the endpoint node, because the required socket has been locally closed
from another thread. This happens when the \ref recvmsg function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_RecvmsgComplete(int32_t sock, uint32_t length)
\details
The event \b RecvmsgComplete is created when the BSD datagram socket successfully
receives the message from the endpoint node. This happens when the \ref recvmsg function
is executed in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for receiving.
  - \b len:  number of bytes that was received.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_Closesocket(int32_t sock)
\details
The event \b Closesocket is created, when the function \ref closesocket closes the
BSD socket.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_CloseSocketNotValid(int32_t sock)
\details
The event \b CloseSocketNotValid is created, when the function \ref closesocket can not
close the socket, because the provided socket descriptor is invalid.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_CloseSocketNotCreated(int32_t sock)
\details
The event \b CloseSocketNotCreated is created, when the function \ref closesocket can not
close the socket, because the required socket is not created. This happens when
the \ref closesocket function is executed.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_Select(int32_t nfds)
\details
The event \b Select is created when network library wants to check which of the
specified sockets is ready for reading, ready for writing, or has an error condition
pending. This happens when the \ref select function is executed.

\b Value in the Event Recorder shows:
  - \b nfds: range of sockets to be tested.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SelectInvalidParameter(int32_t nfds)
\details
The event \b SelectInvalidParameter is created when network library can not check the
specified sockets, because an invalid input parameter is provided for the function.
This happens when the \ref select function is executed.

\b Value in the Event Recorder shows:
  - \b nfds: range of sockets to be tested.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SelectSuspendFailed(int32_t nfds)
\details
The event \b SelectSuspendFailed is created when network library can not check the
specified sockets, because the network library can not subscribe to resume events.
A possible reason for this event is that all specified sockets are owned and locked
by other threads. This happens when the \ref select function is executed.

\b Value in the Event Recorder shows:
  - \b nfds: range of sockets to be tested.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SelectComplete(int32_t n_ready)
\details
The event \b SelectComplete is created when network library checked the specified
sockets, which of the specified sockets is ready for reading, ready for writing, or
has an error condition pending. This happens when the \ref select function is executed.

\b Value in the Event Recorder shows:
  - \b n_ready: number of currently ready sockets.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SelectCompleteBlocking(int32_t n_ready)
\details
The event \b SelectCompleteBlocking is created when network library checked the specified
sockets, which of the specified sockets is ready for reading, ready for writing, or
has an error condition pending. Initially, no socket is ready, so the function must
wait for the sockets to be ready. This happens when the \ref select function is executed.

\b Value in the Event Recorder shows:
  - \b n_ready: number of ready sockets after waiting.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_Getpeername(int32_t sock)
\details
The event \b Getpeername is created, when the function \ref getpeername retrieves
the endpoint node address, that is the IP address and port number of the remote peer.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the peer address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetpeerSocketNotValid(int32_t sock)
\details
The event \b GetpeerSocketNotValid is created, when the function \ref getpeername
can not retrieve the endpoint node address because the provided socket descriptor
is invalid.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the peer address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetpeerSocketNotCreated(int32_t sock)
\details
The event \b GetpeerSocketNotCreated is created, when the function \ref getpeername
can not retrieve the endpoint node address because the required socket is not created.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the peer address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetpeerInvalidParameter(int32_t sock)
\details
The event \b GetpeerInvalidParameter is created, when the function \ref getpeername
can not retrieve the endpoint node address because an invalid input parameter is
provided for the function.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the peer address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetpeerSocketNotConnected(int32_t sock)
\details
The event \b GetpeerSocketNotConnected is created, when the function \ref getpeername
can not retrieve the endpoint node address because the required socket is not
connected, that is, the endpoint address is not known.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the peer address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_Getsockname(int32_t sock)
\details
The event \b Getsockname is created, when the function \ref getsockname retrieves
the local address, that is the IP address and port number for the BSD socket.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the local address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetsockSocketNotValid(int32_t sock)
\details
The event \b GetsockSocketNotValid is created, when the function \ref getsockname
can not retrieve the local address because the provided socket descriptor is invalid.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the local address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetsockSocketNotCreated(int32_t sock)
\details
The event \b GetsockSocketNotCreated is created, when the function \ref getsockname
can not retrieve the local address because the required socket is not created.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the local address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetsockInvalidParameter(int32_t sock)
\details
The event \b GetsockInvalidParameter is created, when the function \ref getsockname
can not retrieve the local address because an invalid input parameter is provided
for the function.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the local address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetsockSocketNotBound(int32_t sock)
\details
The event \b GetsockSocketNotBound is created, when the function \ref getsockname
can not retrieve the local address because the required BSD socket is not bound.
You should bind the socket first and then retrieve the local address.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the local address.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_Setsockopt(int32_t sock, int32_t level, int32_t optname)
\details
The event \b Setsockopt is created, when the function \ref setsockopt sets the operating
option for the BSD socket. Options are set at different socket levels like the socket level
or the protocol level.

\b Value in the Event Recorder shows:
  - \b sock:  BSD socket descriptor for setting the option.
  - \b level: level at which the option is defined.
  - \b name:  name of the option to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptSocketNotValid(int32_t sock)
\details
The event \b SetoptSocketNotValid is created, when the function \ref setsockopt can not
set the option for the BSD socket because the provided socket descriptor is invalid.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptInvalidParameter(int32_t sock)
\details
The event \b SetoptInvalidParameter is created, when the function \ref setsockopt can not
set the option because an invalid input parameter is provided for the function.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptSocketNotCreated(int32_t sock)
\details
The event \b SetoptSocketNotCreated is created, when the function \ref setsockopt can not
set the option because the required socket is not created.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptOptionNotSupported(int32_t sock, int32_t level, int32_t optname)
\details
The event \b SetoptOptionNotSupported is created, when the function \ref setsockopt
can not set the option because the required option is not supported for this socket.

\b Value in the Event Recorder shows:
  - \b sock:  BSD socket descriptor for setting the option.
  - \b level: level at which the option is defined.
  - \b name:  name of the option to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptKeepAlive(int32_t sock, uint32_t enable)
\details
The event \b SetoptKeepAlive is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option enables or disables the keepalive
mode for the stream socket.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for setting the option.
  - \b enable: enable or disable the option (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptRecvTimeout(int32_t sock, uint32_t timeout)
\details
The event \b SetoptRecvTimeout is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option assigns the receiving timeout
value to the socket, which is used when the socket is in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
  - \b tout: receive timeout in milliseconds.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptSendTimeout(int32_t sock, uint32_t timeout)
\details
The event \b SetoptSendTimeout is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option assigns the sending timeout
value to the socket, which is used when the socket is in blocking mode.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
  - \b tout: send timeout in milliseconds.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptBindToDevice(int32_t sock, uint16_t if_id)
\details
The event \b SetoptBindToDevice is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option binds the network interface
to the datagram socket. The socket can then only send and receive data on the bound
interface. Data from other interfaces is discarded.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
  - \b netif: network interface identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptIp4Tos(int32_t sock, uint8_t ip4_tos)
\details
The event \b SetoptIp4Tos is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option assigns the IPv4 Type of Service
value to the socket.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
  - \b tos:  value for the TOS option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptIp4Ttl(int32_t sock, uint8_t ip4_ttl)
\details
The event \b SetoptIp4Ttl is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option assigns the IPv4 Time to Live
value to the socket.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
  - \b ttl:  value for the TTL option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptIp4RecvDstAddr(int32_t sock, uint32_t enable)
\details
The event \b SetoptIp4RecvDstAddr is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option enables or disables receiving of
the destination IPv4 address for the datagram socket.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for setting the option.
  - \b enable: enable or disable the option (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptIp6Tclass(int32_t sock, uint8_t ip6_tclass)
\details
The event \b SetoptIp6Tclass is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option assigns the IPv6 Traffic Class
value to the socket.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for setting the option.
  - \b tclass: value for the TClass option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptIp6HopLimit(int32_t sock, uint8_t ip6_hoplimit)
\details
The event \b SetoptIp6HopLimit is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option assigns the IPv6 Hop Limit
value to the socket.

\b Value in the Event Recorder shows:
  - \b sock:      BSD socket descriptor for setting the option.
  - \b hop_limit: value for the HopLimit option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptIp6RecvDstAddr(int32_t sock, uint32_t enable)
\details
The event \b SetoptIp6RecvDstAddr is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option enables or disables receiving of
the destination IPv6 address for the datagram socket.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for setting the option.
  - \b enable: enable or disable the option (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptIp6Only(int32_t sock, uint32_t enable)
\details
The event \b SetoptIp6Only is created, when the function \ref setsockopt sets
the operating option for the BSD socket. This option enables or disables the restriction
of the IPv6 socket to IPv6 communications only. If this option is disabled, a mixture of
IPv6 and IPv4 communications is used. Dual-stack IPv6 socket has this option enabled
by default.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for setting the option.
  - \b enable: enable or disable the option (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_SetoptSocketBound(int32_t sock)
\details
The event \b SetoptSocketBound is created, when the function \ref setsockopt fails to
set the \ref IPV6_V6ONLY option for the BSD socket, because the socket is already
bound. This option must be set before the socket is bound to the address.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for setting the option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_Getsockopt(int32_t sock, int32_t level, int32_t optname)
\details
The event \b Getsockopt is created, when the function \ref getsockopt retrieves the operating
option for the BSD socket. Options are set at different socket levels like the socket level
or the protocol level.

\b Value in the Event Recorder shows:
  - \b sock:  BSD socket descriptor for retrieving the option.
  - \b level: level at which the option is defined.
  - \b name:  name of the option to get.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetoptSocketNotValid(int32_t sock)
\details
The event \b GetoptSocketNotValid is created, when the function \ref getsockopt can not
retrieve the option for the BSD socket because the provided socket descriptor is invalid.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetoptInvalidParameter(int32_t sock)
\details
The event \b GetoptInvalidParameter is created, when the function \ref getsockopt can not
retrieve the option because an invalid input parameter is provided for the function.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetoptSocketNotCreated(int32_t sock)
\details
The event \b GetoptSocketNotCreated is created, when the function \ref getsockopt can not
retrieve the option because the required socket is not created.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for retrieving the option.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetoptOptionNotSupported(int32_t sock, int32_t level, int32_t optname)
\details
The event \b GetoptOptionNotSupported is created, when the function \ref getsockopt
can not retrieve the option because the required option is not supported for this socket.

\b Value in the Event Recorder shows:
  - \b sock:  BSD socket descriptor for retrieving the option.
  - \b level: level at which the option is defined.
  - \b name:  name of the option to get.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_Ioctlsocket(int32_t sock)
\details
The event \b Ioctlsocket is created, when the function \ref ioctlsocket manipulates
the I/O mode of the socket. It gets or sets parameters that control how the socket performs
input and output.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for manipulating I/O mode.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_IoctlSocketNotValid(int32_t sock)
\details
The event \b IoctlSocketNotValid is created, when the function \ref ioctlsocket can not
manipulate the I/O mode of the socket because the provided socket descriptor is invalid.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for manipulating I/O mode.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_IoctlInvalidParameter(int32_t sock)
\details
The event \b IoctlInvalidParameter is created, when the function \ref ioctlsocket can not
manipulate the I/O mode of the socket because an invalid input parameter is provided
for the function.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for manipulating I/O mode.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_IoctlSocketNotCreated(int32_t sock)
\details
The event \b IoctlSocketNotCreated is created, when the function \ref ioctlsocket can not
manipulate the I/O mode of the socket because the required socket is not created.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for manipulating I/O mode.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_IoctlSocketNotStreamType(int32_t sock)
\details
The event \b IoctlSocketNotStreamType is created, when the function \ref ioctlsocket can not
manipulate the I/O mode of the socket because the required socket is not stream socket.

This event is generated when an error occurs while using the \e legacy socket control for
stream socket.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor for manipulating I/O mode.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_IoctlNonBlocking(int32_t sock, uint32_t enable)
\details
The event \b IoctlNonBlocking is created, when the function \ref ioctlsocket manipulates
the I/O mode of the socket. This option enables or disables the non-blocking I/O mode of
the socket.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for manipulating I/O mode.
  - \b enable: enable or disable the option (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_IoctlDelayAck(int32_t sock, uint32_t enable)
\details
The event \b IoctlDelayAck is created, when the function \ref ioctlsocket manipulates
the I/O mode of the socket. This is the \e legacy way for enabling or disabling the delayed
acknowledge mode for the stream socket.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for manipulating I/O mode.
  - \b enable: enable or disable the option (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_IoctlKeepAlive(int32_t sock, uint32_t enable)
\details
The event \b IoctlKeepAlive is created, when the function \ref ioctlsocket manipulates
the I/O mode of the socket. This is the \e legacy way for enabling or disabling the
keepalive mode for the stream socket.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for manipulating I/O mode.
  - \b enable: enable or disable the option (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_IoctlFlowControl(int32_t sock, uint32_t enable)
\details
The event \b IoctlFlowControl is created, when the function \ref ioctlsocket manipulates
the I/O mode of the socket. This is the \e legacy way for enabling or disabling the
flow-control mode for the stream socket.

\b Value in the Event Recorder shows:
  - \b sock:   BSD socket descriptor for manipulating I/O mode.
  - \b enable: enable or disable the option (1= enable, 0= disable).
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_CbfuncTcpEvent(int32_t sock, int32_t tcp_event)
\details
The event \b CbfuncTcpEvent is created, when the internal callback function of the
associated TCP socket is executed. This happens when the connection is requested,
established, closed or aborted.

\b Value in the Event Recorder shows:
  - \b sock:  BSD socket descriptor that accepts the callback event.
  - \b event: TCP callback event that happened.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_CbfuncTcpQueueAdd(int32_t sock, uint32_t length)
\details
The event \b CbfuncTcpQueueAdd is created, when the internal callback function of the
associated TCP socket is executed. This happens when the data is received. The data
is added to the receive queue of the stream socket.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor that receives data.
  - \b len:  length of the data received.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_CbfuncTcpNoMemory(int32_t sock)
\details
The event \b CbfuncTcpNoMemory is created, when the internal callback function of the
associated TCP socket is executed, but the received data can not be added to the
receive queue of the stream socket, because no memory is available. The stream socket
does not acknowledge the data, so the remote peer retransmits it again.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor that receives data.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_CbfuncUdpQueueAdd(int32_t sock, uint32_t length)
\details
The event \b CbfuncUdpQueueAdd is created, when the internal callback function of the
associated UDP socket is executed. This happens when the data is received. The data
is added to the receive queue of the datagram socket.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor that receives data.
  - \b len:  length of the data received.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_CbfuncUdpDumpData(int32_t sock, uint32_t length)
\details
The event \b CbfuncUdpDumpData is created, when the internal callback function of the
associated UDP socket is executed, but the received data can not be added to the
receive queue of the datagram socket, because no memory is available. The datagram
socket then dumps the received data.

\b Value in the Event Recorder shows:
  - \b sock: BSD socket descriptor that receives data.
  - \b len:  length of the data received.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_UninitSockets(void)
\details
The event \b UninitSockets is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b bsd
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostInit(void)
\details
The event \b GetHostInit is created when the BSD host resolver is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b dns
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostByName(const char *hostname, uint32_t length)
\details
The event \b GetHostByName is created when the BSD host name resolver starts, that is,
when the function \ref gethostbyname is executed.

\b Value in the Event Recorder shows:
  - \b name: name of the host to resolve.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostNameResolved(void)
\details
The event \b GetHostNameResolved is created when the BSD host name resolver successfully
resolves the required host name.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostNameNotExisting(void)
\details
The event \b GetHostNameNotExisting is created when the BSD host name resolver can not
resolve the required host name, because it can not be found in the DNS host database.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostResolverTimeout(void)
\details
The event \b GetHostResolverTimeout is created when the BSD host name resolver can not
resolve the required host name, because waiting time interval for the response has expired.
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostResolverError(void)
\details
The event \b GetHostResolverError is created when the BSD host name resolver can not
resolve the required host name, because an internal protocol error has occurred.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostResolverBusy(void)
\details
The event \b GetHostResolverBusy is created when the BSD host name resolver can not
resolve the required host name, because host name resolver is already busy resolving
another host name.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostInvalidParameter(void)
\details
The event \b GetHostInvalidParameter is created, when an invalid input parameter
is provided for the \e gethostbyname function. This happens when the \ref gethostbyname
function is executed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetBSD_GetHostUninit(void)
\details
The event \b GetHostUninit is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b dns
*/

/**
@}
*/

/**
\defgroup net_evr_https_func NetHTTPs: HTTP Server
\brief Events generated by the Network - HTTP Server functions
\details
The HTTP server functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the HTTP server works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_InitServer(uint32_t num_sessions, uint16_t port)
\details
The event \b InitServer is created when the HTTP server is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b sessions: number of HTTP sessions available.
  - \b port:     port number to be used.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_ViewRootFolder(const char *root_folder, uint32_t length)
\details
The event \b ViewRootFolder is created when the network library wants to display
the path to the root folder that contains the resources of the HTTP server. This event
is generated only if the root folder is enabled in the HTTP server configuration.

\b Value in the Event Recorder shows:
  - \b root: path of the root directory.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_GetSocketFailed(uint8_t session)
\details
The event \b GetSocketFailed is created when the HTTP server is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the TCP socket. To resolve this error, you must increase the number of available
TCP sockets in the TCP socket configuration.

\b Value in the Event Recorder shows:
  - \b session: session that failed to allocate the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_SetRootPath(const char *path, uint32_t length)
\details
The event \b SetRootPath is created when the HTTP server changes the path to web
resources. This happens when the \ref netHTTPs_SetRootPath function is executed.

\b Value in the Event Recorder shows:
  - \b path: path of the root directory to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_SetUsername(const char *username, uint32_t length)
\details
The event \b SetUsername is created when the HTTP server changes the username for
the administrator account. This happens when the \ref netHTTPs_SetUsername function
is executed.

\b Value in the Event Recorder shows:
  - \b username: username to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_SetPassword(const char *password, uint32_t length)
\details
The event \b SetPassword is created when the HTTP server changes the password for
the administrator account. This happens when the \ref netHTTPs_SetPassword function
is executed.

\b Value in the Event Recorder shows:
  - \b password: password to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_StartService(uint16_t port)
\details
The event \b StartService is created when the network library starts the HTTP server
service. This happens automatically if the auto-start services are enabled, or when
the \ref netHTTPs_Start function is executed.

\b Value in the Event Recorder shows:
  - \b port: port number to be used.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_StopService(void)
\details
The event \b StopService is created when the network library stops the HTTP server
service. This happens when the \ref netHTTPs_Stop function is executed.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FileNotFound(uint8_t session)
\details
The event \b FileNotFound is created when the HTTP server can not deliver the requested
resource, because the file can not be found. This happens when the web page that
the web browser has requested, does not exist on the server. The server then sends
the error 404 to the browser.

\b Value in the Event Recorder shows:
  - \b session: HTTP session that failed.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FileAccessForbidden(uint8_t session)
\details
The event \b FileAccessForbidden is created when the HTTP server can not deliver
the requested resource, because the access to the file for this user is not allowed.
This happens when the web resource requested by the web browser, needs a permission
to access. The server then sends the error 403 to the browser.

\b Value in the Event Recorder shows:
  - \b session: HTTP session that failed.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FileCached(uint8_t session)
\details
The event \b FileCached is created when the HTTP server determines, that the
requested resource is already cached in the browser. The HTTP server then instructs
the web browser to use the local cached resource by sending an error 304 to the
browser.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_CloseSession(uint8_t session)
\details
The event \b CloseSession is created when the HTTP server closes a session that has
finished serving the requested resource.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session to close.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_SendFile(uint8_t session)
\details
The event \b SendFile is created when the HTTP server starts to send the requested
resource file to the web browser.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_CgiSendFile(uint8_t session)
\details
The event \b CgiSendFile is created when the HTTP script interpreter starts to
to send the requested dynamic web page to the web browser.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_CgiIncludeFile(uint8_t session)
\details
The event \b CgiIncludeFile is created when the HTTP server script interpreter includes
an external resource file in the requested dynamic web page. This happens when the
command \e i is used in the script.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_CgiStopEngine(uint8_t session)
\details
The event \b CgiStopEngine is created when the HTTP server stops the script interpreter
because it has finished processing the requested script.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_CgiScriptError(uint8_t session)
\details
The event \b CgiScriptError is created when the HTTP server stops the script interpreter
because it has detected an error in the requested script. This usually means that
an invalid CGI command is found in the script.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_UnauthorizedAccess(uint8_t session)
\details
The event \b UnauthorizedAccess is created when the HTTP server can not deliver
the requested resource, because the client did not authenticate or the provided
credentials were invalid. The server then sends the error 401 to the browser.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_MethodNotImplemented(uint8_t session)
\details
The event \b MethodNotImplemented is created when the HTTP server can not deliver
the requested resource, because the required HTTP request method on the server is
not supported. The server then sends the error 501 to the browser.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_UserAccessDenied(const void *net_addr)
\details
The event \b UserAccessDenied is created when the HTTP server rejects the pending
connection request for the client, because the user application has denied connection
for this client. This happens when the \ref netHTTPs_AcceptClient function returns
\e false.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address of the client.
  - \b port: port number of the client.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_SetCookie(const char *cookie, uint32_t length)
\details
The event \b SetCookie is created when the HTTP server sets a cookie to send to
the client. This happens when the \ref netCGI_SetCookie function is executed.

\b Value in the Event Recorder shows:
  - \b cookie to send.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_SessionOpen(uint8_t session)
\details
The event \b SessionOpen is created when the HTTP server accepts a request to connect
from a web browser and opens a server session to handle this connection. This happens
when a web browser attempts to open a web page on a server.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session for opening.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_SocketAborted(uint8_t session)
\details
The event \b SocketAborted is created when the HTTP server connection is unexpectedly
terminated from the web browser. The corresponding server session is then closed.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_SocketClosed(uint8_t session)
\details
The event \b SocketClosed is created when the HTTP server connection is unexpectedly
closed from the web browser. The corresponding server session is then closed.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_ReceiveFrame(uint8_t session, uint32_t length)
\details
The event \b ReceiveFrame is created when the HTTP server receives the frame.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
  - \b len:     length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FrameTooShort(uint8_t session, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the HTTP server receives the frame that
is too short. The frame is then discarded.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
  - \b len:     length of the received frame in bytes.
  - \b min:     minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_RequestMethod(uint8_t session, uint8_t method)
\details
The event \b RequestMethod is created when the HTTP server receives the HTTP request
and identifies the request method.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
  - \b method:  request method (GET, POST, HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE).
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_CgiStartEngine(uint8_t session)
\details
The event \b CgiStartEngine is created when the HTTP server starts the script interpreter
to process the requested script.

\b Value in the Event Recorder shows:
  - \b session: HTTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_RequestedFile(const char *fname, uint32_t length)
\details
The event \b RequestedFile is created when the HTTP server attempts to open the requested
resource file on the server.

\b Value in the Event Recorder shows:
  - \b name: name of the file to open.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FileOpenDrive(uint32_t drive)
\details
The event \b FileOpenDrive is created when the HTTP server determines the drive on
which the requested resource file was found on the server.

\b Value in the Event Recorder shows:
  - \b ROM image, or \b External drive.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_ViewFileStatus(uint32_t size, uint32_t lm_time)
\details
The event \b ViewFileStatus is created when the HTTP server obtains the size and
time of the last change in the resource file that is requested. This happens when
the resource file is stored on external drive. The server then uses this information
to check the caching of files in the web browser.

\b Value in the Event Recorder shows:
  - \b size:    size of the file in bytes.
  - \b lm_time: last modified time of the file in UTC format.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_ViewRedirectionUrl(const char *url, uint32_t length)
\details
The event \b ViewRedirectionUrl is created when the HTTP server can not find the requested
resource on the server and the user application provides the redirected location with the
\ref netCGI_Redirect function. The server then sends the error 301 to the browser.

\b Value in the Event Recorder shows:
  - \b url: location of the redirected resource.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_ViewUserCredentials(const char *credentials, uint32_t length)
\details
The event \b ViewUserCredentials is created when the HTTP server  wants to display
the username and password for authentication received from the web browser.

\b Value in the Event Recorder shows:
  - \b user: user credentials in format \e username:password.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_ViewAcceptLanguage(const char *accept_lang, uint32_t length)
\details
The event \b ViewAcceptLanguage is created when the HTTP server wants to display
the http accept-language header received from a web browser.

\b Value in the Event Recorder shows:
  - \b lang: accept language information.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_ViewCookie(const char *cookie, uint32_t length)
\details
The event \b ViewCookie is created when the HTTP server wants to display the http
cookie header received from a web browser. The cookie header contains one or more
cookies separated by a semicolon.

\b Value in the Event Recorder shows:
  - \b cookie header information.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_ViewXmlType(const char *xml_type, uint32_t length)
\details
The event \b ViewXmlType is created when the HTTP server wants to display the content
type of the XML content received in the \e POST request.

\b Value in the Event Recorder shows:
  - \b xml_type: XML content type.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_PostXmlEncoded(uint32_t length)
\details
The event \b PostXmlEncoded is created when the HTTP server begins to receive large
XML data in a \e POST request, that is delivered in multiple packets. XML data is
not cached, but delivered to the user application synchronously in the callback function
\ref netCGI_ProcessData.

\b Value in the Event Recorder shows:
  - \b len: content-length of the XML data.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_PostCompleteMultipacket(uint32_t length)
\details
The event \b PostCompleteMultipacket is created when the HTTP server stops receiving
XML data in a \e POST request, that is, when it receives the last packet.

\b Value in the Event Recorder shows:
  - \b len: length of the received XML data.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_PostFormUrlEncoded(uint32_t length)
\details
The event \b PostFormUrlEncoded is created when the HTTP server starts receiving
the \e www-form-urlencoded data in a \e POST request, that is delivered in multiple
packets. The data is cached and delivered to the user application when the last
packet is received in the callback function \ref netCGI_ProcessData.

\b Value in the Event Recorder shows:
  - \b len: content-length of the data.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_PostDataTruncated(uint32_t new_length)
\details
The event \b PostDataTruncated is created when the HTTP server can not allocate
memory for the \e www-form-urlencoded data cache, because the memory is not available.
The server then shortens \e POST data and ignores the excess data.

\b Value in the Event Recorder shows:
  - \b new_len: truncated length of the data.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FileUploadRequested(const char *fname, uint32_t length)
\details
The event \b FileUploadRequested is created when the HTTP server receives a multipart
POST request and recognizes the file upload request. The file content is then
received in several packets and delivered to the user application in the callback
function \ref netCGI_ProcessData.

\b Value in the Event Recorder shows:
  - \b file: name of the file for upload.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FileUploadDataReceived(uint32_t length)
\details
The event \b FileUploadDataReceived is created when the HTTP server receives a
part of the file content. The data is then delivered to the user application in the
callback function \ref netCGI_ProcessData.

\b Value in the Event Recorder shows:
  - \b len: length of the file fragment.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FileUploadRemaining(uint32_t length)
\details
The event \b FileUploadRemaining is created when the HTTP wants to display the
remaining data length that needs to be transferred to complete the file upload process.

\b Value in the Event Recorder shows:
  - \b len: remaining length of data.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_FileUploadComplete(void)
\details
The event \b FileUploadComplete is created when the HTTP wants to notify that the
file transfer is complete.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_TlsGetContextFailed(uint8_t session)
\details
The event \b TlsGetContextFailed is created when the HTTP server is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the TLS context.

\b Value in the Event Recorder shows:
  - \b session: session that failed to allocate the TLS context.
*/

/**
\fn __STATIC_INLINE void EvrNetHTTPs_UninitServer(void)
\details
The event \b UninitServer is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b http
*/

/**
@}
*/

/**
\defgroup net_evr_ftps_func NetFTPs: FTP Server
\brief Events generated by the Network - FTP Server functions
\details
The FTP server functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the FTP server works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_InitServer(uint32_t num_sessions, uint16_t port, uint16_t idle_tout)
\details
The event \b InitServer is created when the FTP server is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b sessions: number of FTP sessions available.
  - \b port:     port number to be used.
  - \b tout:     duration of inactivity to close the session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ShowRootFolder(const char *root_folder, uint32_t length)
\details
The event \b ShowRootFolder is created when the network library wants to display
the path to the root folder that contains the FTP server files. This event is generated
only if the root folder is enabled in the FTP server configuration.

\b Value in the Event Recorder shows:
  - \b root: path of the root directory.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_GetSocketFailed(uint8_t session)
\details
The event \b GetSocketFailed is created when the FTP server is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the TCP socket. To resolve this error, you must increase the number of available
TCP sockets in the TCP socket configuration.

\b Value in the Event Recorder shows:
  - \b session: session that failed to allocate the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_SetRootPath(const char *path, uint32_t length)
\details
The event \b SetRootPath is created when the FTP server changes the path to server
files. This happens when the \ref netFTPs_SetRootPath function is executed.

\b Value in the Event Recorder shows:
  - \b path: path of the root directory to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_SetUsername(const char *username, uint32_t length)
\details
The event \b SetUsername is created when the FTP server changes the username for
the administrator account. This happens when the \ref netFTPs_SetUsername function
is executed.

\b Value in the Event Recorder shows:
  - \b username: username to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_SetPassword(const char *password, uint32_t length)
\details
The event \b SetPassword is created when the FTP server changes the password for
the administrator account. This happens when the \ref netFTPs_SetPassword function
is executed.

\b Value in the Event Recorder shows:
  - \b password: password to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_UserAccessDenied(const void *net_addr)
\details
The event \b UserAccessDenied is created when the FTP server rejects the pending
connection request for the client, because the user application has denied connection
for this client. This happens when the \ref netFTPs_AcceptClient function returns
\e false.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address of the client.
  - \b port: port number of the client.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_SessionOpen(uint8_t session)
\details
The event \b SessionOpen is created when the FTP server accepts a request to connect
from the client and opens a server session to handle this connection. This happens
when the FTP client attempts to connect to the server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session for opening.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_SocketAborted(uint8_t session)
\details
The event \b SocketAborted is created when the FTP server connection is unexpectedly
terminated from the client. The corresponding server session is then closed.

\b Value in the Event Recorder shows:
  - \b session: FTP server session for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_SocketClosed(uint8_t session)
\details
The event \b SocketClosed is created when the FTP server connection is unexpectedly
closed from the client. The corresponding server session is then closed.

\b Value in the Event Recorder shows:
  - \b session: FTP server session for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_UnackedDataError(uint8_t session)
\details
The event \b UnackedDataError is created when the FTP server receives a new command
from the client, but the client has not yet acknowledged the response to the previous
command. The new FTP command is then discarded.

\b Value in the Event Recorder shows:
  - \b session: FTP server session in which this error occurred.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ReceiveFrame(uint8_t session, uint32_t length)
\details
The event \b ReceiveFrame is created when the FTP server receives the frame.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
  - \b len:     length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_FrameTooShort(uint8_t session, uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the FTP server receives the frame that
is too short. The frame is then discarded.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
  - \b len:     length of the received frame in bytes.
  - \b min:     minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ShowCommand(const uint8_t *cmd_client, uint32_t length)
\details
The event \b ShowCommand is created when the FTP server wants to display a
\ref ftp_supported_cmds "FTP command" it receives from the client.

\b Value in the Event Recorder shows:
  - \b command: user command to execute.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_VerifyUsername(uint8_t session)
\details
The event \b VerifyUsername is created when the FTP server executes the
\ref ftp_supported_cmds "USER" command to authenticate the user.

\b Value in the Event Recorder shows:
  - \b session: FTP server session for authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_VerifyPassword(uint8_t session)
\details
The event \b VerifyPassword is created when the FTP server executes the
\ref ftp_supported_cmds "PASS" command to authenticate the user.

\b Value in the Event Recorder shows:
  - \b session: FTP server session for authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_AuthenticationFailed(uint8_t session)
\details
The event \b AuthenticationFailed is created when the FTP server executes the
\ref ftp_supported_cmds "PASS" command to authenticate the user.

\b Value in the Event Recorder shows:
  - \b session: FTP server session for authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_UserLoginSuccess(uint8_t session)
\details
The event \b UserLoginSuccess is created when the FTP server successfully authenticates
the user.

\b Value in the Event Recorder shows:
  - \b session: FTP server session for authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_NotAuthenticated(uint8_t session)
\details
The event \b NotAuthenticated is created when the FTP server fails to authenticate
the user. Each command of an unverified user is ignored.

\b Value in the Event Recorder shows:
  - \b session: FTP server session for authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ShowSystemType(uint8_t session)
\details
The event \b ShowSystemType is created when the FTP server executes the
\ref ftp_supported_cmds "SYST" command to identify the operating system at the server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
  - \b sys:     Windows_NT.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_NoOperation(uint8_t session)
\details
The event \b NoOperation is created when the FTP server executes the
\ref ftp_supported_cmds "NOOP" command - no operation.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_CurrentDirectory(const char *path, uint32_t length)
\details
The event \b CurrentDirectory is created when the FTP server wants to display the current
working directory.

\b Value in the Event Recorder shows:
  - \b path: path of the current working directory.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ChangeDirectory(const char *path, uint32_t length)
\details
The event \b ChangeDirectory is created when the FTP server wants to change the
working directory to a specified directory.

\b Value in the Event Recorder shows:
  - \b path: path of the new working directory.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ChangeDirectoryFailed(uint8_t session)
\details
The event \b ChangeDirectoryFailed is created when the FTP server wants to change the
working directory to a specified directory, but the specified directory does not
exist. The same event occurs if the file system on the storage device does not support
directories, such as the Embedded File System in the MDK Middleware.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ChangeDirectoryLevelUp(uint8_t session)
\details
The event \b ChangeDirectoryLevelUp is created when the FTP server wants to change the
working directory to the parent directory.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_MakeDirectory(const char *path, uint32_t length)
\details
The event \b MakeDirectory is created when the FTP server wants to create a new directory
in the working directory.

\b Value in the Event Recorder shows:
  - \b path: path of the new directory to create.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_OperationDenied(uint8_t session)
\details
The event \b OperationDenied is created when the FTP server denies access to the file
or directory for the user. This happens when the user application returns false in the
\ref netFTPs_FileAccess function.

\b Value in the Event Recorder shows:
   - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_RemoveDirectory(const char *path, uint32_t length)
\details
The event \b RemoveDirectory is created when the FTP server wants to remove the specified
directory from the working directory.

\b Value in the Event Recorder shows:
  - \b path: path of the directory to remove.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_RemoveDirectoryFailed(uint8_t session)
\details
The event \b RemoveDirectoryFailed is created when the FTP server wants to remove
the specified directory from the working directory, but the specified directory
is not empty, and therefore the removal fails.

\b Value in the Event Recorder shows:
   - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_DirectoryRemoved(uint8_t session)
\details
The event \b DirectoryRemoved is created when the FTP server successfully removes
the specified directory.

\b Value in the Event Recorder shows:
   - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ShowDataMode(uint8_t session, uint32_t data_mode)
\details
The event \b ShowDataMode is created when the network library wants to display the
data transfer method that will start.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
  - \b mode:    mode of data transfer (binary, ascii).
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ActiveModeStart(uint8_t session, uint16_t port)
\details
The event \b ActiveModeStart is created when the FTP server starts active FTP mode.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
  - \b port:    port on the client for data connection.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_PassiveModeStart(uint8_t session, uint16_t local_port)
\details
The event \b PassiveModeStart is created when the FTP server starts passive FTP mode.

\b Value in the Event Recorder shows:
  - \b session:    FTP server session.
  - \b local_port: local port for data connection.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_GetFileSize(const char *fname, uint32_t length)
\details
The event \b GetFileSize is created when the FTP server executes the \ref ftp_supported_cmds "SIZE"
command to retrieve the size of the file that is stored on the FTP server.

\b Value in the Event Recorder shows:
  - \b name: file name from which to obtain the size.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_GetFileLastModifiedTime(const char *fname, uint32_t length)
\details
The event \b GetFileLastModifiedTime is created when the FTP server executes the
\ref ftp_supported_cmds "MDTM" command to obtain the last time the file was modified
on the FTP server.

\b Value in the Event Recorder shows:
  - \b name: file name from which to obtain the last modified time.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ListDirectoryBasic(uint8_t session)
\details
The event \b ListDirectoryBasic is created when the FTP server executes the
\ref ftp_supported_cmds "NLST" command for a list of files in basic format, these
are file names only.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ListDirectoryExtended(uint8_t session)
\details
The event \b ListDirectoryExtended is created when the FTP server executes the
\ref ftp_supported_cmds "LIST" command for a list of files in extended format, such as
file names, file sizes, last modified time, etc.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ReadFile(const char *fname, uint32_t length)
\details
The event \b ReadFile is created when the FTP server executes the \ref ftp_supported_cmds "RETR"
command to retrieve the file stored on the FTP server.

\b Value in the Event Recorder shows:
  - \b name: file name to retrieve.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_FileNotFound(uint8_t session)
\details
The event \b FileNotFound is created when the requested file cannot be found on
the FTP server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_WriteFile(const char *fname, uint32_t length)
\details
The event \b WriteFile is created when the FTP server executes the \ref ftp_supported_cmds "STOR"
command to save the file to the FTP server.

\b Value in the Event Recorder shows:
  - \b name: file name to save.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_AppendFile(const char *fname, uint32_t length)
\details
The event \b AppendFile is created when the FTP server executes the \ref ftp_supported_cmds "APPE"
command to append the data to the existing file on the FTP server.

\b Value in the Event Recorder shows:
  - \b name: file name to append the data to.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_FileCreateFailed(uint8_t session)
\details
The event \b FileCreateFailed is created when the requested file cannot be created
on the FTP server. A possible reason for this may be the write-protected SD card.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_DeleteFile(const char *fname, uint32_t length)
\details
The event \b DeleteFile is created when the FTP server executes the \ref ftp_supported_cmds "DELE"
command to delete the file on the FTP server.

\b Value in the Event Recorder shows:
  - \b name: file name to delete.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_FileDeleteFailed(uint8_t session)
\details
The event \b FileDeleteFailed is created when the requested file cannot be deleted
on the FTP server. A possible reason for this may be the write-protected SD card.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_FileDeleted(uint8_t session)
\details
The event \b FileDeleted is created when the requested file is successfully deleted
on the FTP server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_RenameFileFrom(const char *fname, uint32_t length)
\details
The event \b RenameFileFrom is created when the FTP server executes the
\ref ftp_supported_cmds "RNFR" command to rename the file on the FTP server. The command
specifies the name of the file to be renamed.

\b Value in the Event Recorder shows:
  - \b name: file name to be renamed.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_RenameFileTo(const char *new_name, uint32_t length)
\details
The event \b RenameFileTo is created when the FTP server executes the
\ref ftp_supported_cmds "RNTO" command to rename the file on the FTP server. The command
specifies the new name of the file to be renamed.

\b Value in the Event Recorder shows:
  - \b new_name: new name of the file.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_FileRenamed(uint8_t session)
\details
The event \b FileRenamed is created when the requested file is successfully renamed
on the FTP server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_FileRenameFailed(uint8_t session)
\details
The event \b FileRenameFailed is created when the requested file cannot be renamed
on the FTP server. A possible reason for this may be the write-protected SD card.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_UnknownCommand(uint8_t session)
\details
The event \b UnknownCommand is created when the requested command is not recognized
on the FTP server. A possible reason for this may be that the FTP client issued
a command that is not supported on the FTP server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_InvalidState(uint8_t session)
\details
The event \b InvalidState is created when the command is received in an FTP server
state that cannot process the command. The command is therefore discarded. A possible
reason may be that the FTP client issued the command before the client was authenticated.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_InboundConnRejected(uint8_t session)
\details
The event \b InboundConnRejected is created when the FTP client initiated a data
connection to an FTP server in FTP active mode. The connection request was therefore
rejected. In FTP active mode, the FTP server should establish a data connection.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_DataSocketClosed(uint8_t session)
\details
The event \b DataSocketClosed is created when the FTP client has closed the data
connection to the FTP server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_DataSocketOpen(uint8_t session)
\details
The event \b DataSocketOpen is created when a data connection to the FTP server
is established.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_LocalDiskWriteError(uint8_t session)
\details
The event \b LocalDiskWriteError is created when the FTP server fails to write data
to a file on the FTP server. This usually happens when the storage quota
is exceeded or the storage medium is full.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_StartService(uint16_t port)
\details
The event \b StartService is created when the network library starts the FTP server
service. This happens automatically if the auto-start services are enabled, or when
the \ref netFTPs_Start function is executed.

\b Value in the Event Recorder shows:
  - \b port: port number to be used.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_StopService(void)
\details
The event \b StopService is created when the network library stops the FTP server
service. This happens when the \ref netFTPs_Stop function is executed.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ShowFileFindMask(const char *path, uint32_t length)
\details
The event \b ShowFileFindMask is created when the FTP server wants to display
the search file mask and search file path. This concatenated string is then passed
to the \ref netFTPs_ffind function.

\b Value in the Event Recorder shows:
  - \b path: path and file search mask.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_MakeDirectoryFailed(uint8_t session)
\details
The event \b MakeDirectoryFailed is created when the requested directory cannot be
created on the FTP server. A possible reason for this may be the write-protected SD card.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_DirectoryCreated(uint8_t session)
\details
The event \b DirectoryCreated is created when the requested directory is successfully
created on the FTP server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ShowFileSize(uint8_t session, uint32_t file_size)
\details
The event \b ShowFileSize is created when the FTP server wants to display the size
of the requested file.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
  - \b size:    size of the file in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ShowFileLastModifiedTime(uint8_t session,
                                                 const char *file_time, uint32_t length)
\details
The event \b ShowFileLastModifiedTime is created when the FTP server wants to display
the time the file was last modified on the FTP server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
  - \b lm_time: last modified time of the file.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_CloseDataConnection(uint8_t session)
\details
The event \b CloseDataConnection is created when the FTP server closes the data connection.
This happens when the requested command, such as a list directory or a read file,
is completed.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_CloseSession(uint8_t session)
\details
The event \b CloseSession is created when the FTP server closes the active user session,
that is, when the \ref ftp_supported_cmds "QUIT" command is executed. When the session
ends, the user is disconnected from the FTP server.

\b Value in the Event Recorder shows:
  - \b session: FTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_SessionIdle(uint8_t session)
\details
The event \b SessionIdle is created when the FTP server session ends, that is when
both socket connections are broken and the user session idle. The session is then
ready to accept a new user.

\b Value in the Event Recorder shows:
  - \b session: FTP server session that is idle.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_ShowPath(const char *path, uint32_t length)
\details
The event \b ShowPath is created when the FTP server wants to display the absolute
path to the file on the FTP server. This path is then used to access the requested
file.

\b Value in the Event Recorder shows:
  - \b path: absolute path to the requested file.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPs_UninitServer(void)
\details
The event \b UninitServer is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ftp
*/

/**
@}
*/

/**
\defgroup net_evr_ftpc_func NetFTPc: FTP Client
\brief Events generated by the Network - FTP Client functions
\details
The FTP client functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the FTP client works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_InitClient(uint32_t mode)
\details
The event \b InitClient is created when the FTP client is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b mode: client mode of operation (Active, Passive).
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the FTP client is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the TCP socket. To resolve this error, you must increase the number of available
TCP sockets in the TCP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_Connect(const void *net_addr)
\details
The event \b Connect is created when the FTP client wants to connect to a server.
This happens when the function \ref netFTPc_Connect is executed.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address of the server.
  - \b port: server port number.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ConnectInvalidParameter(void)
\details
The event \b ConnectInvalidParameter is created when the FTP client can not connect
to the server, because the \ref netFTPc_Connect function is called with an invalid
input parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ConnectClientBusy(void)
\details
The event \b ConnectClientBusy is created when the FTP client can not connect
to the server, because the FTP client is already running.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_InboundConnRejected(int32_t socket)
\details
The event \b InboundConnRejected is created when the FTP server initiated a control
connection to FTP client, or a data connection in passive mode. The connection request
was therefore rejected. In FTP passive mode, the FTP client should establish a data
connection.

\b Value in the Event Recorder shows:
  - \b sock: FTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_SocketAborted(int32_t socket)
\details
The event \b SocketAborted is created when the FTP client connection is unexpectedly
terminated from the server. The client session is then closed.

\b Value in the Event Recorder shows:
  - \b sock: FTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_SocketConnected(int32_t socket)
\details
The event \b SocketConnected is created when the FTP client is connected to the
server. The connection is established and the client session is then active.

\b Value in the Event Recorder shows:
  - \b sock: FTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_SocketClosed(int32_t socket)
\details
The event \b SocketClosed is created when the FTP client connection is unexpectedly
closed from the server. The client session is then closed.

\b Value in the Event Recorder shows:
  - \b sock: FTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ReceiveFrame(int32_t socket, uint32_t length)
\details
The event \b ReceiveFrame is created when the FTP client receives the frame.

\b Value in the Event Recorder shows:
  - \b sock: FTP client socket.
  - \b len:  length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the FTP client receives the frame that
is too short. The frame is then discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ShowReplyCode(const uint8_t *reply_code)
\details
The event \b ShowReplyCode is created when the FTP client wants to display a numeric
threee-digit response code received from the server.

\b Value in the Event Recorder shows:
  - \b reply: numeric FTP response code.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ResponseFragmented(void)
\details
The event \b ResponseFragmented is created when the FTP client receives a milti-line
response from the server, but the last line of the response has not yet been received.
The FTP client is thus waiting for more data.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ServerReady(void)
\details
The event \b ServerReady is created when the FTP client receives a response from
the server that the server is ready to receive FTP client commands. This means that
user authentication can begin.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_UserOkNeedPassword(void)
\details
The event \b UserOkNeedPassword is created when the FTP client receives a response
from the server that the specified username has been accepted and that a password
is still required to complete the authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_UserLoginFailed(void)
\details
The event \b UserLoginFailed is created when the FTP client failed to log into
the server because the authentication failed. The connection to the server is then
terminated.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_UserLoginSuccess(void)
\details
The event \b UserLoginSuccess is created when the FTP client successfully logs into
the server. The server is now ready to execute file management commands from the
user.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_WorkingDirectoryInvalid(void)
\details
The event \b WorkingDirectoryInvalid is created when the FTP client wants to change
the working directory on the server, and the server replies that the specified
directory is invalid.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ExecuteUserCommand(uint8_t command)
\details
The event \b ExecuteUserCommand is created when the FTP client sends an FTP command
to the server for execution.

\b Value in the Event Recorder shows:
  - \b cmd: FTP command to execute (PUT, GET, APPEND, DELETE, LIST,
                                    RENAME, MKDIR, RMDIR, NLIST).
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_BinaryModeEnabled(void)
\details
The event \b BinaryModeEnabled is created when the FTP client changes the transfer
mode to binary, which is then used to transfer the files.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_PasvCommandFailed(void)
\details
The event \b PasvCommandFailed is created when the FTP client fails to activate
the FTP passive mode on the server. The FTP client session is then terminated and
the client disconnects from the server.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_PassiveModeStart(uint16_t port)
\details
The event \b PassiveModeStart is created when the FTP client successfully activates
the FTP passive mode on the server. The server then opens the data port where the
FTP client connects to the data connection.

\b Value in the Event Recorder shows:
  - \b port: port on FTP server for data connection.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_PortCommandFailed(void)
\details
The event \b PortCommandFailed is created when the FTP client fails to activate
the active FTP mode on the server. The client then tries the FTP passive mode. If
this fails, the FTP session is terminated and the client disconnects from the server.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ActiveModeStart(uint16_t local_port)
\details
The event \b ActiveModeStart is created when the FTP client successfully activates
the active FTP mode on the server. The client then opens the data port on which
the FTP server connects to establish a data connection.

\b Value in the Event Recorder shows:
  - \b local_port: port on FTP client for data connection.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_FileNotFoundOnServer(void)
\details
The event \b FileNotFoundOnServer is created when the requested file cannot be found
on the FTP server.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_OperationNotAllowed(void)
\details
The event \b OperationNotAllowed is created when the requested file or directory
operation on the FTP server is not allowed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_AboutToOpenDataConn(int32_t socket)
\details
The event \b AboutToOpenDataConn is created when the requested command needs a data
connection, and the FTP client is about to open it.

\b Value in the Event Recorder shows:
  - \b sock: FTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_DataConnAlreadyOpen(int32_t socket)
\details
The event \b DataConnAlreadyOpen is created when the requested command needs a data
connection, and the data connection is already open.

\b Value in the Event Recorder shows:
  - \b sock: FTP client data socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_TransferAborted(void)
\details
The event \b TransferAborted is created when the data connection is unexpectedly
closed before the data transfer completes while retrieving a file.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_TransferCompleted(void)
\details
The event \b TransferCompleted is created when the data transfer is completed
successfully when saving or retrieving a file or a directory list.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_FileDeleted(void)
\details
The event \b FileDeleted is created when the requested file is successfully deleted
on the FTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_NewNameRequired(void)
\details
The event \b NewNameRequired is created when the FTP server requests a new name
for the requested file to which it will rename the file.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_FileOrDirectoryRenamed(void)
\details
The event \b FileOrDirectoryRenamed is created when the requested file or directory
is successfully renamed on the FTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_DirectoryCreated(void)
\details
The event \b DirectoryCreated is created when the requested directory is successfully
created on the FTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_FileOrPathNotFound(void)
\details
The event \b FileOrPathNotFound is created when the requested file or path cannot
be found on the FTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_DirectoryRemoved(void)
\details
The event \b DirectoryRemoved is created when the requested directory is successfully
removed on the FTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_CommandErrorResponse(void)
\details
The event \b CommandErrorResponse is created when the FTP server does not recognize
the requested command or the command is not supported on the server.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_WrongResponse(const uint8_t *response, uint32_t length)
\details
The event \b WrongResponse is created when the FTP server responds to the requested
command, but the FTP client does not expect that response.

\b Value in the Event Recorder shows:
  - \b reply: server response in text format.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_DataSocketClosed(int32_t socket)
\details
The event \b DataSocketClosed is created when the data socket is closed and the data
connection to the server is terminated.

\b Value in the Event Recorder shows:
  - \b sock: FTP client data socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_DataSocketOpened(int32_t socket)
\details
The event \b DataSocketOpened is created when the data socket is opened and the data
connection to the server is established.

\b Value in the Event Recorder shows:
  - \b sock: FTP client data socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_LocalDiskWriteError(void)
\details
The event \b LocalDiskWriteError is created when the FTP client failed to write data
to a local file. This usually happens when the storage medium is full or when a write
error occurs in \ref netFTPc_fwrite. The FTP client session is then terminated.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ClientStopTimeoutExpired(void)
\details
The event \b ClientStopTimeoutExpired is created when the FTP operation has expired
but is not completed. The FTP client session is then terminated.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_LocalPortAssigned(uint16_t local_port)
\details
The event \b LocalPortAssigned is created when the FTP client successfully assigns
a local port in the active FTP mode. The client then opens the data port on which
the FTP server connects to establish a data connection.

\b Value in the Event Recorder shows:
  - \b local_port: port on FTP client for data connection.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_OpenLocalFile(const char *local_fname, uint32_t length)
\details
The event \b OpenLocalFile is created when the FTP client has to open a local file
to read or write.

\b Value in the Event Recorder shows:
  - \b name: name of the file to open.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_LocalFileCreateFailed(void)
\details
The event \b LocalFileCreateFailed is created when the requested local file cannot be
created. A possible reason for this may be the write-protected SD card.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_LocalFileNotFound(void)
\details
The event \b LocalFileNotFound is created when the requested local file cannot be
found on the storage medium.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_OpenDataConnFailed(int32_t socket)
\details
The event \b OpenDataConnFailed is created when the FTP client fails to open a data
connection. The FTP client session is then terminated.

\b Value in the Event Recorder shows:
  - \b sock: FTP client data socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_SendCommand(const uint8_t *command, uint32_t length)
\details
The event \b SendCommand is created when the FTP client sends a FTP command to the
server.

\b Value in the Event Recorder shows:
  - \b cmd: FTP command to send.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ClientCloseSocket(int32_t socket)
\details
The event \b ClientCloseSocket is created when the FTP client session ends and
the control socket must disconnect from the server.

\b Value in the Event Recorder shows:
  - \b sock: FTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_ClientDone(uint8_t cb_event)
\details
The event \b ClientDone is created when the FTP client operation is complete and
the client session ends. The user application is then notified of the completion event.

\b Value in the Event Recorder shows:
  - \b cb_event: completion event to notify (Success, Timeout, LoginFailed,
                 AccessDenied, FileNotFound, InvalidDirectory, LocalFileError, Error).
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_CloseLocalFile(void)
\details
The event \b CloseLocalFile is created when the FTP client closes a local file
that was previously opened for reading or writing.
*/

/**
\fn __STATIC_INLINE void EvrNetFTPc_UninitClient(void)
\details
The event \b UninitClient is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b ftp
*/

/**
@}
*/

/**
\defgroup net_evr_teln_func NetTeln: Telnet Server
\brief Events generated by the Network - Telnet Server functions
\details
The Telnet server functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the Telnet server works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_InitServer(uint32_t num_sessions, uint16_t port, uint16_t idle_tout)
\details
The event \b InitServer is created when the Telnet server is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b sessions: number of Telnet sessions available.
  - \b port:     port number to be used.
  - \b tout:     duration of inactivity to close the session.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_GetSocketFailed(uint8_t session)
\details
The event \b GetSocketFailed is created when the Telnet server is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the TCP socket. To resolve this error, you must increase the number of available
TCP sockets in the TCP socket configuration.

\b Value in the Event Recorder shows:
  - \b session: session that failed to allocate the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_SetUsername(const char *username, uint32_t length)
\details
The event \b SetUsername is created when the Telnet server changes the username for
the administrator account. This happens when the \ref netTELNETs_SetUsername function
is executed.

\b Value in the Event Recorder shows:
  - \b username: username to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_SetPassword(const char *password, uint32_t length)
\details
The event \b SetPassword is created when the Telnet server changes the password for
the administrator account. This happens when the \ref netTELNETs_SetPassword function
is executed.

\b Value in the Event Recorder shows:
  - \b password: password to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_StartService(uint16_t port)
\details
The event \b StartService is created when the network library starts the Telnet server
service. This happens automatically if the auto-start services are enabled, or when
the \ref netTELNETs_Start function is executed.

\b Value in the Event Recorder shows:
  - \b port: port number to be used.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_StopService(void)
\details
The event \b StopService is created when the network library stops the Telnet server
service. This happens when the \ref netTELNETs_Stop function is executed.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_CloseSession(uint8_t session)
\details
The event \b CloseSession is created when the Telnet server closes the active user
session. When the session ends, the user is disconnected from the Telnet server.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_ProcessData(uint8_t session, uint32_t length)
\details
The event \b ProcessData is created each time the user enters data, for example by
pressing a key on the keyboard, and notifies the length of the data received. The
telnet command is processed when you press ENTER.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session.
  - \b len:     length of the user data.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_ProcessCommand(const char *command, uint32_t length)
\details
The event \b ProcessCommand is created each time the user presses ENTER on the keyboard
and finishes editing the command. The event notifies you of the entered command.

\b Value in the Event Recorder shows:
  - \b command: command entered by the user.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_EchoBackspace(uint8_t session)
\details
The event \b EchoBackspace is created each time the user presses the Backspace key
on the keyboard while editing the command.

\b Value in the Event Recorder shows:
  - \b session: Telnet server command edit session.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_CommandHistory(const char *command, uint32_t length)
\details
The event \b CommandHistory is created each time the user presses the UP or DOWN arrow
key on the keyboard and recalls recently saved history commands. The event notifies
you of the invoked command.

\b Value in the Event Recorder shows:
  - \b command: command retrieved from command history.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_EchoCharacters(uint8_t *line_buffer, uint32_t num_char)
\details
The event \b EchoCharacters is created each time the user presses a key on the keyboard
and Echo mode is active on the server. The event informs you of the echoes.

\b Value in the Event Recorder shows:
  - \b line_buff: recently entered echo characters.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_LineBufferUsage(uint8_t session, uint32_t num_char)
\details
The event \b LineBufferUsage is created to inform you about using the command line
buffer, which is the number of characters stored in the line buffer.

\b Value in the Event Recorder shows:
  - \b session:  Telnet server command line edit session.
  - \b num_char: number of characters in the line buffer.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_SendAuthorizationRequest(uint8_t session)
\details
The event \b SendAuthorizationRequest is created when a welcome message is sent
to the user requesting authorization. This happens when authentication is enabled
for the server.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session that opens.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_SendInitialHeader(uint8_t session)
\details
The event \b SendInitialHeader is created when a welcome message is sent to the user.
This happens when authentication for the server is disabled.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session that opens.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_LoginTimeoutExpired(uint8_t session)
\details
The event \b LoginTimeoutExpired is created when the Telnet server failed to
authenticate the user. The user did not provide credentials, so the authentication
time has expired.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session for authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_ShowPassword(const char *password, uint32_t length)
\details
The event \b ShowPassword is created when the Telnet server wants to display
the password entered to authenticate the user.

\b Value in the Event Recorder shows:
  - \b password: password for the Telnet access.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_AuthenticationFailed(uint8_t session)
\details
The event \b AuthenticationFailed is created when the Telnet server failed to
authenticate the user, which means that the username and/or password was invalid.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session for authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_UserLoginSuccess(uint8_t session)
\details
The event \b UserLoginSuccess is created when the Telnet server successfully
authenticates the user.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session for authentication.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_ShowUsername(const char *username, uint32_t length)
\details
The event \b ShowUsername is created when the Telnet server wants to display
the user name entered to authenticate the user.

\b Value in the Event Recorder shows:
  - \b username: user name for the Telnet access.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_NegotiateStart(uint8_t session)
\details
The event \b NegotiateStart is created when the Telnet server starts negotiating
Telnet parameters such as echo, suppress-go-ahead, and so on. This happens when
a Telnet client tries to connect to a server.

\b Value in the Event Recorder shows:
  - \b session: Telnet server negotiation session.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_NegotiateFailed(uint8_t session)
\details
The event \b NegotiateFailed is created when the Telnet server fails negotiating
Telnet parameters. This happens when a Telnet client tries to connect to a server.

\b Value in the Event Recorder shows:
  - \b session: Telnet server negotiation session.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_UserAccessDenied(const void *net_addr)
\details
The event \b UserAccessDenied is created when the Telnet server rejects the pending
connection request for the client, because the user application has denied connection
for this client. This happens when the \ref netTELNETs_AcceptClient function returns
\e false.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address of the client.
  - \b port: port number of the client.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_SessionOpen(uint8_t session)
\details
The event \b SessionOpen is created when the Telnet server accepts a request to connect
from the client and opens a server session to handle this connection. This happens
when the Telnet client attempts to connect to the server.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session for opening.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_SocketAborted(uint8_t session)
\details
The event \b SocketAborted is created when the Telnet server connection is unexpectedly
terminated from the client. The corresponding server session is then closed.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_SocketClosed(uint8_t session)
\details
The event \b SocketClosed is created when the Telnet server connection is unexpectedly
closed from the client. The corresponding server session is then closed.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session for closing.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_ReceiveFrame(uint8_t session, uint32_t length)
\details
The event \b ReceiveFrame is created when the Telnet server receives the frame.

\b Value in the Event Recorder shows:
  - \b session: Telnet server session.
  - \b len:     length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_NegotiateSuccess(uint8_t session)
\details
The event \b NegotiateSuccess is created when the Telnet server successfully
negotiate Telnet parameters. The connect procedure will then move on to the next step.
This happens when a Telnet client tries to connect to a server.

\b Value in the Event Recorder shows:
  - \b session: Telnet server negotiation session.
*/

/**
\fn __STATIC_INLINE void EvrNetTeln_UninitServer(void)
\details
The event \b UninitServer is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b telnet
*/

/**
@}
*/

/**
\defgroup net_evr_tftps_func NetTFTPs: TFTP Server
\brief Events generated by the Network - TFTP Server functions
\details
The TFTP server functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the TFTP server works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_InitServer(uint32_t num_sessions, uint16_t port, uint8_t firewall_en)
\details
The event \b InitServer is created when the TFTP server is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b sessions:    number of TFTP sessions available.
  - \b port:        port number to be used.
  - \b firewall_en: enable firewall support.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_ShowRootFolder(const char *root_folder, uint32_t length)
\details
The event \b ShowRootFolder is created when the network library wants to display
the path to the root folder that contains the TFTP server files. This event is generated
only if the root folder is enabled in the TFTP server configuration.

\b Value in the Event Recorder shows:
  - \b root: path of the root directory.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_GetSocketFailed(uint8_t session)
\details
The event \b GetSocketFailed is created when the TFTP server is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the UDP socket. To resolve this error, you must increase the number of available
UDP sockets in the UDP socket configuration.

\b Value in the Event Recorder shows:
  - \b session: session that failed to allocate the socket.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_SetRootPath(const char *path, uint32_t length)
\details
The event \b SetRootPath is created when the TFTP server changes the path to server
files. This happens when the \ref netTFTPs_SetRootPath function is executed.

\b Value in the Event Recorder shows:
  - \b path: path of the root directory to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_StartService(uint16_t port)
\details
The event \b StartService is created when the network library starts the TFTP server
service. This happens automatically if the auto-start services are enabled, or when
the \ref netTFTPs_Start function is executed.

\b Value in the Event Recorder shows:
  - \b port: port number to be used.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_StopService(void)
\details
The event \b StopService is created when the network library stops the TFTP server
service. This happens when the \ref netTFTPs_Stop function is executed.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_TimeoutExpiredAbort(uint8_t session)
\details
The event \b TimeoutExpiredAbort is created when the TFTP server session expired
due to client inactivity. The session is then aborted.

\b Value in the Event Recorder shows:
  - \b session: session that expired.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_SendBlock(uint8_t session, uint32_t block_nr, uint32_t length)
\details
The event \b SendBlock is created when the TFTP header is constructed and the data
block is sent to the UDP socket for transmitting.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b block:   block sequence number.
  - \b len:     length of the data block.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_ReceiveFrame(int32_t socket, uint32_t length)
\details
The event \b ReceiveFrame is created when the TFTP server receives the frame.

\b Value in the Event Recorder shows:
  - \b sock: TFTP server socket.
  - \b len:  length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the TFTP server receives the frame that
is too short. The frame is then discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_UserAccessDenied(const void *net_addr)
\details
The event \b UserAccessDenied is created when the TFTP server rejects the pending
connection request for the client, because the user application has denied connection
for this client. This happens when the \ref netTFTPs_AcceptClient function returns
\e false.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address of the client.
  - \b port: port number of the client.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_AccessDeniedNoResources(void)
\details
The event \b AccessDeniedNoResources is created when the TFTP server rejects a pending
connection request for the client, because the server can not assign a free session
to manage the client connection. This means that the maximum number of concurrent user
connections is currently active.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_ShowClientAddress(const void *net_addr)
\details
The event \b ShowClientAddress is created when the TFTP server wants to display
the contents of the network address structure, that is, the IP address and
the port number of the client.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address of the client.
  - \b port: port number of the client.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_OperationRequest(uint8_t session, uint16_t tftp_opcode)
\details
The event \b OperationRequest is created when the TFTP server wants to display the
operation code it receives from the client.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b opcode:  operation code (RRQ, WRQ, DATA, ACK, ERR, OACK).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_SessionRestart(uint8_t session)
\details
The event \b SessionRestart is created when the TFTP server receives a retransmitted
request. This usually means that initial server response was lost. The server session
then restarts.

\b Value in the Event Recorder shows:
  - \b session: TFTP server restart session.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_InvalidTransferId(uint8_t session)
\details
The event \b InvalidTransferId is created when the TFTP server receives an invalid
transfer identification (TID) data frame. The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_ErrorCodeReceived(uint8_t session, uint16_t error_code)
\details
The event \b ErrorCodeReceived is created when the TFTP server receives an error
code from the client. The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b code:    error code (ERR_NOTDEF, ERR_NOTFOUND, ERR_NOACCESS, ERR_DISKFULL,
                            ERR_ILLOPCOD, ERR_UNKNTID, ERR_FILEXIST, ERR_NOUSER).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_IllegalOpcodeReceived(uint8_t session, uint16_t tftp_opcode)
\details
The event \b IllegalOpcodeReceived is created when the TFTP server receives an invalid
operation code from the client. The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b opcode:  operation code (RRQ, WRQ, DATA, ACK, ERR, OACK).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_FileRequested(const char *fname, uint32_t length)
\details
The event \b FileRequested is created when the TFTP server tries to open the requested
file for reading or writing on the server.

\b Value in the Event Recorder shows:
  - \b name: name of the file to open.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_TransferBlockSize(uint8_t session, uint16_t block_size)
\details
The event \b TransferBlockSize is created when the TFTP server wants to display the
size of transfer block that is set for the session. The size is usually 512 bytes.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b size:    block size in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_TransferModeNotBinary(uint8_t session)
\details
The event \b TransferModeNotBinary is created when the TFTP server receives a request
mode that is not "octet" or "netascii", so it is not a binary mode. The server session
then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_LocalFileNotFound(uint8_t session)
\details
The event \b LocalFileNotFound is created when the requested file cannot be found on
the TFTP server. The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_LocalFileCreateFailed(uint8_t session)
\details
The event \b LocalFileCreateFailed is created when the requested file cannot be created
on the TFTP server. A possible reason for this may be the write-protected SD card.
The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_ReceiveDataFrame(uint8_t session, uint32_t length)
\details
The event \b ReceiveDataFrame is created when the TFTP server receives the data frame
on the data socket.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b len:     length of the received data frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_DataFrameTooShort(uint8_t session, uint32_t length, uint32_t min_length)
\details
The event \b DataFrameTooShort is created when the TFTP server receives the data frame that
is too short. The frame is then discarded.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b len:     length of the received data frame in bytes.
  - \b min:     minimum valid data frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_DuplicateBlockReceived(uint8_t session, uint32_t block_nr)
\details
The event \b DuplicateBlockReceived is created when the TFTP server wants to inform that
the received data block is a duplicate, ie that it has been received again. The data
block is then discarded.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b block:   block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_TooManyRetries(uint8_t session)
\details
The event \b TooManyRetries is created when the TFTP server receives or sends too many
duplicate blocks. The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_BlockReceived(uint8_t session, uint32_t block_nr)
\details
The event \b BlockReceived is created when the TFTP server receives the data block
on the data socket.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b block:   block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_InvalidBlockReceived(uint8_t session, uint32_t block_nr)
\details
The event \b InvalidBlockReceived is created when the TFTP server receives the data
block with invalid sequence, that is, an out of order block. The server session then
terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b block:   block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_WriteErrorDiskFull(uint8_t session, uint32_t length)
\details
The event \b WriteErrorDiskFull is created when the TFTP server failed to write data
to a local file. This usually happens when the storage medium is full or when a write
error occurs in \ref netTFTPs_fwrite. The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b len:     length of data to write.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_BlockAckReceived(uint8_t session, uint32_t block_nr)
\details
The event \b BlockAckReceived is created when the TFTP server receives an acknowledgement
of the sent data block. The server then sends the next data block.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b block:   block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_BlockRetransmit(uint8_t session, uint32_t block_nr)
\details
The event \b BlockRetransmit is created when the TFTP server receives an acknowledgement
of a previously sent data block. This means that the last data block has been lost and
is being resent.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b block:   block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_InvalidBlockAck(uint8_t session, uint32_t block_nr)
\details
The event \b InvalidBlockAck is created when the TFTP server receives an acknowledgement
of an invalid data block, that is, an out of order block. The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b block:   block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_ShowRequestMode(const uint8_t *mode, uint32_t length)
\details
The event \b ShowRequestMode is created when the TFTP server wants to display the contents
of a received mode option.

\b Value in the Event Recorder shows:
  - \b mode: mode option in text format.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_SendOptionAck(uint8_t session, uint32_t block_size)
\details
The event \b SendOptionAck is created when the TFTP server sends an acknowledgement
of the proposed transfer block size option. The size is usually 512 bytes.

\b Value in the Event Recorder shows:
  - \b session:    TFTP server session.
  - \b block_size: block size in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_SendBlockAck(uint8_t session, uint16_t block_nr)
\details
The event \b SendBlockAck is created when the TFTP server sends an acknowledgement
of the received data block. The transfer then continues with the download of the next
block.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b block:   block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_SendError(uint8_t session, uint16_t error_nr)
\details
The event \b SendError is created when the TFTP server sends an error message
to the client. The server session then terminates.

\b Value in the Event Recorder shows:
  - \b session: TFTP server session.
  - \b code:    error code (ERR_NOTDEF, ERR_NOTFOUND, ERR_NOACCESS, ERR_DISKFULL,
                            ERR_ILLOPCOD, ERR_UNKNTID, ERR_FILEXIST, ERR_NOUSER).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_AbortSession(uint8_t session)
\details
The event \b AbortSession is created when the TFTP server terminates an active user
session because an error occurred. The file operation is not complete.

\b Value in the Event Recorder shows:
  - \b session: TTFP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_CloseSession(uint8_t session)
\details
The event \b CloseSession is created when the TFTP server closes the active user
session, because file operation is completed.

\b Value in the Event Recorder shows:
  - \b session: TTFP server session.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPs_UninitServer(void)
\details
The event \b UninitServer is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b tftp
*/

/**
@}
*/

/**
\defgroup net_evr_tftpc_func NetTFTPc: TFTP Client
\brief Events generated by the Network - TFTP Client functions
\details
The TFTP client functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the TFTP client works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_InitClient(void)
\details
The event \b InitClient is created when the TFTP client is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b tftp
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the TFTP client is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the UDP socket. To resolve this error, you must increase the number of available
UDP sockets in the UDP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_PutFile(const char *local_fname, uint32_t length)
\details
The event \b PutFile is created when the function \ref netTFTPc_Put is called to
upload a file to a TFTP server. 

\b Value in the Event Recorder shows:
  - \b name: local file name.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_PutRemoteName(const char *fname, uint32_t length)
\details
The event \b PutFile is created when the function \ref netTFTPc_Put is called to
upload a file to a TFTP server. This event is created only if the remote file name
is specified and is different from the local file name.

\b Value in the Event Recorder shows:
  - \b name: remote file name.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_PutInvalidParameter(void)
\details
The event \b PutInvalidParameter is created when the function \ref netTFTPc_Put
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_PutWrongState(uint8_t state)
\details
The event \b PutWrongState is created when the function \ref netTFTPc_Put is called
but the TFTP client is not idle.

\b Value in the Event Recorder shows:
  - \b state: TFTP client state (PUT, GET, STOP).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_ShowServerAddress(const void *net_addr)
\details
The event \b ShowServerAddress is created when the TFTP client wants to display
the contents of the network address structure, that is, the IP address and
the port number of the server.

\b Value in the Event Recorder shows:
  - \b ip:   IPv4 or IPv6 address.
  - \b port: port number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_OpenLocalFile(void)
\details
The event \b OpenLocalFile is created when the TFTP client has to open a local file
to read or write.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_OpenLocalFileFailed(void)
\details
The event \b OpenLocalFileFailed is created when the requested local file cannot be
opened for reading or writing. This usually means that the file cannot be found or
that the file cannot be created on the storage medium.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_GetFile(const char *fname, uint32_t length)
\details
The event \b GetFile is created when the function \ref netTFTPc_Get is called to
download a file from a TFTP server. 

\b Value in the Event Recorder shows:
  - \b name: remote file name.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_GetLocalName(const char *local_fname, uint32_t length)
\details
The event \b GetLocalName is created when the function \ref netTFTPc_Get is called
to download a file from a TFTP server. This event is created only if the local file name
is specified and is different from the remote file name.

\b Value in the Event Recorder shows:
  - \b name: local file name.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_GetInvalidParameter(void)
\details
The event \b GetInvalidParameter is created when the function \ref netTFTPc_Get
is executed, and the function input parameter is invalid.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_GetWrongState(uint8_t state)
\details
The event \b GetWrongState is created when the function \ref netTFTPc_Get is called
but the TFTP client is not idle.

\b Value in the Event Recorder shows:
  - \b state: TFTP client state (PUT, GET, STOP).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_TimeoutBlockRetransmit(uint32_t block_nr)
\details
The event \b TimeoutBlockRetransmit is created when the acknowledgement timeout
expires, so the TFTP client resends the data block.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_SendBlock(uint32_t block_nr, uint32_t length)
\details
The event \b SendBlock is created when the TFTP header is constructed and the data
block is sent to the UDP socket for transmitting.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
  - \b len:   length of the data block.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_StopClient(void)
\details
The event \b StopClient is created when the TFTP client operation is complete and
the client session ends.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_CloseLocalFile(void)
\details
The event \b CloseLocalFile is created when the TFTP client closes a local file
that was previously opened for reading or writing.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_WrongServerAddress(const void *net_addr)
\details
The event \b WrongServerAddress is created when the TFTP client receives the
TFTP frame from an invalid TFTP server. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b ip: IPv4 or IPv6 address of the server.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_WrongServerPort(uint16_t udp_port)
\details
The event \b WrongServerPort is created when the TFTP client receives the TFTP frame
from invalid UDP server source port. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b port: UDP source port of the server.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_ServerTidAssigned(uint16_t tid)
\details
The event \b ServerTidAssigned is created when the TFTP client assigns the Transfer
Identifier value (TID) to a session. This is actually the new source port number
assigned by the TFTP server.

\b Value in the Event Recorder shows:
  - \b tid: transfer identifier value.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the TFTP client receives the frame that
is too short. The frame is then discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_ReceiveFrame(uint32_t length)
\details
The event \b ReceiveFrame is created when the TFTP client receives the frame.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_ErrorCodeReceived(uint16_t error_code)
\details
The event \b ErrorCodeReceived is created when the TFTP client receives an error
code from the server. The client session then terminates.

\b Value in the Event Recorder shows:
  - \b code: error code (ERR_NOTDEF, ERR_NOTFOUND, ERR_NOACCESS, ERR_DISKFULL,
                         ERR_ILLOPCOD, ERR_UNKNTID, ERR_FILEXIST, ERR_NOUSER).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_DuplicateBlockAck(uint32_t block_nr)
\details
The event \b DuplicateBlockAck is created when the TFTP client receives an acknowledgement
of a previously sent data block. This means that the last data block has been lost and
is being resent.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_InvalidBlockAck(uint32_t block_nr)
\details
The event \b InvalidBlockAck is created when the TFTP client receives an acknowledgement
of an invalid data block, that is, an out of order block. The client session then terminates.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_BlockAckReceived(uint32_t block_nr)
\details
The event \b BlockAckReceived is created when the TFTP client receives an acknowledgement
of the sent data block. The client then sends the next data block.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_DuplicateBlockReceived(uint32_t block_nr)
\details
The event \b DuplicateBlockReceived is created when the TFTP client wants to inform that
the received data block is a duplicate, ie that it has been received again. The data
block is then discarded.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_InvalidBlockReceived(uint32_t block_nr)
\details
The event \b InvalidBlockReceived is created when the TFTP client receives the data
block with invalid sequence, that is, an out of order block. The client session then
terminates.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_BlockReceived(uint32_t block_nr)
\details
The event \b BlockReceived is created when the TFTP client receives the data block
on the data socket.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_WriteErrorDiskFull(uint32_t length)
\details
The event \b WriteErrorDiskFull is created when the TFTP client failed to write data
to a local file. This usually happens when the storage medium is full or when a write
error occurs in \ref netTFTPc_fwrite. The client session then terminates.

\b Value in the Event Recorder shows:
  - \b len: length of data to write.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_IllegalServerOperation(void)
\details
The event \b IllegalServerOperation is created when the TFTP client detects a server
failure. The client session then terminates.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_SendRequest(uint16_t tftp_opcode)
\details
The event \b SendRequest is created when the TFTP client wants to display the
operation code it sends to the server.

\b Value in the Event Recorder shows:
  - \b opcode: operation code (RRQ, WRQ, DATA, ACK, ERR, OACK).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_OptionBlockSize(uint16_t block_size)
\details
The event \b OptionBlockSize is created when the TFTP client wants to display the
block size option it sends to the server in the request. This event is only created
if the block size is different from the default, which is 512 bytes.

\b Value in the Event Recorder shows:
  - \b size: block size in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_SendAck(uint16_t block_nr)
\details
The event \b SendAck is created when the TFTP client sends an acknowledgement of
the received data block. The transfer then continues with the download of the next
block.

\b Value in the Event Recorder shows:
  - \b block: block sequence number.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_SendError(uint16_t error_nr)
\details
The event \b SendError is created when the TFTP client sends an error message
to the client. The client session then terminates.

\b Value in the Event Recorder shows:
  - \b code: error code (ERR_NOTDEF, ERR_NOTFOUND, ERR_NOACCESS, ERR_DISKFULL,
                         ERR_ILLOPCOD, ERR_UNKNTID, ERR_FILEXIST, ERR_NOUSER).
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_OptionAckReceived(void)
\details
The event \b OptionAckReceived is created when the TFTP client receives an
acknowledgement of the proposed transfer option.
*/

/**
\fn __STATIC_INLINE void EvrNetTFTPc_UninitClient(void)
\details
The event \b UninitClient is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b tftp
*/

/**
@}
*/

/**
\defgroup net_evr_smtp_func NetSMTP: SMTP Client
\brief Events generated by the Network - SMTP Client functions
\details
The SMTP client functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the SMTP client works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_InitClient(void)
\details
The event \b InitClient is created when the SMTP client is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b smtp
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the SMTP client is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the TCP socket. To resolve this error, you must increase the number of available
TCP sockets in the TCP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_Connect(const void *net_addr)
\details
The event \b Connect is created when the SMTP client wants to connect to a server.
This happens when the function \ref netSMTPc_Connect is executed.

\b Value in the Event Recorder shows:
  - \b server: IPv4 or IPv6 address of the server.
  - \b port:   server port number.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_ConnectInvalidParameter(void)
\details
The event \b ConnectInvalidParameter is created when the SMTP client can not connect
to the server, because the \ref netSMTPc_Connect function is called with an invalid
input parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_ConnectClientBusy(void)
\details
The event \b ConnectClientBusy is created when the SMTP client can not connect
to the server, because the SMTP client is already running.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMail(uint8_t num_rcpt)
\details
The event \b SendMail is created when a user wants to send an email in blocking
mode and calls the function \ref netSMTPc_SendMail.

\b Value in the Event Recorder shows:
  - \b recipients: number of email recipients.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailInvalidParameter(void)
\details
The event \b SendMailInvalidParameter is created when the SMTP client can not send
an email, because the \ref netSMTPc_SendMail function is called with an invalid
input parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailTlsNotEnabled(void)
\details
The event \b SendMailTlsNotEnabled is created when the SMTP client can not send
email because the secure TLS (SMTPS) is required but is not enabled in SMTP client
configuration. To resolve this error, enable the mbedTLS component in runtime
environment.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailClientBusy(void)
\details
The event \b SendMailClientBusy is created when the SMTP client can not send email
because it is busy sending email from a previous request that is not yet complete.
To resolve this error, call the function again after a short delay.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailNoRecipients(void)
\details
The event \b SendMailNoRecipients is created when the SMTP client can not send email
because no email recipient is specified. To resolve this error, add at least one email
recipient to the email descriptor parameter for the \ref netSMTPc_SendMail function.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailServerNotValid(void)
\details
The event \b SendMailServerNotValid is created when the SMTP client can not send
email because the specified SMTP server name is invalid and its address can not be
resolved. To resolve this error, specify a valid server name in the mail transfer
agent parameter \e mta for the \ref netSMTPc_SendMail function.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailDnsError(void)
\details
The event \b SendMailDnsError is created when the SMTP client can not send email
because the SMTP server can not be resolved due to an error in the DNS resolution
process. If the error was caused by a DNS server unresponsiveness or a network error,
then calling the function \ref netSMTPc_SendMail again will correct the error.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailAttachNotEnabled(void)
\details
The event \b SendMailAttachNotEnabled is created when the SMTP client can not send
email because the attachment is required but is not enabled in SMTP client configuration.
To resolve this error, enable the email attachments in SMTP client configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailAttachFailed(const char *fname, uint32_t length)
\details
The event \b SendMailAttachFailed is created when the SMTP client could not send email
because the attachment file could not be opened. The file does not exist or an internal
file system error has occurred. To resolve this error, ensure that the attachment
file exist on the storage drive.

\b Value in the Event Recorder shows:
  - \b name: name of the file to attach.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailMultipart(uint8_t num_files)
\details
The event \b SendMailMultipart is created when an SMTP client sends an email with more
than one attachment. Attachments are sent as multipart content.

\b Value in the Event Recorder shows:
  - \b attachments: number of files to attach.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMailAttachment(const char *fname, uint32_t length)
\details
The event \b SendMailAttachment is created when the SMTP client successfully opens
the file to be attached to the email message.

\b Value in the Event Recorder shows:
  - \b name: name of the file to be attached.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_InboundConnRejected(int32_t socket)
\details
The event \b InboundConnRejected is created when the SMTP server initiates a connection
to the SMTP client. The connection request is therefore rejected. Only the SMTP client
needs to establish a data connection.

\b Value in the Event Recorder shows:
  - \b sock: SMTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SocketAborted(int32_t socket)
\details
The event \b SocketAborted is created when the SMTP client connection is unexpectedly
terminated from the server. The client session is then closed.

\b Value in the Event Recorder shows:
  - \b sock: SMTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SocketConnected(int32_t socket)
\details
The event \b SocketConnected is created when the SMTP client is connected to the
server. The connection is established and the client session is then active.

\b Value in the Event Recorder shows:
  - \b sock: SMTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SocketClosed(int32_t socket)
\details
The event \b SocketClosed is created when the SMTP client connection is unexpectedly
closed from the server. The client session is then closed.

\b Value in the Event Recorder shows:
  - \b sock: SMTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_ReceiveFrame(int32_t socket, uint32_t length)
\details
The event \b ReceiveFrame is created when the SMTP client receives the frame.

\b Value in the Event Recorder shows:
  - \b sock: SMTP client socket.
  - \b len:  length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_UnackedDataError(int32_t socket)
\details
The event \b UnackedDataError is created when the SMTP client receives a new response
from the server, but the previous data has not yet been acknowledged. The new SMTP
response is then discarded.

\b Value in the Event Recorder shows:
  - \b sock: SMTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the SMTP client receives the frame that
is too short. The frame is then discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_ServerReady(void)
\details
The event \b ServerReady is created when the SMTP client receives a response from
the server that the server is ready to receive SMTP client commands. This means that
user authentication can begin.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_EsmtpModeNotSupported(void)
\details
The event \b EsmtpModeNotSupported is created when the SMTP server does not accept
extended SMTP mode (ESMTP) that the client is trying to use. The client then switches
to basic SMTP mode.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_EhloResponseFragmented(void)
\details
The event \b EhloResponseFragmented is created when the SMTP client receives a milti-line
response to EHLO command from the server, but the last line of the response has not
yet been received. The SMTP client is thus waiting for more data.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_EsmtpModeActive(void)
\details
The event \b EsmtpModeActive is created when the SMTP server acknowledges the
extended SMTP mode (ESMTP) that the client is trying to use. The client then uses
extended SMTP mode to send an email.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_StartAuthentication(uint8_t auth_mode)
\details
The event \b StartAuthentication is created when the SMTP client starts the authentication
process for logging in to the server.

\b Value in the Event Recorder shows:
  - \b auth_mode: authentication mode (NONE, PLAIN, LOGIN, DIGEST-MD5, CRAM-MD5, NTLM).
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_AuthenticationDenied(void)
\details
The event \b AuthenticationDenied is created when the user application refused the
authentication advertised by the SMTP server. The client then uses non-authentication
mode to send emails.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_AuthMethodNotSupported(uint8_t auth_mode)
\details
The event \b AuthMethodNotSupported is created when the SMTP client does not support
the authentication mode advertised by the server. The client session is therefore closed.

\b Value in the Event Recorder shows:
  - \b auth_mode: authentication mode (NONE, PLAIN, LOGIN, DIGEST-MD5, CRAM-MD5, NTLM).
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SmtpModeActive(void)
\details
The event \b SmtpModeActive is created when the SMTP server rejects the extended
SMTP mode (ESMTP) that the client is trying to use. The client then uses basic SMTP
mode to send an email.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_AuthenticationSuccessful(void)
\details
The event \b AuthenticationSuccessful is created when the SMTP client successfully
authenticates to the server. The client then continues with sending email.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_AuthenticationFailed(void)
\details
The event \b AuthenticationFailed is created when the SMTP client fails to
authenticate to the server. The client session is then closed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_ServerAcknowledge(void)
\details
The event \b ServerAcknowledge is created when the SMTP server acknowledges a
command received from the client.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_WrongResponse(const uint8_t *response, uint32_t length)
\details
The event \b WrongResponse is created when the SMTP server responds to the requested
command, but the SMTP client does not expect that response.

\b Value in the Event Recorder shows:
  - \b reply: server response in text format.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_ClientStopTimeoutExpired(void)
\details
The event \b ClientStopTimeoutExpired is created when the SMTP operation has expired
but is not completed. The SMTP client session is then terminated.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMessageBody(void)
\details
The event \b SendMessageBody is created when the SMTP clients starts sending
the message body.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendMessageEnd(void)
\details
The event \b SendMessageEnd is created when the SMTP client finishes sending the
message and sends a sequence of characters indicating the end of the message.

\b Value in the Event Recorder shows:
  - \b CRLF.CRLF
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_SendCommand(const uint8_t *command, uint32_t length)
\details
The event \b SendCommand is created when the SMTP client sends a SMTP command to the
server.

\b Value in the Event Recorder shows:
  - \b command: SMTP command to send.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_ClientCloseSocket(int32_t socket)
\details
The event \b ClientCloseSocket is created when the SMTP client session ends and
the control socket must disconnect from the server.

\b Value in the Event Recorder shows:
  - \b sock: SMTP client socket.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_ClientDone(uint8_t cb_event)
\details
The event \b ClientDone is created when the SMTP client operation is complete and
the client session ends. The user application is then notified of the completion event.

\b Value in the Event Recorder shows:
  - \b cb_event: completion event to notify (Success, Timeout, LoginFailed, Error).
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_TlsSupportIndicated(void)
\details
The event \b TlsSupportIndicated is created when the SMTP client receives a response from
the server indicating that the server supports explicit TLS. This can be started with
the STARTTLS command.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_StartTlsAccepted(void)
\details
The event \b StartTlsAccepted is created when the SMTP client receives a response from
the server indicating that the server is ready to start TLS.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_TlsGetContextFailed(void)
\details
The event \b TlsGetContextFailed is created when the SMTP client is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the TLS context.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_TlsModeStarted(void)
\details
The event \b TlsModeStarted is created when the SMTP client has successfully initialized
and started the TLS context used for secure communication.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_TlsModeEstablished(uint8_t tls_id)
\details
The event \b TlsModeEstablished is created when the SMTP client successfully
connected the TLS session and a secure session is established.

\b Value in the Event Recorder shows:
  - \b tls_id: mbedTLS session identification.
*/

/**
\fn __STATIC_INLINE void EvrNetSMTP_UninitClient(void)
\details
The event \b UninitClient is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b smtp
*/

/**
@}
*/

/**
\defgroup net_evr_dns_func NetDNS: DNS Client
\brief Events generated by the Network - DNS Client functions
\details
The DNS client functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the DNS client works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_InitClient(uint32_t num_entries)
\details
The event \b InitClient is created when the DNS client is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b entries: number of entries available in DNS cache table.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the DNS client is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the UDP socket. To resolve this error, you must increase the number of available
UDP sockets in the UDP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ChangeDnsServer(int32_t server)
\details
The event \b ChangeDnsServer is created when the DNS client has changed the active
DNS server to a secondary or primary DNS server. This happened because the currently
active DNS server was not responding to DNS client requests.

\b Value in the Event Recorder shows:
  - \b dns: changed DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ClientStopTimeoutExpired(void)
\details
The event \b ClientStopTimeoutExpired is created when the DNS operation has expired
but is not completed. The DNS client session is then terminated.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ReceiveFrame(const void *net_addr, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the DNS frame.

\b Value in the Event Recorder shows:
  - \b ip:  address of the DNS server sending the message.
  - \b len: length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_WrongServerPort(uint16_t udp_port)
\details
The event \b WrongServerPort is created when the network library receives the DNS
frame from invalid UDP server source port. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b port: UDP source port of the server.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the DNS frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_WrongServerAddress(void)
\details
The event \b WrongServerAddress is created when the network library receives the
DNS frame from an invalid DNS server. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ShowFrameHeader(const void *dns_header)
\details
The event \b ShowFrameHeader is created when the network library wants to display
detailed information about the DNS header.

\b Value in the Event Recorder shows:
  - \b tid:   transaction identification number.
  - \b flags: frame flags.
  - \b qd:    question count.
  - \b an:    answer resource record count.
  - \b ns:    authority resource record count.
  - \b ar:    additional resource record count.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_WrongTransactionId(uint16_t tid, uint16_t tid_valid)
\details
The event \b WrongTransactionId is created when the network library receives
the DNS response frame, but the received transaction identification (TID) is not
identical to the transaction identifier of our DNS request. The frame is therefore
discarded.

\b Value in the Event Recorder shows:
  - \b tid:   received transaction identifier.
  - \b valid: expected transaction identifier.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_DnsRequestReceived(void)
\details
The event \b DnsRequestReceived is created when the network library receives a
DNS request. The DNS client can not handle DNS requests, so the frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_OpcodeNotQuery(void)
\details
The event \b OpcodeNotQuery is created when the network library receives a DNS
response in which the opcode is not a Query. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_MessageTruncated(void)
\details
The event \b MessageTruncated is created when the network library receives a
truncated DNS response. The message is accepted.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_NoSuchNameFound(void)
\details
The event \b NoSuchNameFound is created when the network library receives a DNS
response message stating that the requested name can not be found in the DNS
database. This means that the host name does not exist.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_RcodeAndRecursion(void)
\details
The event \b RcodeAndRecursion is created when the network library receives a DNS
response with non-zero rcode and the recursion is available. This is undefined state
so the frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_MoreAnswersReceived(void)
\details
The event \b MoreAnswersReceived is created when the network library receives a DNS
response that contains multiple answers. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_QnameNotTheSame(void)
\details
The event \b QnameNotTheSame is created when the network library receives a DNS
response with a host name that is not the same as the requested host name. The frame
is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_QtypeNotTheSame(void)
\details
The event \b QtypeNotTheSame is created when the network library receives a DNS
response with a DNS type that is not the same as the DNS type in the request.
The frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_QclassNotInet(void)
\details
The event \b QclassNotInet is created when the network library receives a DNS
response with the DNS class that is not Internet. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_GotHostAddress(const void *net_addr, uint32_t ttl)
\details
The event \b GotHostAddress is created when the network library receives a DNS
response with the IP address of the requested host resolved.

\b Value in the Event Recorder shows:
  - \b ip:  host address.
  - \b ttl: address expiration timeout in seconds.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_GotAuthorityAddress(const void *net_addr)
\details
The event \b GotAuthorityAddress is created when the network library receives the
DNS response with the IP address of the authoritative DNS server.

\b Value in the Event Recorder shows:
  - \b ip: address of the authoritative DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_RecordTypeNotSupported(uint16_t rr_type)
\details
The event \b RecordTypeNotSupported is created when the network library receives
a DNS response that contains a resource record type that is not supported in the
DNS client. Such a resource record is ignored.

\b Value in the Event Recorder shows:
  - \b rr_type: received resource record type.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_Resolve(const char *host_name, uint32_t length)
\details
The event \b Resolve is created when the DNS client started the name resolution
process, due to a call to the \ref netDNSc_GetHostByName or \ref netDNSc_GetHostByNameX
function.

\b Value in the Event Recorder shows:
  - \b name: name of the host to be resolved.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ResolveInvalidParameter(void)
\details
The event \b ResolveInvalidParameter is created when the DNS client can not start
the name resolution process because the function \ref netDNSc_GetHostByName
or \ref netDNSc_GetHostByNameX is called with an invalid input parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ResolveClientBusy(void)
\details
The event \b ResolveClientBusy is created when the function \ref netDNSc_GetHostByName
or \ref netDNSc_GetHostByNameX is executed, and the DNS client is still busy resolving
the host name.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ResolvedAddress(const void *net_addr)
\details
The event \b ResolvedAddress is created when the DNS client has resolved the requested
host name internally. The host name was an ascii address, such as "192.168.0.100"
or the local host name.

\b Value in the Event Recorder shows:
  - \b ip: resolved address of the host.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ResolveDnsServerUnknown(void)
\details
The event \b ResolveDnsServerUnknown is created when the function \ref netDNSc_GetHostByName
or \ref netDNSc_GetHostByNameX is executed, and the DNS server address is unknown.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_SendRequest(const void *net_addr)
\details
The event \b SendRequest is created when the network library wants to send the DNS
request message to DNS server.

\b Value in the Event Recorder shows:
  - \b server: address of the DNS server.
  - \b port:   port number of the DNS server.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ClearCache(uint32_t deleted, uint32_t available)
\details
The event \b ClearCache is created when the function \ref netDNSc_ClearCache is executed.

\b Value in the Event Recorder shows:
  - \b deleted: number of deleted cache entries.
  - \b max:     maximum number of DNS cache entries.
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_ClearCacheClientBusy(void)
\details
The event \b ClearCacheClientBusy is created when the function \ref netDNSc_ClearCache
is executed, and the DNS client is still busy resolving the host name.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetDNS_UninitClient(void)
\details
The event \b UninitClient is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b dns
*/

/**
@}
*/

/**
\defgroup net_evr_snmp_func NetSNMP: SNMP Agent
\brief Events generated by the Network - SNMP Agent functions
\details
The SNMP Agent functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the SNMP agent works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_InitAgent(void)
\details
The event \b InitAgent is created when the SNMP agent is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b snmp
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the SNMP agent is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the UDP socket. To resolve this error, you must increase the number of available
UDP sockets in the UDP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ViewCommunity(const char *community, uint32_t length)
\details
The event \b ViewCommunity is created when a network library wants to display a community
of which the SNMP agent is a member. Only members of the same community can communicate
with each other using the SNMP protocol. The default community name is public.

\b Value in the Event Recorder shows:
  - \b community: name of the community.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_SetCommunity(const char *community, uint32_t length)
\details
The event \b SetCommunity is created when the SNMP agent changes the SNMP community
of which the SNMP agent is a member. This happens when the \ref netSNMP_SetCommunity
function is executed.

\b Value in the Event Recorder shows:
  - \b community: name of the community to be set.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_SetCommunityInvalidParam(void)
\details
The event \b SetCommunityInvalidParam is created when the SNMP agent can not change
the community name because the \ref netSNMP_SetCommunity function is called with
an invalid input parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_SetMibTable(uint32_t num_entries)
\details
The event \b SetMibTable is created when the SNMP agent registers the SNMP-MIB table
as the SNMP management database. This happens when the \ref netSNMP_SetMIB_Table
function is executed.

\b Value in the Event Recorder shows:
  - \b entries: number of available entries in the SNMP-MIB table.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_SetMibTableInvalidParam(void)
\details
The event \b SetMibTableInvalidParam is created when the SNMP agent can not register
the SNMP-MIB table because the \ref netSNMP_SetMIB_Table function is called with an
invalid input parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_Trap(const uint8_t *ip4_addr, uint8_t generic, uint8_t specific, uint16_t nobj)
\details
The event \b Trap is created, when the function \ref netSNMP_Trap sends an alert
message to the trap manager.

\b Value in the Event Recorder shows:
  - \b ip:       IPv4 address of the trap manager.
  - \b generic:  generic trap type.
  - \b specific: specific trap type for enterpriseSecific trap.
  - \b nobj:     number of objects encoded in the trap message.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_TrapInvalidParameter(void)
\details
The event \b TrapInvalidParameter is created when the SNMP agent can not send an
alert message because the \ref netSNMP_Trap function is called with an invalid
input parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_TrapMibTableNotSet(void)
\details
The event \b TrapMibTableNotSet is created when the SNMP agent can not send an
alert message because the MIB table is not registered when the \ref netSNMP_Trap
function is called. To resolve this error, you must register a valid SNMP-MIB table
using the \ref netSNMP_SetMIB_Table function.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_TrapMissingSysObjectId(void)
\details
The event \b TrapMissingSysObjectId is created when the SNMP agent can not send an
alert message because the mandatory \b sysObjectID object is missing in the SNMP-MIB
table. To resolve this error, you must first add the missing object to the table.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_TrapGenericTrapInvalid(uint8_t generic, uint8_t max_generic)
\details
The event \b TrapGenericTrapInvalid is created when the SNMP agent can not send an
alert message because the \b generic trap number is not valid.

\b Value in the Event Recorder shows:
  - \b generic: generic trap type.
  - \b max:     the highest possible value of the generic trap.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_TrapTooManyObjects(int32_t nobj, int32_t max_nobj)
\details
The event \b TrapTooManyObjects is created when the SNMP agent can not send an alert
message because the number of requested objects exceeds maximum number of objects
that can be encoded in the trap message.

\b Value in the Event Recorder shows:
  - \b nobj: number of requested objects.
  - \b max:  maximum number of objects in the trap message.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_TrapObjectNotExisting(int32_t obj, int32_t max_obj)
\details
The event \b TrapObjectNotExisting is created when the SNMP agent can not send an alert
message because the requested object is not existing in the registered SNMP-MIB table.
To resolve this error, you must correct the \b obj_list parameter of the \ref netSNMP_Trap
function.

\b Value in the Event Recorder shows:
  - \b obj: index of requested object.
  - \b max: the highest possible index of the object.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_TrapMessageTooBig(uint16_t size, uint16_t max_size)
\details
The event \b TrapMessageTooBig is created when the SNMP agent can not send an alert
message because the trap message generated would exceed the maximum message size.

\b Value in the Event Recorder shows:
  - \b size: size of the required trap message.
  - \b max:  maximum size of the trap message.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_MibAddObject(int32_t obj, uint8_t obj_type)
\details
The event \b MibAddObject is created when the network library adds an object to
a generated SNMP trap or SNMP response message.

\b Value in the Event Recorder shows:
  - \b type:  type of the added object.
  - \b index: object index in the SNMP-MIB table.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ViewObjectId(const char *oid, uint32_t length)
\details
The event \b ViewObjectId is created when the network library wants to display
object name information, that is the value of the OID.

\b Value in the Event Recorder shows:
  - \b oid: object identification name.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ViewObjectVal(uint8_t type, uint32_t val)
\details
The event \b ViewObjectVal is created when the network library wants to display
the value of an integer or unsigned integer object.

The following subtype events are generated:
- \b ViewObjectVal-Integer for integer object,
- \b ViewObjectVal-Counter for counter object,
- \b ViewObjectVal-Gauge for gauge object,
- \b ViewObjectVal-Ticks for tick object.

\b Value in the Event Recorder shows:
  - \b val: object value.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ViewObjectAddr(const uint8_t *ip4_addr)
\details
The event \b ViewObjectAddr is created when the network library wants to display
the value of an IP address object.

\b Value in the Event Recorder shows:
  - \b ip: IPv4 address value.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ViewObjectVar(uint8_t type, const void *value, uint32_t length)
\details
The event \b ViewObjectVar is created when the network library wants to display
the value of an object of variable length.

The following subtype events are generated:
- \b ViewObjectVar-OID for OID object,
- \b ViewObjectVar-String for ascii-string object,
- \b ViewObjectVar-BString for byte-string object.

\b ViewObjectVar-OID in the Event Recorder shows:
  - \b oid: object ID value.

\b ViewObjectVar-String in the Event Recorder shows:
  - \b len: length of the octet-string.
  - \b val: octet-string content in ascii form.

\b ViewObjectVar-BString in the Event Recorder shows:
  - \b len: length of the byte-string.
  - \b val: byte-string content in hexadecimal form.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ReceiveFrame(const uint8_t *ip4_addr, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the SNMP frame.

\b Value in the Event Recorder shows:
  - \b ip:  address of the message sender.
  - \b len: length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the SNMP frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_FrameProtocolError(void)
\details
The event \b FrameProtocolError is created when the network library detects an error
parsing the received frame. The error is most likely in the incorrect encoding of the
ASN.1 object within SNMP frame. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_VersionNotSupported(int32_t version)
\details
The event \b VersionNotSupported is created when the network library receives a
version of SNMP that is not supported by the network library. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b ver: received SNMP protocol version.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_WrongCommunityReceived(void)
\details
The event \b WrongCommunityReceived is created when the network library receives the
SNMP frame with another community. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_InvalidRequestType(uint8_t req_type)
\details
The event \b InvalidRequestType is created when the network library receives an
SNMP frame with a request type that is not allowed or not supported. The frame is
discarded.

\b Value in the Event Recorder shows:
  - \b type: received SNMP request type.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ViewRequest(uint8_t req_type, int32_t req_id)
\details
The event \b ViewRequest is created when the network library wants to display the
received SNMP request type and request identification number.

\b Value in the Event Recorder shows:
  - \b type: SNMP request type.
  - \b id:   request identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_TooManyObjectsReceived(int32_t nobj, int32_t max_nobj)
\details
The event \b TooManyObjectsReceived is created when the SNMP agent receives a frame
with an exceeded number of encoded objects. TThe frame is discarded and the SNMP agent
responds with an error message.

\b Value in the Event Recorder shows:
  - \b nobj: number of encoded objects.
  - \b max:  maximum number of objects in a message.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ObjectNotFound(int32_t obj)
\details
The event \b ObjectNotFound is created when the SNMP agent can not find the encoded
object from the received frame in the SNMP-MIB table. The frame is discarded and the
SNMP agent responds with an error message.

\b Value in the Event Recorder shows:
  - \b obj: index of requested object.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ObjectWrongType(int32_t obj)
\details
The event \b ObjectWrongType is created when the SNMP agent finds inconsisteny in
received encoded object type. The types of objects are different. The frame is
discarded and the SNMP agent responds with an error message.

\b Value in the Event Recorder shows:
  - \b obj: index of requested object.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ObjectReadOnly(int32_t obj)
\details
The event \b ObjectReadOnly is created when the SNMP agent tries to write the
read-only object. The frame is discarded and the SNMP agent responds with an error
message.

\b Value in the Event Recorder shows:
  - \b obj: index of reqested object.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ObjectWriteFailed(int32_t obj)
\details
The event \b ObjectWriteFailed is created when the SNMP agent tries to write the
writtable object but the write operaiton fails. The frame is discarded and the SNMP
agent responds with an error message.

\b Value in the Event Recorder shows:
  - \b obj: index of reqested object.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_SendErrorStatus(uint8_t stat, uint8_t obj_index)
\details
The event \b SendErrorStatus is created when the SNMP agent responds to an SNMP request
with an error message.

\b Value in the Event Recorder shows:
  - \b error: error status.
  - \b index: index of the erroneous object.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_ResponseMessageTooBig(uint16_t size, uint16_t max_size)
\details
The event \b ResponseMessageTooBig is created when the SNMP agent can not send a
response because the generated response message would exceed the maximum message size.

\b Value in the Event Recorder shows:
  - \b size: size of the required response message.
  - \b max:  maximum size of the response message.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_SendGetResponse(int32_t req_id)
\details
The event \b SendGetResponse is created when the SNMP agent sends a response to a
GET or GETNEXT request.

\b Value in the Event Recorder shows:
  - \b id: request identification number.
*/

/**
\fn __STATIC_INLINE void EvrNetSNMP_UninitAgent(void)
\details
The event \b UninitAgent is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b snmp
*/

/**
@}
*/

/**
\defgroup net_evr_sntp_func NetSNTP: SNTP Client
\brief Events generated by the Network - SNTP Client functions
\details
The SNTP Client functions generate events that make it easier to troubleshoot errors,
and allow the user to understand how the SNTP client works.
@{
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_InitClient(uint8_t mode)
\details
The event \b InitClient is created when the SNTP client is initialized, that is,
when the function \ref netInitialize is executed.

\b Value in the Event Recorder shows:
  - \b mode: mode of operation (Unicast,Bcast).
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetSocketFailed(void)
\details
The event \b GetSocketFailed is created when the SNTP client is initialized, that is,
when the function \ref netInitialize is executed, and the service could not assign
the UDP socket. To resolve this error, you must increase the number of available
UDP sockets in the UDP socket configuration.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTime(uint8_t mode)
\details
The event \b GetTime is created when the SNTP client starts the time retrieval process.
This happens when the \ref netSNTPc_GetTime or \ref netSNTPc_GetTimeX function is
executed.

\b Value in the Event Recorder shows:
  - \b mode: mode of operation (Unicast,Bcast).
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimeInvalidParameter(void)
\details
The event \b GetTimeInvalidParameter is created when the SNTP client can not start
the time retrieval process because the \ref netSNTPc_GetTime function is called with
an invalid input parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimeWrongState(uint8_t state)
\details
The event \b GetTimeWrongState is created when the SNTP client can not start the time
retrieval process because the client is busy retrieving a previous request that has
not yet completed.

\b Value in the Event Recorder shows:
  - \b state: client status (BUSY,OPEN).
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimeOpen(const uint8_t *ip4_addr)
\details
The event \b GetTimeOpen is created when the SNTP client starts the process of
retrieving time in broadcast mode. If the IPv4 address of the server is not specified,
the client receives time messages from any NTP server.

\b Value in the Event Recorder shows:
  - \b ntp: IPv4 address of the NTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimeClose(void)
\details
The event \b GetTimeClose is created when the SNTP client stops the time retrieving
process in broadcast mode.

\b Value in the Event Recorder shows:
  - \b stop
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimeServerUnknown(const uint8_t *ip4_addr)
\details
The event \b GetTimeServerUnknown is created when the SNTP client can not start the time
retrieval process in unicast mode because the NTP server address is not specified.

\b Value in the Event Recorder shows:
  - \b ntp: IPv4 address of the NTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimexInvalidParameter(void)
\details
The event \b GetTimexInvalidParameter is created when the SNTP client can not retrieve
the time because the \ref netSNTPc_GetTimeX function is called with an invalid input
parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimexClientBusy(void)
\details
The event \b GetTimexClientBusy is created when the SNTP client can not retrieve
the time because the SNTP client is busy retrieving a previous request that has not
yet completed.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimexServerNotValid(void)
\details
The event \b GetTimexServerNotValid is created when the SNTP client can not retrieve
the time because the NTP server name is not valid and the server IP address can not
be resolved.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_GetTimexDnsError(void)
\details
The event \b GetTimexDnsError is created when the SNTP client can not retrieve the
time because the NTP server can not be resolved due to an error in the DNS resolution
process. If the error was caused by a DNS server unresponsiveness or a network error,
then calling the function \ref netSNTPc_GetTimeX again will correct the error.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_SetMode(uint8_t mode)
\details
The event \b SetMode is created when the SNTP client sets the operation mode of the
client. This happens when the \ref netSNTPc_SetMode function is executed.

\b Value in the Event Recorder shows:
  - \b mode: mode of operation (Unicast,Bcast).
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_SetModeInvalidParameter(void)
\details
The event \b SetModeInvalidParameter is created when the SNTP client can not set the
operation mode because the \ref netSNTPc_SetMode function is called with an invalid input
parameter.

\b Value in the Event Recorder shows:
  - \b error
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_SetModeWrongState(uint8_t state)
\details
The event \b SetModeWrongState is created when the SNTP client can not set the
operation mode because the client is busy retrieving a previous request that has
not yet completed.

\b Value in the Event Recorder shows:
  - \b state: client status (BUSY,OPEN).
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_SendMessage(const uint8_t *ip4_addr)
\details
The event \b SendMessage is created when the SNTP client sends a time request
message to the NTP server.

\b Value in the Event Recorder shows:
  - \b ntp: IPv4 address of the NTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_ServerNotResponding(const uint8_t *ip4_addr)
\details
The event \b ServerNotResponding is created when the SNTP client does not receive
a response from the NTP server after retrying the time request.

\b Value in the Event Recorder shows:
  - \b ntp: IPv4 address of the NTP server.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_ReceiveFrame(const uint8_t *ip4_addr, uint32_t length)
\details
The event \b ReceiveFrame is created when the network library receives the NTP frame.

\b Value in the Event Recorder shows:
  - \b ntp: address of the NTP server sending the message.
  - \b len: length of the received frame in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_WrongServerPort(uint16_t udp_port)
\details
The event \b WrongServerPort is created when the network library receives the NTP frame
from invalid UDP server source port. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b port: UDP source port of the server.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_FrameTooShort(uint32_t length, uint32_t min_length)
\details
The event \b FrameTooShort is created when the network library receives the NTP frame
that is too short. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b len: length of the received frame in bytes.
  - \b min: minimum valid frame length in bytes.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_WrongServerAddress(const uint8_t *ip4_addr)
\details
The event \b WrongServerAddress is created when the network library receives the
NTP frame from an invalid NTP server. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b ntp: address of the NTP server sending the message.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_ModeNotServer(uint8_t mode)
\details
The event \b ModeNotServer is created when the network library receives the NTP frame
and the mode label in the message is not set to server mode. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b mode: mode label in the received NTP frame.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_ModeNotBroadcast(uint8_t mode)
\details
The event \b ModeNotBroadcast is created when the network library receives the NTP frame
and the mode label in the message is not set to broadcast mode. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b mode: mode label in the received NTP frame.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_AnswerInWrongState(uint8_t state)
\details
The event \b AnswerInWrongState is created when the network library receives an NTP
response in an incompatible SNTP client state. The frame is discarded.

\b Value in the Event Recorder shows:
  - \b state: client status.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_ShowTimeStamp(uint32_t ref_time, uint32_t utc_time)
\details
The event \b ShowTimeStamp is created when the network library wants to display the
received NTP time.

\b Value in the Event Recorder shows:
  - \b ref: reference time.
  - \b utc: utc time.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_TimeStampInvalid(uint32_t ref_time)
\details
The event \b TimeStampInvalid is created when the network library receives an NTP
response with a time that is not valid (before Jan 1, 1970).

\b Value in the Event Recorder shows:
  - \b ref: invalid reference time.
*/

/**
\fn __STATIC_INLINE void EvrNetSNTP_UninitClient(void)
\details
The event \b UninitClient is created when the function \ref netUninitialize is executed.

\b Value in the Event Recorder shows:
  - \b sntp
*/

/**
@}
*/

/**
@}
*/
// end group Event Recorder
