/*
\defgroup   usbd_structs  Structures
\ingroup    usbd
\brief      Structures of USB Device component

\struct usbd_desc_t
\brief USB Descriptors Structure
\details

**Used in**
- \ref Overriding_Descriptors
*/

typedef struct {
  uint32_t          vbus   : 1;         ///< USB Device VBUS state
  uint32_t          speed  : 2;         ///< USB Device enumerated speed (USB_SPEED_LOW, USB_SPEED_FULL or USB_SPEED_HIGH)
  uint32_t          active : 1;         ///< USB Device bus activity
} USBD_STATE;

typedef struct _USB_SETUP_PACKET {
  USB_REQUEST_TYPE  bmRequestType;      ///< Characteristics of request
  uint8_t           bRequest;           ///< Specific request
  uint16_t          wValue;             ///< Value according to request
  uint16_t          wIndex;             ///< Index or Offset according to request
  uint16_t          wLength;            ///< Number of bytes to transfer if there is a Data stage
} USB_SETUP_PACKET;

typedef struct _CDC_LINE_CODING {
  uint32_t          dwDTERate;          ///< Data terminal rate in bits per second
  uint8_t           bCharFormat;        ///< Number of stop bits
  uint8_t           bParityType;        ///< Parity bit type
  uint8_t           bDataBits;          ///< Number of data bits
} CDC_LINE_CODING;

typedef struct {
  uint16_t          wLength;                 ///< Size of this structure, in bytes = 1Ch
  uint16_t          bmNtbFormatsSupported;   ///< Bit 0: 16-bit NTB supported (set to 1), Bit 1: 32-bit NTB supported, Bits 2 .. 15: reserved
  uint32_t          dwNtbInMaxSize;          ///< IN NTB Maximum Size in bytes
  uint16_t          wNdpInDivisor;           ///< Divisor used for IN NTB Datagram payload alignment
  uint16_t          wNdpInPayloadRemainder;  ///< Remainder used to align input datagram payload within the NTB
  uint16_t          wNdpInAlignment;         ///< NDP alignment modulus for NTBs on the IN pipe. Shall be a power of 2, and shall be at least 4.
  uint32_t          dwNtbOutMaxSize;         ///< OUT NTB Maximum Size
  uint16_t          wNdpOutDivisor;          ///< OUT NTB Datagram alignment modulus
  uint16_t          wNdpOutPayloadRemainder; ///< Remainder used to align output datagram payload offsets within the NTB
  uint16_t          wNdpOutAlignment;        ///< NDP alignment modulus for use in NTBs on the OUT pipe. Shall be a power of 2, and shall be at least 4.
} CDC_NCM_NTB_PARAM;

typedef struct {
  uint8_t           bLength;            ///< Size of this descriptor in bytes
  uint8_t           bDescriptorType;    ///< DEVICE Descriptor Type
  uint16_t          bcdUSB;             ///< USB Specification Release Number in Binary-Coded Decimal
  uint8_t           bDeviceClass;       ///< Class code (assigned by the USB-IF)
  uint8_t           bDeviceSubClass;    ///< Subclass code (assigned by the USB-IF)
  uint8_t           bDeviceProtocol;    ///< Protocol code (assigned by the USB-IF)
  uint8_t           bMaxPacketSize0;    ///< Maximum packet size for endpoint zero (only 8, 16, 32, or 64 are valid)
  uint16_t          idVendor;           ///< Vendor ID (assigned by the USB-IF)
  uint16_t          idProduct;          ///< Product ID (assigned by the manufacturer)
  uint16_t          bcdDevice;          ///< Device release number in binary-coded decimal
  uint8_t           iManufacturer;      ///< Index of string descriptor describing manufacturer
  uint8_t           iProduct;           ///< Index of string descriptor describing product
  uint8_t           iSerialNumber;      ///< Index of string descriptor describing the deviceâ€™s serial number
  uint8_t           bNumConfigurations; ///< Number of possible configurations
} USB_DEVICE_DESCRIPTOR;

typedef struct {
  uint8_t           bLength;            ///< Size of this descriptor in bytes
  uint8_t           bDescriptorType;    ///< CONFIGURATION Descriptor Type
  uint16_t          wTotalLength;       ///< Total length of data returned for this configuration
  uint8_t           bNumInterfaces;     ///< Number of interfaces supported by this configuration
  uint8_t           bConfigurationValue;///< Value to use as an argument to the SetConfiguration() request to select this configuration
  uint8_t           iConfiguration;     ///< Index of string descriptor describing this configuration
  uint8_t           bmAttributes;       ///< Configuration characteristics (D7: Reserved (set to one), D6: Self-powered, D5: Remote Wakeup, D4...0: Reserved (reset to zero))
  uint8_t           bMaxPower;          ///< Maximum power consumption of the USB device from the bus in this specific configuration when the device is fully operational. Expressed in 2 mA units (i.e., 50 = 100 mA).
} USB_CONFIGURATION_DESCRIPTOR;

typedef struct {
  const uint8_t    *ep0_descriptor;                     ///< Pointer to Control \ref USB_Endpoint_Descriptor "Endpoint 0 descriptor"
  const uint8_t    *device_descriptor;                  ///< Pointer to \ref USB_Device_Descriptor
  const uint8_t    *device_qualifier_fs;                ///< Pointer to \ref USB_Device_Qualifier_Descriptor for low/full-speed
  const uint8_t    *device_qualifier_hs;                ///< Pointer to \ref USB_Device_Qualifier_Descriptor for high-speed
  const uint8_t    *config_descriptor_fs;               ///< Pointer to \ref USB_Configuration_Descriptor for low/full-speed
  const uint8_t    *config_descriptor_hs;               ///< Pointer to \ref USB_Configuration_Descriptor for high-speed
  const uint8_t    *other_speed_config_descriptor_fs;   ///< Pointer to Other speed \ref USB_Configuration_Descriptor for low/full-speed
  const uint8_t    *other_speed_config_descriptor_hs;   ///< Pointer to Other speed \ref USB_Configuration_Descriptor for high-speed
  const uint8_t    *string_descriptor;                  ///< Pointer to \ref USB_String_Descriptor
        uint8_t    *ser_num_string_descriptor;          ///< Pointer to Serial Number \ref USB_String_Descriptor
  const uint8_t    *ms_os_string_descriptor;            ///< Pointer to Microsoft OS string descriptor
  const uint8_t    *ms_os_ext_compat_id_descriptor;     ///< Pointer to Microsoft Extended Compat ID OS Feature Descriptor 
} usbd_desc_t;
